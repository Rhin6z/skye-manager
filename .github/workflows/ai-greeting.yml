name: gemini ai discord greeting

on:
  schedule:
    - cron: '0 0 * * 1-5'    # 7 AM WIB weekdays
    - cron: '0 5 * * 1-5'    # 12 PM WIB weekdays  
    - cron: '0 10 * * 1-5'   # 5 PM WIB weekdays
    - cron: '0 15 * * 1-5'   # 10 PM WIB weekdays
    - cron: '0 0 * * 6,0'    # 7 AM WIB weekends
    - cron: '0 5 * * 6,0'    # 12 PM WIB weekends
    - cron: '0 10 * * 6,0'   # 5 PM WIB weekends
    - cron: '0 15 * * 6,0'   # 10 PM WIB weekends
  workflow_dispatch:
    inputs:
      greeting_type:
        description: 'select greeting type'
        required: true
        default: 'morning'
        type: choice
        options: [morning, afternoon, evening, night]

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Send Gemini AI Greeting
        run: |
          set -e
          
          # Determine greeting type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TYPE="${{ github.event.inputs.greeting_type }}"
          else
            case "${{ github.event.schedule }}" in
              "0 0 * * 1-5"|"0 0 * * 6,0") TYPE="morning" ;;
              "0 5 * * 1-5"|"0 5 * * 6,0") TYPE="afternoon" ;;
              "0 10 * * 1-5"|"0 10 * * 6,0") TYPE="evening" ;;
              "0 15 * * 1-5"|"0 15 * * 6,0") TYPE="night" ;;
            esac
          fi
          
          # Check if weekend
          DAY=$(date +%u)
          if [[ $DAY -eq 6 || $DAY -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          echo "🤖 generating greeting: $TYPE ($CONTEXT)"
          
          # Natural eng-indo slang prompt like the good example
          read -r -d '' PROMPT << 'EOF' || true
          Buatin greeting Discord untuk TYPE_PLACEHOLDER hari CONTEXT_PLACEHOLDER yang natural kayak temen chat.

          Style wajib:
          - Casual banget, jangan formal
          - Mix English-Indonesian yang smooth, jangan dipaksa
          - English slang: "what's poppin", "brodie", "fr", "lowkey", "no cap", "periodt", "bet"  
          - Indo casual: "kek", "dikit", "kok", "banget", "anjir", "woy", "cuy", "gabut", "santuy"
          - Gaming/internet: "mmr", "noob", "mabar", "gas", "netizen", "touching grass"
          - Tone: santai, agak sarcastic, relatable
          - Semua lowercase kecuali emoji

          Contoh bagus:
          "🌃 jangan sok produktif 24/7, chill dulu kek
          what's poppin brodie! golden hour moment—ketawain aja dikit, mmr turun ga sekejam kata netizen kok fr 😌"

          Format output:
          TITLE: [casual title dengan emoji, lowercase]
          DESC: [natural sentence yang flow banget, mix eng-indo smooth]
          FOOTER: [footer pendek casual]

          Bikin yang relatable dan ga cringe!
          EOF
          
          # Replace placeholders
          PROMPT=${PROMPT//TYPE_PLACEHOLDER/$TYPE}
          PROMPT=${PROMPT//CONTEXT_PLACEHOLDER/$CONTEXT}
          
          # Try Gemini API with proper error handling and debugging
          GEMINI_RESPONSE=""
          echo "🔄 trying gemini-1.5-flash api..."
          
          # Add debug info
          echo "API endpoint: https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"
          echo "Prompt length: $(echo "$PROMPT" | wc -c)"
          
          # Try primary model first
          HTTP_CODE=$(curl -w "%{http_code}" -f -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"contents\": [{
                \"parts\": [{\"text\": \"$PROMPT\"}]
              }],
              \"generationConfig\": {
                \"temperature\": 0.8,
                \"maxOutputTokens\": 300,
                \"topP\": 0.8,
                \"topK\": 10
              }
            }" \
            --connect-timeout 15 --max-time 30 -o /tmp/gemini_response.json 2>/tmp/curl_error.log)
          
          echo "Primary model HTTP response code: $HTTP_CODE"
          
          # If primary fails, try alternative model
          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "🔄 trying alternative gemini-pro model..."
            HTTP_CODE=$(curl -w "%{http_code}" -f -s -X POST \
              "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"contents\": [{
                  \"parts\": [{\"text\": \"$PROMPT\"}]
                }],
                \"generationConfig\": {
                  \"temperature\": 0.8,
                  \"maxOutputTokens\": 300
                }
              }" \
              --connect-timeout 15 --max-time 30 -o /tmp/gemini_response.json 2>/tmp/curl_error.log)
            echo "Alternative model HTTP response code: $HTTP_CODE"
          fi
          
          if [[ "$HTTP_CODE" == "200" ]] && [[ -f /tmp/gemini_response.json ]]; then
            echo "✅ gemini api call successful"
            
            # Show response for debugging
            echo "Raw response size: $(cat /tmp/gemini_response.json | wc -c) bytes"
            
            # Check if response has error
            if ERROR_MSG=$(jq -r '.error.message // empty' /tmp/gemini_response.json 2>/dev/null); then
              if [[ -n "$ERROR_MSG" ]]; then
                echo "❌ gemini api error: $ERROR_MSG"
                USE_AI=false
              else
                # Parse successful response
                if AI_TEXT=$(jq -r '.candidates[0].content.parts[0].text' /tmp/gemini_response.json 2>/dev/null); then
                  echo "✅ gemini api success"
                  echo "Raw AI response:"
                  echo "$AI_TEXT"
                  echo "---"
                  
                  # Clean up and extract with more robust parsing
                  CLEAN_TEXT=$(echo "$AI_TEXT" | tr -d '\r' | sed 's/\*\*//g' | sed 's/\*//g')
                  
                  # Extract TITLE (more flexible matching)
                  TITLE=$(echo "$CLEAN_TEXT" | grep -i "^TITLE:" | head -1 | sed 's/^[Tt][Ii][Tt][Ll][Ee]:[[:space:]]*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
                  
                  # Extract FOOTER (more flexible matching) 
                  FOOTER=$(echo "$CLEAN_TEXT" | grep -i "^FOOTER:" | head -1 | sed 's/^[Ff][Oo][Oo][Tt][Ee][Rr]:[[:space:]]*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
                  
                  # Extract DESC - get everything between DESC: and > by server dev, or just after DESC:
                  DESC_RAW=$(echo "$CLEAN_TEXT" | sed -n '/^[Dd][Ee][Ss][Cc]:/,/^> by server dev/p' | grep -v "^TITLE:" | grep -v "^FOOTER:" | sed '/^> by server dev/d' | sed 's/^[Dd][Ee][Ss][Cc]:[[:space:]]*//' | tr '\n' ' ' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
                  
                  # If that doesn't work, try simpler extraction
                  if [[ -z "$DESC_RAW" ]]; then
                    DESC_RAW=$(echo "$CLEAN_TEXT" | grep -i "^DESC:" | head -1 | sed 's/^[Dd][Ee][Ss][Cc]:[[:space:]]*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
                  fi
                  
                  # Clean up DESC and add required ending
                  if [[ -n "$DESC_RAW" ]]; then
                    DESC="$DESC_RAW\\n> by server dev - <@399393175904714752>"
                  fi
                  
                  echo "Extracted parts:"
                  echo "TITLE: [$TITLE]"
                  echo "DESC: [$DESC_RAW]"
                  echo "FOOTER: [$FOOTER]"
                  
                  # Validate - more lenient validation
                  if [[ -n "$TITLE" && -n "$DESC_RAW" ]]; then
                    echo "✅ parsing successful"
                    USE_AI=true
                    # Set default footer if empty
                    if [[ -z "$FOOTER" ]]; then
                      FOOTER="vibes only no cap"
                    fi
                  else
                    echo "❌ parsing failed, using fallback"
                    echo "Missing: $([ -z "$TITLE" ] && echo "TITLE ")$([ -z "$DESC_RAW" ] && echo "DESC ")"
                    USE_AI=false
                  fi
                else
                  echo "❌ failed to extract AI text from response"
                  USE_AI=false
                fi
              fi
            else
              echo "❌ json parsing failed or response empty"
              USE_AI=false
            fi
          else
            echo "❌ gemini api call failed with HTTP code: $HTTP_CODE"
            if [[ -f /tmp/curl_error.log ]]; then
              echo "Curl error log:"
              cat /tmp/curl_error.log
            fi
            if [[ -f /tmp/gemini_response.json ]]; then
              echo "Response content:"
              cat /tmp/gemini_response.json
            fi
            USE_AI=false
          fi
          
          # Fallback messages with natural casual style like the good example  
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 using fallback greeting"
            INDEX=$((RANDOM % 3))
            
            case "$TYPE-$INDEX" in
              "morning-0")
                TITLE="� bangun dong, pagi udah becall"
                DESC="what's poppin early birds! another day another mmr—eh salah, another dollar kocak 😂\\n> by server dev - <@399393175904714752>"
                FOOTER="caffeine loading"
                ;;
              "morning-1")
                TITLE="☀️ jangan jadi zombie pagi-pagi"
                DESC="morning vibes activated fr! kopi dulu baru bisa mikir jernih, ga usah sok produktif langsung anjir ☕\\n> by server dev - <@399393175904714752>"
                FOOTER="fuel up dulu"
                ;;
              "morning-2")
                TITLE="🌄 morning but make it chill"
                DESC="yo brodie what's the plan? pagi $CONTEXT gini perfect buat fresh start, jangan overthink dikit aja kek 🌟\\n> by server dev - <@399393175904714752>"
                FOOTER="new day energy"
                ;;
              "afternoon-0")
                TITLE="� lunch break is sacred time"
                DESC="midday check! perut udah protes belum? makan siang itu self care juga cuy, jangan skip terus nanti hangry 😋\\n> by server dev - <@399393175904714752>"
                FOOTER="feed yourself bestie"
                ;;
              "afternoon-1")
                TITLE="� siang-siang gini ngapain aja"
                DESC="what's good afternoon squad? energy udah mulai drop ya? normal kok, touching grass sebentar atau minum air putih dikit �\\n> by server dev - <@399393175904714752>"
                FOOTER="recharge time"
                ;;
              "afternoon-2")
                TITLE="😎 afternoon vibes kinda mid tho"
                DESC="yo afternoon slump is real fr! productivity curve lagi turun, santai aja dulu jangan dipaksa nanti error system 📉\\n> by server dev - <@399393175904714752>"
                FOOTER="it's okay to rest"
                ;;
              "evening-0")
                TITLE="🌆 golden hour tapi masih gabut"
                DESC="what's poppin evening crew! sunset $CONTEXT hits different—ketawain aja dikit, besok masih ada kok anjir 🌅\\n> by server dev - <@399393175904714752>"
                FOOTER="chill evening mode"
                ;;
              "evening-1")
                TITLE="✨ jangan sok aesthetic terus"
                DESC="evening vibes lowkey peaceful fr! playlist chill udah ready? time to unwind dikit sebelum malem dateng 🎵\\n> by server dev - <@399393175904714752>"
                FOOTER="soundtrack your evening"
                ;;
              "evening-2")
                TITLE="🌇 sore-sore reflect dikit"
                DESC="yo how was today brodie? ups and downs normal lah, yang penting masih bisa ketawa sama temen-temen kek gini 😌\\n> by server dev - <@399393175904714752>"
                FOOTER="you did good today"
                ;;
              "night-0")
                TITLE="🌙 malem tapi masih melek"
                DESC="what's good night owls! $CONTEXT night perfect buat santai—jangan overthink kemarin, besok fresh start lagi kok 🌟\\n> by server dev - <@399393175904714752>"
                FOOTER="relax your mind"
                ;;
              "night-1")
                TITLE="💤 bedtime story: rank turun"
                DESC="gn squad! malem $CONTEXT gini perfect buat istirahat—mmr turun ga sekejam kata netizen kok fr �\\n> by server dev - <@399393175904714752>"
                FOOTER="dreams > rank anxiety"
                ;;
              "night-2")
                TITLE="🌜 jangan begadang mulu dong"
                DESC="night night brodie! tidur yang bener ya, besok masih ada episode baru kehidupan yang perlu di-tackle kocak 🛌\\n> by server dev - <@399393175904714752>"
                FOOTER="sleep is self care"
                ;;
            esac
          fi
          
          # Set colors and thumbnails
          case "$TYPE" in
            "morning") COLOR=16766720; THUMB="1f305" ;;
            "afternoon") COLOR=16763904; THUMB="2600" ;;
            "evening") COLOR=16744448; THUMB="1f307" ;;
            "night") COLOR=8947848; THUMB="1f319" ;;
          esac
          
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Send to Discord (simplified like your working code)
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               --connect-timeout 10 --max-time 15 \
               -d "{\"embeds\":[{\"title\":\"$TITLE\",\"description\":\"$DESC\",\"color\":$COLOR,\"thumbnail\":{\"url\":\"https://twemoji.maxcdn.com/v/latest/72x72/$THUMB.png\"},\"footer\":{\"text\":\"$FOOTER\",\"icon_url\":\"https://files.catbox.moe/npfh4e.jpg\"},\"timestamp\":\"$TIMESTAMP\"}]}"
          
          echo "✅ sent $TYPE greeting (ai: ${USE_AI:-false}, context: $CONTEXT)"
          
          # Cleanup
          rm -f /tmp/gemini_response.json /tmp/ai_content.txt
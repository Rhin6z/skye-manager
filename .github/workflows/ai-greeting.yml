name: AI Discord Greeting

on:
  schedule:
    - cron: '0 0 * * 1-5'    # 7 AM WIB weekdays (morning)
    - cron: '0 5 * * 1-5'    # 12 PM WIB weekdays (afternoon)
    - cron: '0 10 * * 1-5'   # 5 PM WIB weekdays (evening)
    - cron: '0 15 * * 1-5'   # 10 PM WIB weekdays (night)
    - cron: '0 0 * * 6,0'    # 7 AM WIB weekends (morning)
    - cron: '0 5 * * 6,0'    # 12 PM WIB weekends (afternoon)
    - cron: '0 10 * * 6,0'   # 5 PM WIB weekends (evening)
    - cron: '0 15 * * 6,0'   # 10 PM WIB weekends (night)
  workflow_dispatch:
    inputs:
      greeting_type:
        description: 'Select greeting type'
        required: true
        default: 'morning'
        type: choice
        options: [morning, afternoon, evening, night]

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Generate and Send AI Greeting
        run: |
          # Determine greeting type and context
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TYPE="${{ github.event.inputs.greeting_type }}"
          else
            case "${{ github.event.schedule }}" in
              "0 0 * * 1-5"|"0 0 * * 6,0") TYPE="morning" ;;
              "0 5 * * 1-5"|"0 5 * * 6,0") TYPE="afternoon" ;;
              "0 10 * * 1-5"|"0 10 * * 6,0") TYPE="evening" ;;
              "0 15 * * 1-5"|"0 15 * * 6,0") TYPE="night" ;;
            esac
          fi
          
          DAY=$(date +%u)
          if [[ $DAY -eq 6 || $DAY -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          # Check for weekend transitions and next day info
          WEEKEND_TRANSITION=""
          NEXT_DAY_INFO=""
          if [[ "$TYPE" == "night" || "$TYPE" == "evening" ]]; then
            case $DAY in
              5) 
                WEEKEND_TRANSITION="weekend_starts"
                NEXT_DAY_INFO="besok udah sabtu nihhh coyyy / tomorrow's saturday brooo"
                ;;
              6) 
                WEEKEND_TRANSITION="weekend_continues"
                NEXT_DAY_INFO="besok minggu santuy banget / tomorrow's sunday super chill"
                ;;
              7) 
                WEEKEND_TRANSITION="weekend_ends"
                NEXT_DAY_INFO="besok senin balik grind / tomorrow's monday back to grind"
                ;;
              1)
                NEXT_DAY_INFO="besok selasa masih semangat / tomorrow's tuesday still going strong"
                ;;
              2)
                NEXT_DAY_INFO="besok rabu hump day / tomorrow's wednesday hump day"
                ;;
              3)
                NEXT_DAY_INFO="besok kamis almost there / tomorrow's thursday almost there"
                ;;
              4)
                NEXT_DAY_INFO="besok jumat weekend loading / tomorrow's friday weekend loading"
                ;;
            esac
          fi
          
          echo "ü§ñ Generating $TYPE greeting for $CONTEXT"
          if [[ -n "$WEEKEND_TRANSITION" ]]; then
            echo "üìÖ Weekend transition detected: $WEEKEND_TRANSITION"
          fi
          if [[ -n "$NEXT_DAY_INFO" ]]; then
            echo "üìÖ Next day info: $NEXT_DAY_INFO"
          fi
          
          # Create simple prompt without problematic characters
          cat > /tmp/prompt.txt << 'EOF'
          Create a casual Discord greeting for TIME_HERE on CONTEXT_HERE.
          
          WEEKEND_TRANSITION_INFO
          NEXT_DAY_INFO_TEXT
          
          Requirements:
          - Start with English, end with Indonesian - must flow naturally (no hard cut)
          - Tone: chill, conversational, not try-hard; PG-13; no hashtags; no @everyone
          - Mix slang (use 2‚Äì3 max): brodie, fr, lowkey, anjir, dikit, gabut, cuy
          - Allow playful misspells (use 1‚Äì2 max): banngh, lowl, deym, dayumm, dangg, cuyy, brodiee, skuy, gais, santuy/santay, wkwwk/lmaoo
          - Gaming terms (use 1 max): mmr, noob, mabar, touching grass
          - Keep it SHORT and conversational (max 2 lines, ‚â§18 words per line)
          - International Discord server vibe; avoid hyper-local references; readable for non-Indo members
          - Use exactly 1 emoji in TITLE only
          - No hyphens or dashes in DESC; use commas or semicolons if needed
          - For evening/night greetings, include casual next-day mentions when provided
          
          Good examples:
          morning gang lowkey warm up then hop vc lanjut mabar santuy cuyy
          what‚Äôs good team fr just chill here dulu kalo gabut mabar tipis banngh
          evening check in we touch grass a bit abis itu queue bareng brodiee
          late night lobby lowl still up or tidur dulu aja santay
          midday reset hydrate then hop back in lanjut grind mmr dikit cuy
          afterwork vibes deym breathe stretch terus join vc yuk
          sunday slow start take it easy dulu abis itu skuy mabar barengan
          sunrise ping coffee first or langsung queue yang noob santai aja ikut
          midweek energy focus a bit then break sebentar lanjut ngobrol gabut
          weekend mode we outside dulu terus balik ngepush dikit dayumm
          hello gamers lowkey hang here or slide to lobby yang mau mabar gaskeun
          good afternoon crew tune in vc or lurk aja dulu gais
          friday evening vibes dangg besok weekend cuyy time to celebrate
          thursday night energy lowkey besok jumat weekend loading brodiee
          saturday evening santuy besok minggu super chill dayumm
          evening squad deym besok sabtu nihhh coyyy weekend mode activated
          
          Format:
          TITLE: [casual title with emoji]
          DESC: [short natural flow English-Indonesian mix; 1‚Äì2 lines max; no dashes]
          FOOTER: [short footer]
          
          Keep it natural and short!
          EOF
          
          # Replace placeholders
          sed -i "s/TIME_HERE/$TYPE/g" /tmp/prompt.txt
          sed -i "s/CONTEXT_HERE/$CONTEXT/g" /tmp/prompt.txt
          sed -i "s|NEXT_DAY_INFO_TEXT|$NEXT_DAY_INFO|g" /tmp/prompt.txt
          
          # Try Gemini API
          echo "üîÑ Calling Gemini API..."
          
          # Create JSON payload safely
          python3 << 'PYTHON_EOF'
          import json
          import requests
          import os
          import sys
          
          # Read prompt
          with open('/tmp/prompt.txt', 'r') as f:
              prompt = f.read().strip()
          
          # Prepare request
          api_key = os.environ.get('GEMINI_API_KEY')
          if not api_key:
              print("‚ùå No API key found")
              sys.exit(1)
          
          url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent?key={api_key}"
          
          payload = {
              "contents": [{"parts": [{"text": prompt}]}],
              "generationConfig": {
                  "temperature": 0.8,
                  "maxOutputTokens": 300
              }
          }
          
          try:
              response = requests.post(url, json=payload, timeout=30)
              
              if response.status_code == 200:
                  data = response.json()
                  if 'candidates' in data and len(data['candidates']) > 0:
                      ai_text = data['candidates'][0]['content']['parts'][0]['text']
                      print("‚úÖ AI response received")
                      with open('/tmp/ai_response.txt', 'w') as f:
                          f.write(ai_text)
                  else:
                      print("‚ùå No candidates in response")
                      with open('/tmp/ai_response.txt', 'w') as f:
                          f.write("")
              else:
                  print(f"‚ùå API error: {response.status_code}")
                  print(f"Response: {response.text}")
                  with open('/tmp/ai_response.txt', 'w') as f:
                      f.write("")
                      
          except Exception as e:
              print(f"‚ùå Request failed: {e}")
              with open('/tmp/ai_response.txt', 'w') as f:
                  f.write("")
          PYTHON_EOF
          
          # Parse AI response or use fallback
          if [[ -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "AI response preview: $(echo "$AI_TEXT" | head -c 100)..."
            
            # Extract parts
            TITLE=$(echo "$AI_TEXT" | grep -i "TITLE:" | head -1 | sed 's/.*TITLE:[[:space:]]*//' || echo "")
            DESC_RAW=$(echo "$AI_TEXT" | grep -i "DESC:" | head -1 | sed 's/.*DESC:[[:space:]]*//' || echo "")
            FOOTER=$(echo "$AI_TEXT" | grep -i "FOOTER:" | head -1 | sed 's/.*FOOTER:[[:space:]]*//' || echo "")
            
            if [[ -n "$TITLE" && -n "$DESC_RAW" ]]; then
              echo "‚úÖ Using AI generated content"
              USE_AI=true
            else
              echo "üîÑ AI format not recognized, using AI text as description"
              TITLE="ü§ñ ai vibes activated"
              DESC_RAW="$AI_TEXT"
              FOOTER="generated with love"
              USE_AI=true
            fi
          else
            echo "üé≤ Using fallback content"
            USE_AI=false
          fi
          
          # Fallback messages
          if [[ "$USE_AI" != "true" ]]; then
            case "$TYPE" in
              "morning")
                TITLE="üåÖ Morning Check"
                DESC_RAW="GM legends! Ready to grind today? Atau masih ngantuk dikit?"
                FOOTER="coffee loading..."
                ;;
              "afternoon")
                TITLE="‚òÄÔ∏è Afternoon Vibes"
                DESC_RAW="What's good crew! Time to touch grass atau lanjut mabar nih?"
                FOOTER="recharge time"
                ;;
              "evening")
                if [[ "$DAY" == "5" ]]; then
                  TITLE="üåÜ Friday Evening"
                  DESC_RAW="Evening vibes fr! Besok udah sabtu nihhh coyyy weekend mode activated"
                elif [[ "$DAY" == "4" ]]; then
                  TITLE="üåÜ Thursday Evening"
                  DESC_RAW="Almost weekend energy lowkey besok jumat weekend loading brodiee"
                else
                  TITLE="üåÜ Evening Squad"
                  DESC_RAW="How we doing tonight? Golden hour hits different, santai dulu gih"
                fi
                FOOTER="chill mode on"
                ;;
              "night")
                if [[ "$DAY" == "5" ]]; then
                  TITLE="üåô Friday Night"
                  DESC_RAW="Late night squad deym besok weekend brooo time to celebrate"
                elif [[ "$DAY" == "4" ]]; then
                  TITLE="üåô Thursday Night"
                  DESC_RAW="Thursday night energy besok jumat weekend loading cuyy almost there"
                elif [[ "$DAY" == "6" ]]; then
                  TITLE="üåô Saturday Night"
                  DESC_RAW="Saturday night vibes besok minggu santuy banget dayumm perfect timing"
                elif [[ "$CONTEXT" == "weekend" ]]; then
                  TITLE="üåô Late Night Gang"
                  DESC_RAW="Weekend night energy! Still grinding or udah gabut mode?"
                else
                  TITLE="üåú Night Shift"
                  DESC_RAW="GN fam! Hope you had a good day, besok respawn lagi cuy"
                fi
                FOOTER="rest well"
                ;;
            esac
          fi
          
          # Add required ending to description
          DESC="$DESC_RAW\\n> by server dev - <@399393175904714752>"
          
          # Set colors and thumbnails
          case "$TYPE" in
            "morning") COLOR=16766720; THUMB="1f305" ;;
            "afternoon") COLOR=16763904; THUMB="2600" ;;
            "evening") COLOR=16744448; THUMB="1f307" ;;
            "night") COLOR=8947848; THUMB="1f319" ;;
          esac
          
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          echo "üì§ Sending to Discord..."
          echo "Title: $TITLE"
          echo "Footer: $FOOTER"
          
          # Send to Discord
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               --connect-timeout 10 --max-time 15 \
               -d "{\"embeds\":[{\"title\":\"$TITLE\",\"description\":\"$DESC\",\"color\":$COLOR,\"thumbnail\":{\"url\":\"https://twemoji.maxcdn.com/v/latest/72x72/$THUMB.png\"},\"footer\":{\"text\":\"$FOOTER\",\"icon_url\":\"https://files.catbox.moe/npfh4e.jpg\"},\"timestamp\":\"$TIMESTAMP\"}]}"
          
          echo "‚úÖ Sent $TYPE greeting (AI: ${USE_AI:-false}, Context: $CONTEXT)"
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Send Random Sticker
        run: |
          echo "üé≤ Selecting random sticker..."
          
          # Wait a bit before sending sticker (so it appears after greeting)
          sleep 3
          
          # Array of sticker URLs from your server
          # Try different Discord CDN formats for stickers
          STICKERS=(
            "https://media.discordapp.net/stickers/1404543938815197306.png"
            "https://media.discordapp.net/stickers/1405277985237368943.png"
            "https://media.discordapp.net/stickers/1405477154095104082.png"
            "https://media.discordapp.net/stickers/1405487683526201404.png"
            "https://media.discordapp.net/stickers/1405546781927936051.png"
            "https://media.discordapp.net/stickers/1405855503858274397.png"
            "https://media.discordapp.net/stickers/1405914196922597549.png"
            "https://media.discordapp.net/stickers/1406065324758929509.png"
            "https://media.discordapp.net/stickers/1406629592839491716.png"
            "https://media.discordapp.net/stickers/1406668584335184003.png"
            "https://media.discordapp.net/stickers/1407858067013369856.png"
            "https://media.discordapp.net/stickers/1407858350334677204.png"
            "https://media.discordapp.net/stickers/1407858765616779396.png"
            "https://media.discordapp.net/stickers/1407859373396590735.png"
          )
          
          # Pick random sticker
          RANDOM_INDEX=$((RANDOM % ${#STICKERS[@]}))
          SELECTED_STICKER=${STICKERS[$RANDOM_INDEX]}
          
          echo "üéØ Selected sticker: $SELECTED_STICKER"
          
          # Send sticker as a simple image message (not in embed)
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               --connect-timeout 10 --max-time 15 \
               -d "{\"content\":\"$SELECTED_STICKER\"}"
          
          echo "üéâ Random sticker sent!"

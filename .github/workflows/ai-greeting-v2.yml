name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Setup Creative Context
        id: creative_context
        run: |
          echo "🎨 Setting up creative context for AI generation..."
          MOOD_WORDS=("chill" "energetic" "focused" "relaxed" "cozy" "vibrant" "zen" "balanced")
          VIBES=("gaming energy" "squad vibes" "community spirit" "team energy" "collective mood" "crew connection" "shared moments")
          
          RANDOM_MOOD=${MOOD_WORDS[$((RANDOM % ${#MOOD_WORDS[@]}))]}
          RANDOM_VIBE=${VIBES[$((RANDOM % ${#VIBES[@]}))]}
          
          echo "MOOD_CONTEXT=$RANDOM_MOOD" >> $GITHUB_OUTPUT
          echo "VIBE_CONTEXT=$RANDOM_VIBE" >> $GITHUB_OUTPUT
          echo "✅ Creative context ready: $RANDOM_MOOD $RANDOM_VIBE"

      - name: Generate AI Content with Slang
        id: ai_generation
        env:
          CURRENT_DAY: ${{ steps.context.outputs.CURRENT_DAY }}
          TIME_OF_DAY: ${{ steps.context.outputs.TYPE }}
          CONTEXT: ${{ steps.context.outputs.CONTEXT }}
          MOOD_CONTEXT: ${{ steps.creative_context.outputs.MOOD_CONTEXT }}
          VIBE_CONTEXT: ${{ steps.creative_context.outputs.VIBE_CONTEXT }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          echo "🤖 Generating natural AI content with gaming slang..."

          if [ "$CONTEXT" = "weekend" ]; then
            export IS_WEEKEND=true
          else
            export IS_WEEKEND=false
          fi
          
          cat > /tmp/slang_ai_generator.py << 'EOL'
          import os, re, random, requests, sys, json

          GAMING_SLANG = {
              "indo_slang": {
                  "yuk": "ajakan halus untuk mulai",
                  "yuuuk": "ajakan halus lebih excited", 
                  "yok": "ajakan halus",
                  "ayoo": "ajakan halus",
                  "gassin": "ajakan tegas langsung jalan",
                  "mabar": "main bareng",
                  "classic": "mode santai (ml/valo)",
                  "unrated": "match non-rank (valo)",
                  "push rank": "naik peringkat",
                  "rapihin": "merapikan/beresin",
                  "tipis tipis": "sedikit/ringan",
                  "bentar": "sebentar",
                  "santai": "rileks/non-kompetitif",
                  "chill": "rileks/non-kompetitif",
                  "kocak": "lucu",
                  "kocakkk": "penekanan dari kocak (lebih heboh)",
                  "ngakak": "ketawa keras",
                  "ngakakk": "ketawa keras penekanan",
                  "gileee": "takjub santai",
                  "njirrr": "kaget/sinis ringan",
                  "anjayyy": "kagum",
                  "ygy": "ya nggak sih",
                  "ytta": "yang tau tau aja",
                  "dah": "penutup/selesai",
                  "ngulik": "eksplor/otak-atik",
                  "ngide": "sok lempar ide",
                  "mantul": "mantap betul",
                  "bocil": "pemain muda (hati-hati penggunaan)",
                  "nongkrong": "hang out virtual",
                  "nongki": "hang out virtual",
                  "rebahan": "santai sambil tiduran",
              },
              "english_slang": {
                  "squad": "sapaan ke grup", 
                  "team": "sapaan ke grup",
                  "fam": "family/keluarga casual",
                  "vibes": "suasana/feel",
                  "grind": "kerja keras",
                  "afk": "away from keyboard",
                  "brb": "be right back",
                  "gtg": "got to go (cabut)",
                  "gg": "good game",
                  "lol": "ketawa ringan",
                  "lmao": "ketawa lebih kuat",
              }
          }

          def generate_slang_content():
              day = os.environ.get("CURRENT_DAY", "today").lower()
              time = os.environ.get("TIME_OF_DAY", "day")
              context = os.environ.get("CONTEXT", "weekday")
              mood = os.environ.get("MOOD_CONTEXT", "chill")
              vibe = os.environ.get("VIBE_CONTEXT", "gaming energy")
              is_weekend = context == "weekend"
              api_key = os.environ.get("GEMINI_API_KEY")
              
              if not api_key:
                  raise Exception("No API key")
              
              # Emoji set yang diminta user
              title_emojis = ["😜", "🥵", "🥶", "🤭", "🫣", "🤔", "🫡", "😵", "😮‍💨", "😪", "🤤", "🥱", "🤧", "🤪", "😫", "😖", "�", "�", "🤫"]
              random_emoji = random.choice(title_emojis)
              
              natural_greetings = {
                  "morning": ["morning skytizen", "rise and shine crew", "good morning everyone", "morning legends"],
                  "afternoon": ["afternoon skytizen", "hey everyone", "afternoon squad", "what's up skytizen"],
                  "evening": ["evening skytizen", "hey folks", "evening crew", "what's good everyone"],
                  "night": ["night skytizen", "late night crew", "night owls", "still up everyone"]
              }
              natural_greeting = random.choice(natural_greetings.get(time, ["hey skytizen"]))
              
              slang_context = "GAMING SLANG DICTIONARY (use naturally in appropriate contexts):\n"
              
              slang_context += "\nINDONESIAN SLANG (for second sentence):\n"
              for term, meaning in GAMING_SLANG["indo_slang"].items():
                  slang_context += f"- {term}: {meaning}\n"
                  
              slang_context += "\nENGLISH SLANG (for first sentence):\n"
              for term, meaning in GAMING_SLANG["english_slang"].items():
                  slang_context += f"- {term}: {meaning}\n"
              
              prompt = f"""You are a friendly Indonesian gaming community manager for "Skytizens". Create natural, human-like greeting that sounds authentic and engaging.

              CONTEXT:
              - Day: {day} {time} ({context})  
              - Mood: {mood}
              - Vibe: {vibe}
              - Community: International Indonesian gaming community

              {slang_context}

              CRITICAL FORMATTING RULES:
              1. **FIRST SENTENCE**: Pure English greeting + question about day/mood/vibes (natural, conversational)
              2. **SECOND SENTENCE**: Indonesian response with CONTEXT-APPROPRIATE suggestion:
                 - WEEKDAY MORNING/AFTERNOON: Prioritize work/school/exercise first, gaming later
                 - WEEKDAY EVENING/NIGHT: Gaming is OK since work/school done
                 - WEEKEND: Gaming anytime is fine + ADD ROLE TAG <@&1374047008829997157> naturally
              3. **TONE**: Sound like real friend texting, not template or bot
              4. **SLANG**: Use naturally, don't force it - mix appropriately 
              5. **LENGTH**: Keep it conversational, not too long

              GENERATE ONLY THIS JSON:
              {{
                "message": "english question about day/mood + indonesian context-appropriate suggestion",
                "title": "{random_emoji} {natural_greeting}",
                "footer": "short mood/activity phrase"
              }}

              PERFECT EXAMPLES (context-aware):
              WEEKDAY MORNING: "Hey Skytizens, ready to conquer Monday productivity? yuk semangatin kerja dulu, mabar valorant nanti sore"
              WEEKDAY AFTERNOON: "What's up crew, how's the work grind? break makan siang dulu, aim training bentar boleh"
              WEEKEND: "Hey fam, Saturday vibes hitting right? gas mabar ML santai <@&1374047008829997157> sambil ngopi"
              EVENING/NIGHT: "Night fam, how's the monday vibe treating your gaming spirit? gas genshin dulu sambil rebahan"

              WEEKEND ROLE TAGGING:
              - ALWAYS include <@&1374047008829997157> in weekend messages naturally
              - Place it within the Indonesian sentence, not at the end
              - Examples: "gas mabar <@&1374047008829997157> santai sambil ngopi", "yuk push rank <@&1374047008829997157> tipis-tipis"

              WEEKDAY PRODUCTIVITY FOCUS:
              - Morning/Afternoon: "semangatin kerja/sekolah dulu", "rapihin tugas dulu", "olahraga bentar dulu"
              - Suggest gaming for "nanti sore/malem" (later evening/night)
              - Light breaks OK: "aim training bentar", "classic tipis-tipis"

              STYLE NOTES:
              - Use "Skytizens" or "fam" for address
              - Mix "yok/yuk/gas" naturally in suggestions
              - Include game context: "Roblox/Rosblok", "ML", "Genshin", "Valorant"
              - Natural flow: "dulu", "sambil", "biar ga"
              - Keep emoji minimal in message

              AVOID:
              - Robotic language
              - Excessive emojis in message
              - Too formal tone
              - Forced slang placement

              Make it sound exactly like the good examples. Return ONLY the JSON:"""
              
              api_key = os.environ.get("GEMINI_API_KEY")
              openrouter_key = os.environ.get("OPENROUTER_API_KEY") 
              
              if openrouter_key:
                  print("🧠 Trying OpenRouter DeepSeek R1...")
                  url = "https://openrouter.ai/api/v1/chat/completions"
                  headers = {
                      "Authorization": f"Bearer {openrouter_key}",
                      "Content-Type": "application/json"
                  }
                  payload = {
                      "model": "deepseek/deepseek-r1",
                      "messages": [
                          {"role": "user", "content": prompt}
                      ],
                      "temperature": 0.95,
                      "max_tokens": 400,
                      "top_p": 0.92
                  }
                  
                  try:
                      response = requests.post(url, json=payload, headers=headers, timeout=30)
                      if response.status_code == 200:
                          data = response.json()
                          if 'choices' in data and len(data['choices']) > 0:
                              content = data['choices'][0]['message']['content'].strip()
                              print(f"🧠 DeepSeek R1 response received: {len(content)} chars")
                              
                              # Extract JSON from response
                              json_pattern = r'\{[^{}]*"message"[^{}]*"title"[^{}]*"footer"[^{}]*\}'
                              matches = re.findall(json_pattern, content, re.DOTALL)
                              
                              for match in matches:
                                  try:
                                      result = json.loads(match)
                                      if all(key in result for key in ['message', 'title', 'footer']):
                                          result['message'] = result['message'].lower().strip()
                                          result['title'] = result['title'].lower().strip()
                                          result['footer'] = result['footer'].lower().strip()
                                          result['source'] = 'deepseek-r1'
                                          
                                          result['message'] = re.sub(r'[^\w\s.,?!/]', '', result['message'])
                                          print("✅ DeepSeek R1 generation successful!")
                                          return result
                                  except:
                                      continue
                  except Exception as e:
                      print(f"⚠️ OpenRouter error: {e}")
              
              print("🤖 Fallback to Gemini Flash...")
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={api_key}"
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.95,
                      "topK": 40,
                      "topP": 0.92,
                      "maxOutputTokens": 400,
                  }
              }
              
              response = requests.post(url, json=payload, timeout=25)
              
              if response.status_code == 200:
                  data = response.json()
                  
                  if 'candidates' in data and len(data['candidates']) > 0:
                      candidate = data['candidates'][0]
                      
                      ai_text = ""
                      if 'content' in candidate and 'parts' in candidate['content']:
                          if len(candidate['content']['parts']) > 0 and 'text' in candidate['content']['parts'][0]:
                              ai_text = candidate['content']['parts'][0]['text'].strip()
                      
                      if ai_text:
                          json_pattern = r'\{[^}]*"message"[^}]*"title"[^}]*"footer"[^}]*\}'
                          json_match = re.search(json_pattern, ai_text, re.DOTALL)
                          
                          if json_match:
                              try:
                                  content = json.loads(json_match.group())
                                  if all(key in content for key in ['message', 'title', 'footer']):
                                      content['message'] = content['message'].lower().strip()
                                      content['title'] = content['title'].lower().strip()
                                      content['footer'] = content['footer'].lower().strip()
                                      
                                      content['message'] = re.sub(r'[^\w\s.,?!/]', '', content['message'])
                                      
                                      return {
                                          'message': content['message'],
                                          'title': content['title'],
                                          'footer': content['footer'],
                                          'source': 'gemini'
                                      }
                              except:
                                  pass
              
              raise Exception("AI generation failed")

          def natural_slang_fallback():
              day = os.environ.get("CURRENT_DAY", "today").lower()
              time = os.environ.get("TIME_OF_DAY", "day")
              context = os.environ.get("CONTEXT", "weekday")
              is_weekend = context == "weekend"
              
              # Emoji set yang sama dengan AI
              title_emojis = ["😜", "🥵", "🥶", "🤭", "🫣", "🤔", "🫡", "😵", "😮‍💨", "😪", "🤤", "🥱", "🤧", "🤪", "😫", "😖", "😭", "😡", "🤫"]
              random_emoji = random.choice(title_emojis)
              
              titles = {
                  "morning": [f"{random_emoji} wakey wakey skytizen", f"{random_emoji} rise and shine crew", f"{random_emoji} morning skytizen energy", f"{random_emoji} sunrise squad vibes"],
                  "afternoon": [f"{random_emoji} midday skytizen energy", f"{random_emoji} afternoon vibes crew", f"{random_emoji} peak hours skytizen", f"{random_emoji} daylight squad mood"],
                  "evening": [f"{random_emoji} sunset skytizen crew", f"{random_emoji} golden hour fam", f"{random_emoji} evening squad vibes", f"{random_emoji} twilight skytizen energy"],
                  "night": [f"{random_emoji} nocturnal skytizen squad", f"{random_emoji} midnight crew energy", f"{random_emoji} night owl skytizen", f"{random_emoji} after dark squad"]
              }
              
              questions = {
                  "morning": [
                      f"Hey Skytizens, who's ready to conquer {day} with some early grind?",
                      f"Morning fam, how's that {day} energy treating your motivation?",
                      f"Rise and shine crew, feeling sharp for {day} adventures?",
                      f"Good morning Skytizens, who's dialed in for {day} productivity?"
                  ],
                  "afternoon": [
                      f"Hey Skytizens, who's keeping the {day} afternoon vibes steady?",
                      f"Afternoon fam, how's that {day} midday energy flowing?",
                      f"What's good Skytizens, feeling the {day} afternoon groove?",
                      f"Hey crew, how's the {day} post-lunch momentum?"
                  ],
                  "evening": [
                      f"Evening Skytizens, how's that {day} treating your gaming spirit?",
                      f"Hey fam, ready to wind down from {day} with some chill vibes?",
                      f"What's up Skytizens, how's the {day} evening energy?",
                      f"Sunset crew, feeling that {day} golden hour mood?"
                  ],
                  "night": [
                      f"Night fam, how's the {day} vibe treating your nocturnal energy?",
                      f"Hey night owls, still locked in for {day} after hours?",
                      f"Late night Skytizens, how's that {day} midnight mood?",
                      f"Nocturnal crew, feeling the {day} late shift vibes?"
                  ]
              }
              
              activities = {
                  "morning": [
                      "yuk semangatin kerja dulu, mabar valorant nanti sore" if not is_weekend else "gas mabar valorant santai sambil ngopi",
                      "rapihin tugas kuliah dulu, push rank ml nanti malem" if not is_weekend else "yuk push rank mobile legends tipis-tipis",
                      "fokus sekolah dulu ya, gaming session abis maghrib" if not is_weekend else "gas main roblox bareng-bareng",
                      "olahraga bentar dulu, nanti sore ngulik genshin" if not is_weekend else "comms on, unrated valorant dulu"
                  ],
                  "afternoon": [
                      "istirahat makan siang dulu, aim training bentar boleh" if not is_weekend else "mabar ML santai yuk biar ga stress",
                      "break sejenak dari kerja, classic ml tipis-tipis" if not is_weekend else "gas main Valorant unrated bentar", 
                      "recharge energy dulu, mini session genshin ok" if not is_weekend else "yok ngulik Genshin dulu sambil chill",
                      "stretching dulu, terus aim training 10 menit" if not is_weekend else "main classic ML tipis-tipis aja"
                  ],
                  "evening": [
                      "yok main Genshin dulu sambil nongkrong virtual",
                      "gas mabar Valorant santai sambil ngopi", 
                      "main ML push rank tipis-tipis yuk",
                      "chill session Genshin sambil rebahan"
                  ],
                  "night": [
                      "gas genshin dulu sambil rebahan",
                      "yok mabar Valorant bentar sebelum tidur",
                      "main ML classic santai aja", 
                      "ngulik game tipis-tipis sambil nongkrong"
                  ]
              }
              
              footers = {
                  "morning": ["grind first", "morning energy", "productivity mode", "fresh start"],
                  "afternoon": ["slow grind mood", "steady pace", "afternoon chill", "midday vibes"],
                  "evening": ["chill artifact farming", "wind down time", "evening mood", "sunset vibes"],
                  "night": ["slow grind", "night energy", "after hours", "midnight mood"]
              }
              
              title = random.choice(titles.get(time, ["hey skytizen"]))
              question = random.choice(questions.get(time, [f"Hey Skytizens, how's everyone doing this {day}?"]))
              activity = random.choice(activities.get(time, ["yuk mabar bentar"]))
              footer = random.choice(footers.get(time, ["good vibes"]))
              
              message = f"{question} {activity}"
              
              return {
                  'message': message,
                  'title': title,
                  'footer': footer,
                  'source': 'enhanced_natural_fallback'
              }

          try:
              result = generate_slang_content()
              print(f"✅ Natural AI generation with slang successful")
          except Exception as e:
              print(f"⚠️ AI failed: {e}, using natural slang fallback")
              result = natural_slang_fallback()
          
          # Write results
          with open('/tmp/ai_message.txt', 'w', encoding='utf-8') as f:
              f.write(result['message'])
          with open('/tmp/ai_title.txt', 'w', encoding='utf-8') as f:
              f.write(result['title'])
          with open('/tmp/ai_footer.txt', 'w', encoding='utf-8') as f:
              f.write(result['footer'])
          with open('/tmp/ai_source.txt', 'w', encoding='utf-8') as f:
              f.write(result['source'])
          EOL

          echo "🧪 Executing AI generator with gaming slang..."
          python3 /tmp/slang_ai_generator.py
          if [[ -s /tmp/ai_message.txt && -s /tmp/ai_title.txt && -s /tmp/ai_footer.txt ]]; then
            AI_MESSAGE=$(cat /tmp/ai_message.txt)
            AI_TITLE=$(cat /tmp/ai_title.txt)
            AI_FOOTER=$(cat /tmp/ai_footer.txt)
            AI_SOURCE=$(cat /tmp/ai_source.txt)
            
            echo "🎯 Generated content:"
            echo "   Message: $AI_MESSAGE"
            echo "   Title: $AI_TITLE"
            echo "   Footer: $AI_FOOTER"
            echo "   Source: $AI_SOURCE"
            
            # Validation
            if [[ ${#AI_MESSAGE} -gt 40 && ${#AI_MESSAGE} -lt 250 ]]; then
              DESC_RAW="$AI_MESSAGE"
              TITLE="$AI_TITLE"
              FOOTER_TEXT="$AI_FOOTER"
              USE_AI=true
              echo "✅ Content validated and accepted"
            else
              echo "❌ Content validation failed, using backup"
              USE_AI=false
            fi
          else
            echo "❌ Generation failed, using backup"
            USE_AI=false
          fi
          
          # Enhanced backup system dengan slang
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using enhanced slang backup system..."
            
            DAY=$(echo "$CURRENT_DAY" | tr '[:upper:]' '[:lower:]')
            
            # Natural backup options dengan logika yang tepat
            case "$TIME_OF_DAY" in
              "morning")
                if [[ "$CONTEXT" == "weekday" ]]; then
                  DESCS=(
                    "hey skytizens, ready to crush monday productivity? yuk semangatin kerja dulu, mabar valorant nanti sore"
                    "morning legends, feeling sharp for the daily grind? rapihin tugas kuliah dulu, gaming session nanti malem"
                    "rise and shine everyone, monday motivation activated? fokus sekolah dulu ya, push rank ml abis maghrib"
                    "good morning crew, how's that weekday energy? olahraga bentar dulu, ngulik genshin nanti sore"
                  )
                else
                  DESCS=(
                    "weekend morning everyone, how's the saturday vibes? gas mabar valorant santai sambil ngopi"
                    "good morning weekend crew, ready for some gaming? yuk push rank mobile legends tipis-tipis"
                    "morning everyone, weekend energy going strong? gas main roblox bareng-bareng"
                    "rise and shine weekend squad, feeling relaxed? comms on, unrated valorant dulu"
                  )
                fi
                TITLES=("morning skytizen" "rise and shine" "good morning everyone")
                FOOTERS=("morning energy" "fresh start" "grind mode")
                ;;
              "afternoon")
                if [[ "$CONTEXT" == "weekday" ]]; then
                  DESCS=(
                    "hey crew, how's the work grind going? break makan siang dulu, aim training bentar boleh"
                    "afternoon squad, keeping the productivity steady? istirahat sejenak, classic ml tipis-tipis ok"
                    "what's everyone up to this afternoon? recharge energy dulu, mini session genshin boleh"
                    "midday check-in everyone, work flow smooth? stretching dulu, terus main game bentar"
                  )
                else
                  DESCS=(
                    "afternoon weekend vibes, how's everyone feeling? mabar ML santai yuk biar ga stress"
                    "hey weekend crew, saturday afternoon energy? gas main valorant unrated bentar"
                    "weekend afternoon squad, ready for gaming? yok ngulik genshin dulu sambil chill"
                    "saturday afternoon everyone, weekend mood activated? main classic ML tipis-tipis aja"
                  )
                fi
                TITLES=("afternoon skytizen" "hey everyone" "afternoon squad")
                FOOTERS=("afternoon vibes" "steady pace" "day energy")
                ;;
              "evening")
                # Evening always OK for gaming (work/school done)
                DESCS=(
                  "evening everyone, how was the monday grind? yuk mabar valorant santai sambil ngopi"
                  "hey folks, ready to wind down from work? gas push rank ml sesi pendek"
                  "evening squad, how's the post-work vibe? main genshin wind down yuk"
                  "sunset time everyone, feeling relaxed? gas main classic ml sambil nongkrong"
                )
                TITLES=("evening skytizen" "hey folks" "evening crew")
                FOOTERS=("evening mood" "wind down" "chill time")
                ;;
              "night")
                # Night always OK for gaming
                DESCS=(
                  "night fam, how's the monday vibe treating your gaming spirit? gas genshin dulu sambil rebahan"
                  "after hours crew still up? yuk unrated valorant bentar sebelum tidur"
                  "night owls checking in, how's the energy? gas classic mobile legends tipis"
                  "nocturnal squad still grinding? main roblox santai sambil nongkrong virtual"
                )
                TITLES=("night skytizen" "late night crew" "night owls")
                FOOTERS=("night energy" "late night" "after hours")
                ;;
            esac
            
            DESC_RAW=$(shuf -e "${DESCS[@]}" -n1)
            TITLE=$(shuf -e "${TITLES[@]}" -n1)
            FOOTER_TEXT=$(shuf -e "${FOOTERS[@]}" -n1)
            
            echo "🎯 Selected slang backup: ${DESC_RAW:0:80}..."
          fi
          
          # Dynamic thumbnail based on time
          case "$TIME_OF_DAY" in
            "morning") THUMB="2600" ;;
            "afternoon") THUMB="1f343" ;;
            "evening") THUMB="1f307" ;;
            "night") THUMB="1f989" ;;
          esac
          
          # Output untuk step berikutnya
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "FOOTER_TEXT=$FOOTER_TEXT" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message with natural slang content..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          FOOTER_TEXT="${{ steps.ai_generation.outputs.FOOTER_TEXT }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Create natural Discord payload
          cat > /tmp/natural_discord_payload.py << 'EOL'
          import json, os
          
          title = os.environ.get('TITLE', 'skytizen crew')
          desc_raw = os.environ.get('DESC', "what's good everyone")
          footer_text = os.environ.get('FOOTER_TEXT', 'good vibes')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          
          # Ensure all text is lowercase and clean
          desc = (desc_raw or '').lower().strip()
          desc += "\n> by server dev - <@399393175904714752>"
          
          embed = {
              "title": title.lower(),
              "description": desc,
              "color": color,
              "thumbnail": {"url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"},
              "footer": {
                  "text": footer_text.lower(),
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Natural payload created")
          EOL
          
          TITLE="$TITLE" DESC="$DESC" FOOTER_TEXT="$FOOTER_TEXT" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/natural_discord_payload.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Natural message with slang sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🎨 Title: $TITLE"
          echo "💬 Footer: $FOOTER_TEXT"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "Footer: ${{ steps.ai_generation.outputs.FOOTER_TEXT }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "Creative Context: ${{ steps.creative_context.outputs.MOOD_CONTEXT }} ${{ steps.creative_context.outputs.VIBE_CONTEXT }}"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🎨 Creative Context: ${{ steps.creative_context.outputs.MOOD_CONTEXT }} ${{ steps.creative_context.outputs.VIBE_CONTEXT }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "📝 Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "💬 Footer: ${{ steps.ai_generation.outputs.FOOTER_TEXT }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Natural community greeting with gaming slang complete!"
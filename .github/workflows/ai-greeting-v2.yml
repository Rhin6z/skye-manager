name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="🌧️"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="🌦️"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="🔥"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="❄️"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="🍃"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="☁️"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="☀️"
          else
            WEATHER_EMOJI="🌤️"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Create AI Prompt
        id: create_prompt
        run: |
          # Create a more structured prompt to get consistent 2-sentence responses
          cat > /tmp/improved_prompt.txt << 'EOL'
          You are a casual Indonesian gaming Discord admin for server "Skye".

          Write a 2-sentence greeting message with EXACTLY this format:

          SENTENCE 1: An English question that:
          - Starts with: "yoooow", "wassuuup", "heyyy", "suuup", "bro", or "guyss"
          - Mentions ${{ steps.context.outputs.CURRENT_DAY }} (${{ steps.context.outputs.TYPE }} time)
          - Asks a question about gaming/activities
          - Ends with a question mark
          - Is all lowercase
          - Maximum 12 words

          SENTENCE 2: An Indonesian sentence that:
          - Starts with: "yuuuk", "gaskeun", "gas", or "skuyyyy"
          - Includes at least one slang term: "njirrr", "bjirrr", "ygy", "anjay", "wkwkwk", "hehehehe"
          - References ${{ steps.weather.outputs.WEATHER_INFO }}
          - Mentions ${{ steps.context.outputs.CURRENT_DAY }} in Indonesian
          - For weekend: includes tag <@&1374047008829997157>
          - For weekday: no tag
          - Ends with an emoji
          - Is all lowercase
          - Maximum 15 words

          RULES:
          - ALL LOWERCASE ONLY
          - TOTAL LENGTH UNDER 180 CHARACTERS
          - TWO SENTENCES ONLY (one English, one Indonesian)
          - JUST OUTPUT THE TWO SENTENCES, NOTHING ELSE
          - NO ADDITIONAL COMMENTS OR EXPLANATIONS

          CONTEXT:
          - Current time: ${{ steps.context.outputs.TYPE }}
          - Current day: ${{ steps.context.outputs.CURRENT_DAY }}
          - Weather: ${{ steps.weather.outputs.WEATHER_INFO }}
          - Is weekend: ${{ steps.context.outputs.CONTEXT == 'weekend' }}
          EOL

          # Create Python script for improved AI generation
          cat > /tmp/improved_generator.py << 'EOL'
          import json
          import requests
          import os
          import sys
          import re
          
          try:
              with open('/tmp/improved_prompt.txt', 'r') as f:
                  prompt = f.read().strip()
              
              api_key = os.environ.get('GEMINI_API_KEY')
              if not api_key:
                  print("❌ No API key")
                  sys.exit(1)
              
              # Using gemini-2.5-flash-lite or other model based on what's working
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
              
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.5,
                      "maxOutputTokens": 150,
                      "topP": 0.85
                  }
              }
              
              print("📡 Sending request to Gemini API...")
              response = requests.post(url, json=payload, timeout=20)
              print(f"Status code: {response.status_code}")
              
              if response.status_code == 200:
                  data = response.json()
                  
                  # Print first part of response for debugging
                  print(f"Response preview: {str(data)[:200]}...")
                  
                  # Extract text from candidates
                  if 'candidates' in data and len(data['candidates']) > 0:
                      # Try multiple ways to access content
                      try:
                          candidate = data['candidates'][0]
                          if 'content' in candidate and 'parts' in candidate['content']:
                              ai_text = candidate['content']['parts'][0]['text'].strip()
                          else:
                              # Fallback 
                              ai_text = str(candidate).strip()
                      except Exception as e:
                          print(f"Error extracting text: {e}")
                          print(f"Candidate data: {candidate}")
                          sys.exit(1)
                      
                      # Clean formatting
                      clean_text = re.sub(r'\*\*([^*]+)\*\*', r'\1', ai_text)
                      clean_text = re.sub(r'`([^`]+)`', r'\1', clean_text)
                      clean_text = re.sub(r'\n+', ' ', clean_text)
                      clean_text = ' '.join(clean_text.split())
                      
                      # Verify basic structure (has English question + Indonesian part)
                      has_question = '?' in clean_text
                      
                      # Save if reasonable length and has a question
                      if len(clean_text) > 40 and has_question:
                          with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                              f.write(clean_text)
                          print(f"✅ AI generation successful: {clean_text[:50]}...")
                          sys.exit(0)
                      else:
                          print(f"❌ Generated text doesn't match expected format: {clean_text}")
                  else:
                      print(f"❌ No candidates in response: {data}")
              else:
                  print(f"❌ API error: {response.status_code}")
                  print(response.text)
              
              print("❌ AI generation failed")
              sys.exit(1)
              
          except Exception as e:
              print(f"❌ AI generation failed: {e}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
          EOL

          # Create Discord payload script
          cat > /tmp/discord_script.py << 'EOL'
          import json
          import os
          
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', 'what\'s good everyone!')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          
          # Convert description to lowercase
          desc = desc_raw.lower()
          
          # Add signature
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {
                  "url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"
              },
              "footer": {
                  "text": "chill gaming vibes",
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Payload created")
          EOL

      - name: Generate AI Greeting
        id: ai_generation
        run: |
          echo "🤖 Generating AI greeting..."
          
          # Create simplified prompt file - making it shorter to avoid token limits
          cat > /tmp/simplified_prompt.txt << 'EOL'
          You are a casual Indonesian gaming Discord admin.

          Write a 2-sentence greeting with this format:

          SENTENCE 1: An English question that:
          - Starts with "yoooow", "wassuuup", "heyyy", or "bro"
          - Mentions ${{ steps.context.outputs.CURRENT_DAY }} and time of day
          - Asks about gaming/activities
          - Ends with a question mark
          - All lowercase
          - Max 12 words

          SENTENCE 2: An Indonesian sentence that:
          - Starts with "yuuuk", "gaskeun", "gas", or "skuyyyy"
          - Includes a slang term: "njirrr", "bjirrr", "ygy", "anjay", "wkwkwk"
          - References ${{ steps.weather.outputs.WEATHER_INFO }}
          - Mentions ${{ steps.context.outputs.CURRENT_DAY }} in Indonesian
          - For weekend: includes tag <@&1374047008829997157>
          - For weekday: no tag
          - Ends with an emoji
          - All lowercase
          - Max 15 words

          RESPONSE FORMAT: ONLY OUTPUT THE TWO SENTENCES
          EOL
          
          # Create fixed Python script with better response handling
          cat > /tmp/fixed_generator.py << 'EOL'
          import json
          import requests
          import os
          import sys
          import re
          
          try:
              with open('/tmp/simplified_prompt.txt', 'r') as f:
                  prompt = f.read().strip()
              
              api_key = os.environ.get('GEMINI_API_KEY')
              if not api_key:
                  print("❌ No API key")
                  sys.exit(1)
              
              # Use a fallback model or API if needed
              use_fallback = os.environ.get('USE_FALLBACK', 'false').lower() == 'true'
              
              if use_fallback:
                  # Use OpenAI as fallback (if configured)
                  openai_key = os.environ.get('OPENAI_API_KEY')
                  if openai_key:
                      print("📡 Using OpenAI as fallback...")
                      headers = {
                          "Content-Type": "application/json",
                          "Authorization": f"Bearer {openai_key}"
                      }
                      
                      payload = {
                          "model": "gpt-3.5-turbo",
                          "messages": [
                              {"role": "system", "content": "You are a Discord admin for an Indonesian gaming server."},
                              {"role": "user", "content": prompt}
                          ],
                          "temperature": 0.7,
                          "max_tokens": 150
                      }
                      
                      response = requests.post(
                          "https://api.openai.com/v1/chat/completions",
                          headers=headers,
                          json=payload,
                          timeout=30
                      )
                      
                      if response.status_code == 200:
                          data = response.json()
                          if 'choices' in data and len(data['choices']) > 0:
                              ai_text = data['choices'][0]['message']['content'].strip()
                              with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                                  f.write(ai_text)
                              print(f"✅ OpenAI generation successful: {ai_text[:50]}...")
                              sys.exit(0)
                      
                      print("❌ OpenAI fallback failed")
                  
                  # Try a different preset message approach instead
                  print("⚠️ Using hardcoded message")
                  day_of_week = os.environ.get('CURRENT_DAY', 'today').lower()
                  weather = os.environ.get('WEATHER_INFO', 'nice weather')
                  is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
                  time_of_day = os.environ.get('TIME_OF_DAY', 'day')
                  
                  tag = " <@&1374047008829997157>" if is_weekend else ""
                  
                  greetings = [
                      f"yoooow {day_of_week} {time_of_day} squad, gaming plans or chilling today? yuuuk{tag} mabar valorant, {weather} gini wkwkwk enak banget buat grinding! 🎮",
                      f"wassuuup {day_of_week} crew, how's the {time_of_day} treating you? gaskeun{tag} push rank sambil santai, {weather} di {day_of_week} gini anjay cocok banget! 💯",
                      f"heyyy {day_of_week} {time_of_day} gang, energy levels looking good? skuyyyy{tag} main bareng, {weather} enak nih buat gaming session ygy! 🔥"
                  ]
                  
                  import random
                  chosen = random.choice(greetings)
                  with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                      f.write(chosen)
                  print(f"✅ Fallback generation: {chosen[:50]}...")
                  sys.exit(0)
              
              # Try regular Gemini
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
              
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.5,
                      "maxOutputTokens": 200,
                      "topP": 0.85
                  }
              }
              
              print("📡 Sending request to Gemini API...")
              response = requests.post(url, json=payload, timeout=30)
              print(f"Status code: {response.status_code}")
              
              if response.status_code == 200:
                  data = response.json()
                  
                  # Dump full response for debugging
                  with open('/tmp/gemini_response.json', 'w') as f:
                      json.dump(data, f)
                  
                  print(f"Response preview: {str(data)[:200]}...")
                  
                  # Extract text from candidates with better error handling
                  if 'candidates' in data and len(data['candidates']) > 0:
                      candidate = data['candidates'][0]
                      
                      # Different ways to try extracting text
                      ai_text = None
                      
                      # Method 1: Try standard path
                      try:
                          if 'content' in candidate and 'parts' in candidate['content']:
                              parts = candidate['content']['parts']
                              if parts and 'text' in parts[0]:
                                  ai_text = parts[0]['text'].strip()
                      except Exception as e:
                          print(f"Method 1 failed: {e}")
                      
                      # Method 2: Try content.text
                      if not ai_text:
                          try:
                              if 'content' in candidate and 'text' in candidate['content']:
                                  ai_text = candidate['content']['text'].strip()
                          except Exception as e:
                              print(f"Method 2 failed: {e}")
                      
                      # Method 3: Generate our own fallback
                      if not ai_text:
                          print("⚠️ Couldn't extract text, using fallback")
                          day_of_week = os.environ.get('CURRENT_DAY', 'today').lower()
                          weather = os.environ.get('WEATHER_INFO', 'nice weather')
                          is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
                          time_of_day = os.environ.get('TIME_OF_DAY', 'day')
                          
                          tag = " <@&1374047008829997157>" if is_weekend else ""
                          
                          ai_text = f"yoooow {day_of_week} {time_of_day} squad, gaming plans or chilling today? yuuuk{tag} mabar valorant, {weather} gini wkwkwk enak banget buat grinding! 🎮"
                      
                      # Process the text
                      if ai_text:
                          # Clean formatting
                          clean_text = re.sub(r'\*\*([^*]+)\*\*', r'\1', ai_text)
                          clean_text = re.sub(r'`([^`]+)`', r'\1', clean_text)
                          clean_text = re.sub(r'\n+', ' ', clean_text)
                          clean_text = ' '.join(clean_text.split())
                          
                          # Ensure text starts with a proper greeting
                          starters = ["yoooow", "wassuuup", "heyyy", "bro", "suuup", "guyss"]
                          has_starter = any(clean_text.lower().startswith(s) for s in starters)
                          
                          if not has_starter:
                              clean_text = f"yoooow {clean_text}"
                          
                          # Verify basic structure (has a question)
                          has_question = '?' in clean_text
                          if not has_question:
                              clean_text += "? "
                          
                          # Ensure there's an Indonesian part
                          indo_starters = ["yuuuk", "gaskeun", "gas", "skuyyyy"]
                          has_indo = any(s in clean_text.lower() for s in indo_starters)
                          
                          if not has_indo:
                              # Add second part
                              day_of_week = os.environ.get('CURRENT_DAY', 'today').lower()
                              weather = os.environ.get('WEATHER_INFO', 'nice weather')
                              is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
                              
                              tag = " <@&1374047008829997157>" if is_weekend else ""
                              clean_text += f" yuuuk{tag} mabar valorant, {weather} gini wkwkwk enak banget! 🎮"
                          
                          # Save if reasonable length
                          if len(clean_text) > 20:
                              with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                                  f.write(clean_text)
                              print(f"✅ AI generation successful: {clean_text[:50]}...")
                              sys.exit(0)
                  
                  print("❌ Could not extract valid text from response")
              else:
                  print(f"❌ API error: {response.status_code}")
                  print(response.text)
              
              # Try the fallback approach since regular generation failed
              os.environ['USE_FALLBACK'] = 'true'
              os.environ['CURRENT_DAY'] = os.environ.get('CURRENT_DAY', 'today')
              os.environ['WEATHER_INFO'] = os.environ.get('WEATHER_INFO', 'cuaca enak')
              os.environ['IS_WEEKEND'] = os.environ.get('IS_WEEKEND', 'false')
              os.environ['TIME_OF_DAY'] = os.environ.get('TIME_OF_DAY', 'day')
              
              print("🔄 Retrying with fallback...")
              # This will trigger the fallback logic at the beginning of the script
              sys.exit(2)
              
          except Exception as e:
              print(f"❌ Error: {str(e)}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
          EOL

          # Execute the Python script with all needed environment variables
          echo "🧪 Executing fixed generator script..."
          CURRENT_DAY="${{ steps.context.outputs.CURRENT_DAY }}" \
          WEATHER_INFO="${{ steps.weather.outputs.WEATHER_INFO }}" \
          IS_WEEKEND="${{ steps.context.outputs.CONTEXT == 'weekend' }}" \
          TIME_OF_DAY="${{ steps.context.outputs.TYPE }}" \
          GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
          python3 /tmp/fixed_generator.py
          
          # If first attempt failed with exit code 2, retry with fallback
          if [[ $? -eq 2 ]]; then
            echo "⚠️ First attempt failed, trying fallback..."
            USE_FALLBACK=true \
            CURRENT_DAY="${{ steps.context.outputs.CURRENT_DAY }}" \
            WEATHER_INFO="${{ steps.weather.outputs.WEATHER_INFO }}" \
            IS_WEEKEND="${{ steps.context.outputs.CONTEXT == 'weekend' }}" \
            TIME_OF_DAY="${{ steps.context.outputs.TYPE }}" \
            GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            python3 /tmp/fixed_generator.py
          fi
          
          if [[ $? -eq 0 && -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 AI generated: $AI_TEXT"
            
            # Enhanced validation with better pattern matching
            HAS_ENGLISH_PART=$(echo "$AI_TEXT" | grep -E "[a-zA-Z]{10,}" || echo "")
            HAS_INDONESIAN_PART=$(echo "$AI_TEXT" | grep -iE "(yu+k|gas|ayo+k*|hayu+k|gaskeun|skuyy|mabar)" || echo "")
            
            # Weekend vs Weekday tag check
            if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
              HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
              if [[ -z "$HAS_TAG" ]]; then
                echo "⚠️ Missing weekend tag, adding..."
                
                # Add tag more intelligently - find the second sentence
                QUESTION_END=$(echo "$AI_TEXT" | grep -b -o "?" | head -1 | cut -d':' -f1)
                if [[ -n "$QUESTION_END" && $QUESTION_END -gt 10 ]]; then
                  # Insert after the question mark
                  FIRST_PART="${AI_TEXT:0:$((QUESTION_END+1))}"
                  SECOND_PART="${AI_TEXT:$((QUESTION_END+1))}"
                  # Add tag at beginning of second part
                  AI_TEXT="$FIRST_PART <@&1374047008829997157>$SECOND_PART"
                  echo "✅ Added tag: $AI_TEXT"
                else
                  # Fallback - add at end
                  AI_TEXT="$AI_TEXT <@&1374047008829997157>"
                fi
              fi
            else
              # Make sure weekday has no tag
              HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
              if [[ -n "$HAS_TAG" ]]; then
                echo "⚠️ Removing tag for weekday..."
                AI_TEXT=$(echo "$AI_TEXT" | sed "s/<@&[0-9]*>//g")
              fi
            fi
            
            # Ensure response isn't too long
            if [[ ${#AI_TEXT} -gt 200 ]]; then
              echo "⚠️ Message too long (${#AI_TEXT} chars), trimming..."
              AI_TEXT="${AI_TEXT:0:190}..."
            fi
            
            # Final validation after all adjustments
            if [[ -n "$HAS_ENGLISH_PART" && (${#AI_TEXT} -gt 40) ]]; then
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "✅ AI validated: ${#AI_TEXT} chars"
            else
              USE_AI=false
              echo "⚠️ AI validation failed"
            fi
          else
            USE_AI=false
            echo "❌ AI generation failed, using fallback"
          fi
          
          # Improved fallback system with complete sentences
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using enhanced fallback system..."
            
            WEATHER_MENTION="${{ steps.weather.outputs.WEATHER_INFO }}"
            WEATHER_EMOJI="${{ steps.weather.outputs.WEATHER_EMOJI }}"
            DAY_LOWER=$(echo "${{ steps.context.outputs.CURRENT_DAY }}" | tr '[:upper:]' '[:lower:]')
            
            # Compact fallback options per time period with NO truncation
            if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                DESC_RAW="yoooow ${DAY_LOWER} morning crew, weekend vibes hitting different? gaskeun <@&1374047008829997157> warm up aim sambil ngopi, ${WEATHER_MENTION} di ${DAY_LOWER} gini anjay bgt buat grinding! ${WEATHER_EMOJI}"
              else
                DESC_RAW="heyyy ${DAY_LOWER} morning gang, ready for the day or still in zombie mode? semangat ${DAY_LOWER} ini wkwkwk, ${WEATHER_MENTION} pas bgt buat fresh start ygy! ${WEATHER_EMOJI}"
              fi
            elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                DESC_RAW="wassuuup ${DAY_LOWER} afternoon squad, lunch coma or still grinding? yuuuk <@&1374047008829997157> quick match valorant, ${WEATHER_MENTION} di ${DAY_LOWER} gini bjirrr enak bgt dah! ${WEATHER_EMOJI}"
              else
                DESC_RAW="bro ${DAY_LOWER} siang, lunch break atau masih grind? istirahat dulu kali yak, ${WEATHER_MENTION} di ${DAY_LOWER} gini anjay enak buat refreshing! ${WEATHER_EMOJI}"
              fi
            elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                DESC_RAW="suuup ${DAY_LOWER} evening legends, weekend still going strong? skuyyyy <@&1374047008829997157> mabar valorant nih, ${WEATHER_MENTION} di ${DAY_LOWER} sore gini wkwkwk perfect bet! ${WEATHER_EMOJI}"
              else
                DESC_RAW="yoooow ${DAY_LOWER} evening, school/work all done for today? gas santai dulu abis capek seharian, ${WEATHER_MENTION} di ${DAY_LOWER} gini ygy pas buat relaxing! ${WEATHER_EMOJI}"
              fi
            else
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                DESC_RAW="wassuuup ${DAY_LOWER} night gang, still awake and gaming? yuuuk <@&1374047008829997157> push rank valorant, ${WEATHER_MENTION} malem ${DAY_LOWER} gini anjay sih buat naikin elo! ${WEATHER_EMOJI}"
              else
                if [[ "${{ steps.context.outputs.CURRENT_DAY }}" == "Sunday" ]]; then
                  DESC_RAW="heyyy sunday night crew, ready for monday or still in denial? jgn begadang y besok udh senin wkwkwk, ${WEATHER_MENTION} gini enak buat bobo ygy! ${WEATHER_EMOJI}"
                else
                  DESC_RAW="bro ${DAY_LOWER} malam, grinding atau mau bobo soon? jgn begadang mulu deh besok masih ${DAY_LOWER}, ${WEATHER_MENTION} gini bjirrr enak bat buat istirahat! ${WEATHER_EMOJI}"
                fi
              fi
            fi
            
            # Special context overrides
            if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "monday_motivation" ]]; then
              DESC_RAW="wassuuup monday morning, fresh energy or weekend hangover? gaskeun mulai minggu dengan semangat, senin gini jgn males ygy, ${WEATHER_MENTION} enak buat fresh start! ${WEATHER_EMOJI}"
            elif [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "weekend_countdown" ]]; then
              DESC_RAW="heyyy friday ${TYPE}, ready for weekend or still grinding? yuuuk siap-siap weekend njirrr, jumat gini ${WEATHER_MENTION} pas buat closing week dengan semangat! ${WEATHER_EMOJI}"
            elif [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "sunday_prep" ]]; then
              if [[ "${{ steps.context.outputs.TYPE }}" == "night" ]]; then
                DESC_RAW="bro sunday night crew, ready for monday or still in denial? jgn begadang ygy besok udh senin, ${WEATHER_MENTION} gini enak buat istirahat wkwkwk! ${WEATHER_EMOJI}"
              else
                DESC_RAW="oiiiii sunday ${TYPE}, enjoying weekend freedom? yuuuk <@&1374047008829997157> max out weekend fun, ${WEATHER_MENTION} enak buat last day gaming anjay! ${WEATHER_EMOJI}"
              fi
            fi
            
            echo "🎯 Selected fallback: ${DESC_RAW}"
          fi
          
          # Set title and thumbnail based on time and weather
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="☔ Rainy Morning Vibes"
              THUMB="2614"
            else
              TITLE="☀️ Morning Skye Squad"
              THUMB="2600"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Afternoon Chill"
              THUMB="1f327"
            else
              TITLE="🍃 Afternoon Chill Mode"
              THUMB="1f343"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Evening Chill"
              THUMB="1f327"
            else
              TITLE="🌇 Evening Chill Squad"
              THUMB="1f307"
            fi
          else
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Night Gaming"
              THUMB="1f327"
            else
              TITLE="🦉 Late Night Squad"
              THUMB="1f989"
            fi
          fi
          
          # Output values for next steps
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
          
          # Simple sticker selection
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Skye community greeting complete!"
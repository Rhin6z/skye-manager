name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "üè† OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "üéØ Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "üå§Ô∏è Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "‚úÖ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "üå°Ô∏è Raw: $TEMP¬∞C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}¬∞c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}¬∞c"
              fi
              
              echo "‚úÖ BMKG Weather: $WEATHER_INFO"
            else
              echo "‚ö†Ô∏è Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "‚ùå BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="üåßÔ∏è"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="üå¶Ô∏è"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="üî•"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="‚ùÑÔ∏è"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="üçÉ"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="‚òÅÔ∏è"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="‚òÄÔ∏è"
          else
            WEATHER_EMOJI="üå§Ô∏è"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Create AI Generator Scripts
        run: |
          # Create prompt file
          echo "**CONTEXT FOR THIS MESSAGE:**
          - Time: ${{ steps.context.outputs.TYPE }}
          - Day: ${{ steps.context.outputs.CURRENT_DAY }} (${{ steps.context.outputs.CONTEXT }})
          - Weather: ${{ steps.weather.outputs.WEATHER_INFO }}
          
          **ROLE:** You are a hype admin for Indonesian gaming Discord server \"Skye\". Write a daily greeting.
          
          **CRITICAL FORMAT REQUIREMENT - MUST FOLLOW EXACTLY:**
          Write exactly TWO complete sentences separated by a space:
          
          SENTENCE 1 (English only):
          - Start with hype opener: yoooow, wassuuup, heyyyyyy, suuuup, oiiiii, ayooooo, yoohoooo
          - Ask engaging question about current vibe/activity matching the time and DAY OF WEEK
          - End with question mark
          - 10-18 words total
          
          SENTENCE 2 (Indonesian with English game terms):
          - Start with invitation: yuuuk, gaskeun, gas polll, ayooook, hayuuuk, pada mauuu gak, siapaaaa yang mau
          - Suggest activity fitting time + weather
          - Include weather as reason naturally
          - If weekend, include <@&1374047008829997157> tag naturally
          - No tag on weekdays
          - End with matching emoji
          
          **EXAMPLES:**
          yoooow morning squad, coffee or controller which quest are you tackling this wednesday? yuuuk ngopi dulu sambil warm up aim, cuaca cerah bikin fokus jadi perfect buat daily quest üéÆ
          
          heyyyyyy afternoon crew, post lunch energy hitting different or still food coma mode? gaskeun quick match ml sambil ngadem, cuaca panas bikin mager jadi mending ranked push di AC üî•
          
          **RULES:**
          - All lowercase 
          - Max 2 emojis
          - No dashes/hyphens
          - Weather must match activity suggestions
          - Must be creative, avoid templates
          - ALWAYS write both sentences
          - Total length under 200 characters
          
          Write the greeting now:" > /tmp/prompt.txt

          # Create Python script for AI generation
          echo 'import json
import requests
import os
import sys
import re

try:
    with open("/tmp/prompt.txt", "r") as f:
        prompt = f.read().strip()
    
    api_key = os.environ.get("GEMINI_API_KEY")
    if not api_key:
        print("‚ùå No API key")
        sys.exit(1)
    
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent?key={api_key}"
    
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {
            "temperature": 0.4,
            "maxOutputTokens": 200,
            "topP": 0.95
        }
    }
    
    response = requests.post(url, json=payload, timeout=20)
    
    if response.status_code == 200:
        data = response.json()
        if "candidates" in data and len(data["candidates"]) > 0:
            ai_text = data["candidates"][0]["content"]["parts"][0]["text"].strip()
            
            # Clean formatting
            clean_text = re.sub(r"\*\*([^*]+)\*\*", r"\1", ai_text)
            clean_text = re.sub(r"`([^`]+)`", r"\1", clean_text)
            clean_text = re.sub(r"\n+", " ", clean_text)
            clean_text = " ".join(clean_text.split())
            
            # Find actual greeting
            lines = [line.strip() for line in ai_text.split("\n") if line.strip()]
            best_line = ""
            
            for line in lines:
                if (len(line) > 50 and 
                    not line.startswith(("**", "#", "-", "*", "Context:", "Weather:", "Time:", "Day:")) and
                    not line.lower().startswith(("greeting:", "message:", "response:", "output:", "here"))) :
                    if ("?" in line):
                        best_line = line
                        break
            
            if not best_line and clean_text:
                best_line = clean_text
            
            if best_line and len(best_line) > 50:
                with open("/tmp/ai_response.txt", "w", encoding="utf-8") as f:
                    f.write(best_line)
                print("‚úÖ AI generation successful")
                sys.exit(0)
    
    print("‚ùå AI generation failed - invalid response")
    sys.exit(1)
    
except Exception as e:
    print(f"‚ùå AI generation failed: {e}")
    sys.exit(1)' > /tmp/ai_generator.py

          # Create Python script for Discord message
          echo 'import json
import os

title = os.environ.get("TITLE", "Skye Squad")
desc_raw = os.environ.get("DESC", "what\'s good everyone!")
color = int(os.environ.get("COLOR", "16766720"))
timestamp = os.environ.get("TIMESTAMP", "")
thumb = os.environ.get("THUMB", "1f305")

# Convert description to lowercase
desc = desc_raw.lower()

# Add signature
desc += "\n> by server dev guanteng - <@399393175904714752>"

embed = {
    "title": title,
    "description": desc,
    "color": color,
    "thumbnail": {
        "url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"
    },
    "footer": {
        "text": "chill gaming vibes",
        "icon_url": "https://files.catbox.moe/npfh4e.jpg"
    },
    "timestamp": timestamp
}

payload = {"embeds": [embed]}

with open("/tmp/discord_payload.json", "w", encoding="utf-8") as f:
    json.dump(payload, f, ensure_ascii=False)

print("‚úÖ Payload created")' > /tmp/discord_script.py

      - name: Generate AI Greeting
        id: ai_generation
        run: |
          echo "ü§ñ Generating AI greeting..."
          
          # Execute the Python script
          python3 /tmp/ai_generator.py
          
          if [[ $? -eq 0 && -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "üéØ AI generated: $AI_TEXT"
            
            # Improved validation with better pattern matching
            HAS_ENGLISH_PART=$(echo "$AI_TEXT" | grep -E "\?" || echo "")
            HAS_INDONESIAN_PART=$(echo "$AI_TEXT" | grep -iE "(yu+k|gas|ayo+k*|pada|hayu+k|gaskeun|mabar|santuy|ngepush|main bareng)" || echo "")
            HAS_WEATHER=$(echo "$AI_TEXT" | grep -iE "(cuaca|hujan|gerimis|cerah|panas|dingin|sejuk|berawan|mendung|rainy|sunny|hot|cold|weather|rain)" || echo "")
            HAS_QUESTION=$(echo "$AI_TEXT" | grep -E "\?" || echo "")
            
            # Check for tag existence
            HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
            
            # Try to automatically fix single-sentence responses by adding a second part
            if [[ -z "$HAS_INDONESIAN_PART" ]]; then
              echo "‚ö†Ô∏è Missing Indonesian part, attempting to fix..."
              
              # Create appropriate second sentence based on context
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" && -z "$HAS_TAG" ]]; then
                SECOND_PART=""
                case "${{ steps.context.outputs.TYPE }}" in
                  "morning")
                    SECOND_PART="yuuuk <@&1374047008829997157> ngopi sambil warm up aim dulu, ${{ steps.weather.outputs.WEATHER_INFO }} perfect buat fokus grinding! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "afternoon")
                    SECOND_PART="gaskeun <@&1374047008829997157> quick match sambil santai, ${{ steps.weather.outputs.WEATHER_INFO }} pas buat chill gaming! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "evening")
                    SECOND_PART="gas polll <@&1374047008829997157> mabar sambil makan malam, ${{ steps.weather.outputs.WEATHER_INFO }} bikin mood relaxing! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "night")
                    SECOND_PART="hayuuuk <@&1374047008829997157> push rank marathon sampe pagi, ${{ steps.weather.outputs.WEATHER_INFO }} enak buat grinding! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                esac
              elif [[ "${{ steps.context.outputs.CONTEXT }}" != "weekend" && -z "$HAS_TAG" ]]; then
                SECOND_PART=""
                case "${{ steps.context.outputs.TYPE }}" in
                  "morning")
                    SECOND_PART="yuuuk ngopi sambil warm up aim dulu, ${{ steps.weather.outputs.WEATHER_INFO }} perfect buat fokus grinding! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "afternoon")
                    SECOND_PART="gaskeun quick match sambil santai, ${{ steps.weather.outputs.WEATHER_INFO }} pas buat chill gaming! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "evening")
                    SECOND_PART="gas polll mabar sambil makan malam, ${{ steps.weather.outputs.WEATHER_INFO }} bikin mood relaxing! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "night")
                    SECOND_PART="hayuuuk push rank marathon sampe pagi, ${{ steps.weather.outputs.WEATHER_INFO }} enak buat grinding! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                esac
              else
                # Already has a tag, don't add another one
                SECOND_PART=""
              fi
              
              # Add second part if the AI only generated the first part
              if [[ "$AI_TEXT" =~ \? && -n "$SECOND_PART" ]]; then
                AI_TEXT="$AI_TEXT $SECOND_PART"
                echo "‚úÖ Fixed by adding second part: $AI_TEXT"
              fi
            fi
            
            # Enforce character limit to prevent overly long messages
            if [[ ${#AI_TEXT} -gt 230 ]]; then
              echo "‚ö†Ô∏è Message too long (${#AI_TEXT} chars), trimming..."
              # First check if there's a tag
              if [[ "$AI_TEXT" =~ "<@&" ]]; then
                # Find tag position
                TAG_START=$(echo "$AI_TEXT" | grep -b -o "<@&" | head -1 | cut -d':' -f1)
                TAG_END=$(echo "$AI_TEXT" | cut -c$((TAG_START+1))- | grep -b -o ">" | head -1 | cut -d':' -f1)
                TAG_END=$((TAG_START + TAG_END + 1))
                
                # Keep the tag intact during trimming
                if [[ $TAG_START -lt 220 ]]; then
                  # Tag starts before cut point
                  if [[ $TAG_END -gt 220 ]]; then
                    # Tag would be cut, adjust cut point
                    PREFIX=$(echo "$AI_TEXT" | cut -c1-$TAG_END)
                    PREFIX="${PREFIX}..."
                  else
                    # Tag is safe, normal cut
                    PREFIX=$(echo "$AI_TEXT" | cut -c1-220)
                    PREFIX="${PREFIX}..."
                  fi
                else
                  # Tag is after cut point, just do normal trim
                  PREFIX=$(echo "$AI_TEXT" | cut -c1-220)
                  PREFIX="${PREFIX}..."
                fi
                AI_TEXT="$PREFIX"
              else
                # No tag, simple trim
                AI_TEXT=$(echo "$AI_TEXT" | cut -c1-220)
                AI_TEXT="${AI_TEXT}..."
              fi
            fi
            
            # Final validation after fixes
            if [[ -n "$HAS_ENGLISH_PART" && -n "$HAS_QUESTION" && (${#AI_TEXT} -gt 60) ]]; then
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "‚úÖ AI validated: ${#AI_TEXT} chars"
            else
              echo "‚ö†Ô∏è AI validation failed"
              echo "   English part: ${HAS_ENGLISH_PART:-missing}"
              echo "   Question: ${HAS_QUESTION:-missing}"
              echo "   Length: ${#AI_TEXT} chars"
              USE_AI=false
            fi
          else
            echo "‚ùå AI generation failed, using fallback"
            USE_AI=false
          fi
          
          if [[ "$USE_AI" != "true" ]]; then
            echo "üé≤ Using fallback system..."
            
            WEATHER_MENTION="${{ steps.weather.outputs.WEATHER_INFO }}"
            WEATHER_EMOJI="${{ steps.weather.outputs.WEATHER_EMOJI }}"
            declare -a MESSAGES
            
            # Create fallback message array appropriate for context
            if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                MESSAGES=(
                  "yoooow morning squad, coffee hitting different or controller calling your name already? yuuuk <@&1374047008829997157> ngopi sambil warm up aim dulu, ${WEATHER_MENTION} perfect buat fokus grinding! ${WEATHER_EMOJI}"
                  "wassuuuup early birds, energy level udah full atau masih butuh caffeine boost? gaskeun <@&1374047008829997157> sarapan sambil daily quest ringan, ${WEATHER_MENTION} bikin mood enak buat main! üéÆ"
                )
              else
                MESSAGES=(
                  "yoooow morning squad, coffee hitting different or controller calling your name already? yuuuk ngopi sambil warm up aim dulu, ${WEATHER_MENTION} perfect buat fokus grinding! ${WEATHER_EMOJI}"
                  "wassuuuup early birds, energy level udah full atau masih butuh caffeine boost? gaskeun sarapan sambil daily quest ringan, ${WEATHER_MENTION} bikin mood enak buat main! üéÆ"
                )
              fi
            elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                MESSAGES=(
                  "yoooow afternoon vibes, lunch coma hitting atau energy masih tinggi banget? yuuuk <@&1374047008829997157> quick match ml sambil digest, ${WEATHER_MENTION} pas buat santai gaming! ${WEATHER_EMOJI}"
                  "wassuuuup midday squad, productivity tinggi atau udah mulai burnout? pada mauuu gak <@&1374047008829997157> aram party sambil ngobrol, ${WEATHER_MENTION} bikin pengen ngadem! ${WEATHER_EMOJI}"
                )
              else
                MESSAGES=(
                  "yoooow afternoon vibes, lunch coma hitting atau energy masih tinggi banget? yuuuk quick match ml sambil digest, ${WEATHER_MENTION} pas buat santai gaming! ${WEATHER_EMOJI}"
                  "wassuuuup midday squad, productivity tinggi atau udah mulai burnout? pada mauuu gak aram party sambil ngobrol, ${WEATHER_MENTION} bikin pengen ngadem! ${WEATHER_EMOJI}"
                )
              fi
            elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                MESSAGES=(
                  "yoooow evening squad, day was productive atau disaster yang indah? gas polll <@&1374047008829997157> dinner sambil voice chat, ${WEATHER_MENTION} bikin mood relaxing! ${WEATHER_EMOJI}"
                  "wassuuuup golden hour gang, winding down atau masih full energy? yuuuk <@&1374047008829997157> mabar ml sambil sunset vibes, ${WEATHER_MENTION} aesthetic banget! üéÆ"
                )
              else
                MESSAGES=(
                  "yoooow evening squad, day was productive atau disaster yang indah? gas polll dinner sambil voice chat, ${WEATHER_MENTION} bikin mood relaxing! ${WEATHER_EMOJI}"
                  "wassuuuup golden hour gang, winding down atau masih full energy? yuuuk mabar ml sambil sunset vibes, ${WEATHER_MENTION} aesthetic banget! üéÆ"
                )
              fi
            else
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                MESSAGES=(
                  "yoooow night owls, insomnia squad atau pilihan begadang for fun? yuuuk <@&1374047008829997157> marathon gaming sambil vibing, ${WEATHER_MENTION} enak buat late night session! ${WEATHER_EMOJI}"
                  "wassuuuup midnight legends, peaceful hours atau chaos di ranked? siapaaaa yang mau <@&1374047008829997157> grind sampai pagi sambil ngobrol, ${WEATHER_MENTION} bikin betah! üéÆ"
                )
              else
                MESSAGES=(
                  "yoooow night owls, insomnia squad atau pilihan begadang for fun? yuuuk marathon gaming sambil vibing, ${WEATHER_MENTION} enak buat late night session! ${WEATHER_EMOJI}"
                  "wassuuuup midnight legends, peaceful hours atau chaos di ranked? siapaaaa yang mau grind sampai pagi sambil ngobrol, ${WEATHER_MENTION} bikin betah! üéÆ"
                )
              fi
            fi
            
            # Add special context messages with day-specific references
            if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "monday_motivation" ]]; then
              MESSAGES+=(
                "yoooow monday warriors, ready to conquer the week or still in weekend mode? yuuuk start dengan semangat sambil gaming, ${WEATHER_MENTION} cocok buat fresh start minggu ini! ${WEATHER_EMOJI}"
              )
            elif [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "hump_day" ]]; then
              MESSAGES+=(
                "wassuuuup wednesday crew, halfway to weekend vibes mulai kerasa? gas polll mid-week gaming session buat recharge, ${WEATHER_MENTION} pas banget buat midweek boost rabu ini! ${WEATHER_EMOJI}"
              )
            elif [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "weekend_countdown" ]]; then
              MESSAGES+=(
                "heyyyyyy friday squad, weekend energy udah mulai muncul? siapaaaa yang mau start weekend dengan victory streak, ${WEATHER_MENTION} perfect buat weekend countdown jumat ini! ${WEATHER_EMOJI}"
              )
            elif [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "sunday_prep" ]]; then
              MESSAGES+=(
                "oiiiii sunday gamers, enjoying the last bits of weekend freedom? yuuuk maximal weekend fun sebelum monday, ${WEATHER_MENTION} bikin betah buat last day grinding minggu ini! ${WEATHER_EMOJI}"
              )
            fi
            
            RANDOM_INDEX=$((RANDOM % ${#MESSAGES[@]}))
            DESC_RAW="${MESSAGES[$RANDOM_INDEX]}"
          fi
          
          declare -a TITLES
          declare -a THUMBS
          
          # Match thumbnail to weather when possible
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") 
              if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
                TITLES=("‚òî Rainy Morning Vibes" "üåßÔ∏è Cozy Morning Gaming" "‚òï Coffee & Rain Sounds")
                THUMBS=("2614" "1f327" "2615")
              elif [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"panas"* ]]; then
                TITLES=("üî• Hot Morning Grind" "‚òÄÔ∏è Sunny Morning Energy" "‚òï Coffee & Sunshine")
                THUMBS=("1f525" "2600" "2615")
              else
                TITLES=("‚òÄÔ∏è Morning Skye Squad" "üåÖ Early Bird Energy" "‚òï Coffee & Gaming Time")
                THUMBS=("2600" "1f305" "2615")
              fi
              ;;
            "afternoon") 
              if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
                TITLES=("üåßÔ∏è Rainy Afternoon Chill" "‚òî Midday Rain Gaming" "üå¶Ô∏è Lunch & Rain Vibes")
                THUMBS=("1f327" "2614" "1f326")
              else
                TITLES=("üçÉ Afternoon Chill Mode" "üå§Ô∏è Midday Squad Check" "‚òÄÔ∏è Lunch Break Gaming")
                THUMBS=("1f343" "1f324" "2600")
              fi
              ;;
            "evening") 
              if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
                TITLES=("üåßÔ∏è Rainy Evening Chill" "üåÜ Sunset Rain Gaming" "‚ú® Cozy Evening Vibes")
                THUMBS=("1f327" "1f306" "2728")
              else
                TITLES=("üåá Evening Chill Squad" "üåÜ Golden Hour Gaming" "‚ú® Evening Wind-Down")
                THUMBS=("1f307" "1f306" "2728")
              fi
              ;;
            "night") 
              if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
                TITLES=("üåßÔ∏è Rainy Night Gaming" "üåô Midnight Rain Club" "‚≠ê Stormy Night Session")
                THUMBS=("1f327" "1f319" "2b50")
              else
                TITLES=("ü¶â Late Night Squad" "üåô Midnight Gaming Club" "‚≠ê Night Owl Assembly")
                THUMBS=("1f989" "1f319" "2b50")
              fi
              ;;
          esac
          
          RANDOM_INDEX=$((RANDOM % ${#TITLES[@]}))
          TITLE="${TITLES[$RANDOM_INDEX]}"
          THUMB="${THUMBS[$RANDOM_INDEX]}"
          
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT
          
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "üì§ Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "‚úÖ Message sent!"
          echo "ü§ñ AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          
        env:
          TITLE: ${{ steps.ai_generation.outputs.TITLE }}
          DESC: ${{ steps.ai_generation.outputs.DESC_RAW }}
          COLOR: ${{ env.COLOR }}
          TIMESTAMP: ${{ env.TIMESTAMP }}
          THUMB: ${{ steps.ai_generation.outputs.THUMB }}

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "üß™ TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "================================"
          echo "üß™ Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "üé≤ Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "üè† OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "‚è∞ Standard delay for sticker..."
            sleep 3
          fi
          
          # Simplified sticker selection - fewer options to reduce expression size
          case "${{ steps.context.outputs.TYPE }}" in
            "morning")
              STICKERS=(
                "https://media.discordapp.net/stickers/1404543938815197306.png"
                "https://media.discordapp.net/stickers/1405277985237368943.png"
              )
              ;;
            "afternoon")
              STICKERS=(
                "https://media.discordapp.net/stickers/1405487683526201404.png"
                "https://media.discordapp.net/stickers/1405546781927936051.png"
              )
              ;;
            "evening")
              STICKERS=(
                "https://media.discordapp.net/stickers/1405914196922597549.png"
                "https://media.discordapp.net/stickers/1406065324758929509.png"
              )
              ;;
            "night")
              STICKERS=(
                "https://media.discordapp.net/stickers/1406668584335184003.png"
                "https://media.discordapp.net/stickers/1407858067013369856.png"
              )
              ;;
          esac
          
          RANDOM_INDEX=$((RANDOM % ${#STICKERS[@]}))
          SELECTED_STICKER=${STICKERS[$RANDOM_INDEX]}
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$SELECTED_STICKER\"}"
          
          echo "üéâ Sticker sent!"

      - name: Execution Summary
        run: |
          echo "üìä EXECUTION SUMMARY"
          echo "================================"
          echo "üïê Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "üéØ Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "üå§Ô∏è Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "ü§ñ AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "üè† OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "üß™ Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "================================"
          echo "‚úÖ Skye community greeting complete!"
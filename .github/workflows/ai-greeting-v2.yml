name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="🌧️"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="🌦️"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="🔥"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="❄️"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="🍃"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="☁️"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="☀️"
          else
            WEATHER_EMOJI="🌤️"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Generate AI Greeting
        id: ai_generation
        run: |
          echo "🤖 Generating AI greeting with FIXED CONTEXTUAL approach..."
          
          # Create FIXED CONTEXTUAL Python script
          cat > /tmp/fixed_contextual_generator.py << 'EOL'
          import json
          import requests
          import os
          import sys
          import re
          import random
          import datetime
          
          # ----- helpers -----
          def normalize_weather(raw):
              w = (raw or "").lower()
              if "hujan" in w or "gerimis" in w:
                  return "rain"
              if "cerah" in w or "terang" in w or "matahari" in w:
                  return "clear"
              if "mendung" in w or "berawan" in w or "cloud" in w:
                  return "cloudy"
              if "panas" in w or "terik" in w:
                  return "hot"
              if "angin" in w or "berangin" in w or "wind" in w:
                  return "windy"
              return "ok"
          
          def weather_phrase(day_indo, wx):
              if wx == "rain":
                  pool = [
                      f"lagi hujan, adem bgt di {day_indo}",
                      f"grimis tipis, enak fokus di {day_indo}",
                      f"hujan gini, ngopi dulu baru gas di {day_indo}",
                      f"udara sejuk, timing pas di {day_indo}",
                  ]
              elif wx == "clear":
                  pool = [
                      f"langit cerah, mood booster di {day_indo}",
                      f"cerah mantep, energi nambah di {day_indo}",
                      f"cuaca cerah, enak gerak di {day_indo}",
                      f"matahari ramah, vibes oke di {day_indo}",
                  ]
              elif wx == "cloudy":
                  pool = [
                      f"mendung santai, fokus jalan di {day_indo}",
                      f"berawan teduh, adem buat gerak di {day_indo}",
                      f"langit teduh, enak ngerjain hal-hal di {day_indo}",
                      f"no panas no silau, nyaman di {day_indo}",
                  ]
              elif wx == "hot":
                  pool = [
                      f"lagi terik, mending indoor di {day_indo}",
                      f"panas nempel, hidrasi dulu di {day_indo}",
                      f"terik pol, cari adem dulu di {day_indo}",
                      f"cuaca panas, keep it chill di {day_indo}",
                  ]
              elif wx == "windy":
                  pool = [
                      f"angin kenceng dikit, moga sinyal aman di {day_indo}",
                      f"berangin, jaketan dikit oke di {day_indo}",
                      f"angin nyapu kota, tetap santai di {day_indo}",
                      f"hembus kenceng, indoor vibes di {day_indo}",
                  ]
              else:
                  pool = [
                      f"cuaca lagi oke, pas bgt di {day_indo}",
                      f"hawanya pas, enak gerak di {day_indo}",
                      f"cuaca bersahabat di {day_indo}",
                      f"lagi nyaman, gas pelan di {day_indo}",
                  ]
              return random.choice(pool)
          
          def create_fixed_contextual_message():
              day = os.environ.get('CURRENT_DAY', 'today').lower()
              time = os.environ.get('TIME_OF_DAY', 'day')
              weather_raw = os.environ.get('WEATHER_INFO', 'cuaca enak')
              is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
              
              wx = normalize_weather(weather_raw)
              
              english_openers = ["yoooow", "wassuuup", "heyyy", "yo", "sup", "oi", "hey team", "morning fam", "what's good"]
              crew_alias_morning = ["morning crew", "a.m. squad", "early shift", "day starters", "morning people"]
              indo_starters = ["yuuuk", "gaskeun", "gas", "ayoook", "yok", "ayoo"]
              
              wk_morning_non_game = [
                  "semangat sekolah atau kerja dulu, gaming nanti sore",
                  "fokus aktivitas dulu, valorantnya abis pulang",
                  "produktif dulu, mobile legends jadi reward",
                  "tuntasin to-do, robloxnya belakangan",
              ]
              wknd_morning_game = [
                  "pemanasan aim ringan dulu",
                  "ngopi sambil valorant unrated",
                  "classic mobile legends bareng",
                  "roblox santai sambil sarapan",
              ]
              afternoon_wk = [
                  "quick mobile legends classic pas break",
                  "valorant unrated sambil istirahat",
                  "roblox chill buat ngecas otak",
                  "aim training ringan sambil snack",
              ]
              afternoon_wknd = [
                  "ranked push mobile legends bareng",
                  "valorant session kompetitif",
                  "roblox adventure sambil ngadem",
                  "voice chat gaming sekalian makan",
              ]
              evening_all = [
                  "mabar valorant santai sambil dinner",
                  "mobile legends team fight bareng",
                  "roblox voice chat sambil makan",
                  "evening gaming session santuy",
              ]
              night_wk = [
                  "valorant unrated bentar sebelum tidur",
                  "mobile legends classic santai dulu",
                  "roblox chill buat wind down",
                  "aim training ringan sebelum bobo",
              ]
              night_wknd = [
                  "valorant push rank malem ini",
                  "mobile legends night session marathon",
                  "roblox building sambil ngobrol",
                  "late night gaming bareng squad",
              ]
              
              day_indo_map = {
                  'monday': 'senin', 'tuesday': 'selasa', 'wednesday': 'rabu',
                  'thursday': 'kamis', 'friday': 'jumat', 'saturday': 'sabtu', 'sunday': 'minggu'
              }
              day_indo = day_indo_map.get(day, day)
              
              if time == 'morning':
                  alias = random.choice(crew_alias_morning)
                  if is_weekend:
                      first_patterns = [
                          f"{day} {alias}, coffee first or straight to gaming",
                          f"{day} {alias}, early bird grind or chill start",
                          f"{day} {alias}, weekend energy on or snooze one more time",
                          f"{day} {alias}, what's the move—warm up or full queue",
                      ]
                      activities = wknd_morning_game
                  else:
                      first_patterns = [
                          f"{day} {alias}, ready for school or need more coffee",
                          f"{day} {alias}, energy full or still loading",
                          f"{day} {alias}, productivity mode or survival mode",
                          f"{day} {alias}, focused start or slow warm-up",
                      ]
                      activities = wk_morning_non_game
              elif time == 'afternoon':
                  alias = "afternoon squad"
                  if is_weekend:
                      first_patterns = [
                          f"{day} {alias}, lunch coma or still energetic",
                          f"{day} {alias}, indoor gaming weather or touch grass later",
                          f"{day} {alias}, queue time or nap time",
                          f"{day} {alias}, weekend still rolling",
                      ]
                      activities = afternoon_wknd
                  else:
                      first_patterns = [
                          f"{day} {alias}, lunch break freedom or still busy",
                          f"{day} {alias}, need a quick gaming therapy break",
                          f"{day} {alias}, tired brain—quick match maybe",
                          f"{day} {alias}, halfway there—hold on",
                      ]
                      activities = afternoon_wk
              elif time == 'evening':
                  alias = "evening crew"
                  first_patterns = [
                      f"{day} {alias}, day was productive or total chaos",
                      f"{day} {alias}, dinner then gaming or family time first",
                      f"{day} {alias}, need relaxing games or just chat",
                      f"{day} {alias}, golden hour vibes on or off",
                  ]
                  activities = evening_all
              else:
                  alias = "night gang"
                  if is_weekend:
                      first_patterns = [
                          f"{day} {alias}, weekend freedom or getting sleepy",
                          f"{day} {alias}, marathon session or just vibe",
                          f"{day} {alias}, night owl energy still up",
                          f"{day} {alias}, lights low, comms on",
                      ]
                      activities = night_wknd
                  else:
                      first_patterns = [
                          f"{day} {alias}, quick gaming before rest or straight to bed",
                          f"{day} {alias}, tomorrow packed or kinda free",
                          f"{day} {alias}, wind down gaming or sleep time",
                          f"{day} {alias}, insomnia or just scrolling",
                      ]
                      activities = night_wk
              
              opener = random.choice(english_openers)
              question = random.choice(first_patterns)
              if not question.endswith("?"):
                  question += "?"
              
              indo_starter = random.choice(indo_starters)
              activity = random.choice(activities)
              tag = " <@&1374047008829997157>" if is_weekend and time in ['morning','afternoon','evening','night'] else ""
              wx_line = weather_phrase(day_indo, wx)
              connector = random.choice(["btw", "soalnya", "sekalian", "biar makin enak", "biar fokus"])
              
              second = f"{indo_starter}{tag} {activity}, {connector} {wx_line}"
              msg = f"{opener} {question} {second}"
              msg = re.sub(r"\s+", " ", msg).strip().lower()
              return msg
          
          try:
              day = os.environ.get('CURRENT_DAY', 'today').lower()
              time = os.environ.get('TIME_OF_DAY', 'day')
              is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
              weather = os.environ.get('WEATHER_INFO', 'cuaca enak')
              
              # ringkas biar ga panjang (menghindari limit ekspresi)
              if time == 'morning' and not is_weekend:
                  prompt = f"""write a discord greeting for {day} morning (weekday).
          two sentences, all lowercase.
          1) english only. mention "{day} morning crew" or similar. short readiness question. end with '?'.
          2) indonesian. encourage productivity first, gaming later. add a natural weather clause in indonesian (no laughter slang).
          no game titles in sentence 1. keep it brief. write only the greeting."""
              elif time == 'morning' and is_weekend:
                  prompt = f"""write a discord greeting for {day} morning (weekend).
          two sentences, all lowercase.
          1) english only. mention "{day} morning crew" or similar. short weekend gaming question. end with '?'.
          2) indonesian. start with "yuuuk"/"gas"/"yok", include "<@&1374047008829997157>", pick one: valorant/mobile legends/roblox, then natural weather clause (no laughter slang).
          keep it brief. write only the greeting."""
              else:
                  prompt = f"""write a discord greeting for {day} {time}.
          two sentences, all lowercase.
          1) english only. mention "{day} {time}" crew/squad and ask a contextual question. end with '?'.
          2) indonesian. invite to valorant/mobile legends/roblox + natural weather clause (no laughter slang).
          keep it brief. write only the greeting."""
              
              api_key = os.environ.get('GEMINI_API_KEY')
              
              if api_key:
                  url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
                  payload = {
                      "contents": [{"parts": [{"text": prompt}]}],
                      "generationConfig": {"temperature": 0.65, "maxOutputTokens": 110, "topP": 0.85}
                  }
                  
                  print("📡 Trying fixed contextual prompt...")
                  response = requests.post(url, json=payload, timeout=15)
                  
                  if response.status_code == 200:
                      data = response.json()
                      if 'candidates' in data and data['candidates']:
                          candidate = data['candidates'][0]
                          if candidate.get('finishReason') != 'MAX_TOKENS':
                              try:
                                  parts = candidate.get('content', {}).get('parts') or []
                                  if parts and 'text' in parts[0]:
                                      text_content = parts[0]['text'].strip().lower()
                                      clean_text = re.sub(r'\*+|\n+', ' ', text_content)
                                      clean_text = ' '.join(clean_text.split())
                                      
                                      if '?' in clean_text:
                                          first = clean_text.split('?', 1)[0]
                                          second = clean_text.split('?', 1)[1].strip()
                                      else:
                                          clean_text = re.sub(r'\.', '?', clean_text, count=1)
                                          first = clean_text.split('?', 1)[0]
                                          second = clean_text.split('?', 1)[1].strip() if '?' in clean_text else ""
                                      
                                      ok = True
                                      if time == 'morning' and not is_weekend:
                                          if any(w in first for w in ['apex','valorant','mobile legends','roblox','gaming','main','mabar','push rank','competitive']):
                                              ok = False
                                      if any(tok in first.split() for tok in ['yuuuk','yuk','yok','gaskeun','gas','atau','dulu','gini','banget','aja','sama','juga','kali','deh','dong','lah','nih','yg','kuy','mabar','anjay','wkwk','njir','pas','udah','ntar','besok','gue','gua','kamu','lu']):
                                          ok = False
                                      if re.search(r'(cuaca|hujan|cerah|mendung|berawan|panas|terik|angin)[^.!?]{0,80}(kocak+k*|wkwk(wk)*|ytta)', second):
                                          ok = False
                                      
                                      rebuilt = (first.strip() + "? " + second.strip()).strip()
                                      rebuilt = re.sub(r'\s+', ' ', rebuilt)
                                      
                                      if ok and 60 <= len(rebuilt) <= 200:
                                          rebuilt = re.sub(r'[🎮💯🔥⚡✨🎯💪🚀☕📚]+$', '', rebuilt).strip()
                                          with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                                              f.write(rebuilt)
                                          print(f"✅ Fixed contextual success: {rebuilt[:60]}...")
                                          sys.exit(0)
                              except Exception as e:
                                  print(f"⚠️ Parse error: {e}")
              
              print("🎲 Using fixed contextual generation...")
              message = create_fixed_contextual_message()
              with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                  f.write(message)
              print(f"✅ Fixed contextual message: {message[:60]}...")
              sys.exit(0)
          
          except Exception as e:
              print(f"⚠️ Exception: {e}")
              message = create_fixed_contextual_message()
              with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                  f.write(message)
              print(f"✅ Exception fallback: {message[:60]}...")
              sys.exit(0)
          EOL

          # Create Discord payload script
          cat > /tmp/discord_script.py << 'EOL'
          import json
          import os
          
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', "what's good everyone!")
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          
          desc = (desc_raw or '').lower()
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {"url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"},
              "footer": {"text": "chill gaming vibes", "icon_url": "https://files.catbox.moe/npfh4e.jpg"},
              "timestamp": timestamp
          }
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump({"embeds": [embed]}, f, ensure_ascii=False)
          
          print("✅ Payload created")
          EOL

          # Execute with environment variables
          echo "🧪 Executing FIXED CONTEXTUAL generator..."
          CURRENT_DAY="${{ steps.context.outputs.CURRENT_DAY }}" \
          TIME_OF_DAY="${{ steps.context.outputs.TYPE }}" \
          WEATHER_INFO="${{ steps.weather.outputs.WEATHER_INFO }}" \
          IS_WEEKEND="${{ steps.context.outputs.CONTEXT == 'weekend' }}" \
          GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
          python3 /tmp/fixed_contextual_generator.py
          
          # Process the result
          if [[ -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 Generated text: $AI_TEXT"
            
            if [[ ${#AI_TEXT} -gt 40 && ${#AI_TEXT} -lt 250 ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
                if [[ -z "$HAS_TAG" ]]; then
                  echo "⚠️ Adding weekend tag..."
                  if [[ "$AI_TEXT" == *"?"* ]]; then
                    AI_TEXT=$(echo "$AI_TEXT" | sed 's/? /? <@&1374047008829997157> /')
                  else
                    AI_TEXT="$AI_TEXT <@&1374047008829997157>"
                  fi
                fi
              else
                AI_TEXT=$(echo "$AI_TEXT" | sed 's/<@&[0-9]*>//g' | sed 's/  / /g')
              fi
              
              # style fixes
              AI_TEXT=$(echo "$AI_TEXT" | sed 's/school\/work/school or work/gI' | sed 's/sekolah\/kerja/sekolah atau kerja/gI')
              AI_TEXT=$(echo "$AI_TEXT" | sed -E 's/(cuaca|hujan|cerah|mendung|berawan|panas|terik|angin)([^.!?]{0,80})(kocak+k*|wkwk(wk)*|ytta)/\1\2 cocok bgt/gI')
              AI_TEXT=$(echo "$AI_TEXT" | sed 's/[🎮💯🔥⚡✨🎯💪🚀☕📚]*$//')
              
              if [[ ${#AI_TEXT} -gt 200 ]]; then
                AI_TEXT="${AI_TEXT:0:190}..."
              fi
              
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "✅ FIXED AI SUCCESS: ${#AI_TEXT} chars"
            else
              echo "❌ Generated text invalid length: ${#AI_TEXT}"
              USE_AI=false
            fi
          else
            echo "❌ No AI response file generated"
            USE_AI=false
          fi
          
          # Fallback system
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using fixed fallback system..."
            
            WEATHER_MENTION="${{ steps.weather.outputs.WEATHER_INFO }}"
            DAY_LOWER=$(echo "${{ steps.context.outputs.CURRENT_DAY }}" | tr '[:upper:]' '[:lower:]')
            
            WX_LINE="cuaca lagi oke di ${DAY_LOWER}"
            if echo "$WEATHER_MENTION" | grep -qi "hujan\|gerimis"; then
              WX_LINE="lagi hujan, adem bgt di ${DAY_LOWER}"
            elif echo "$WEATHER_MENTION" | grep -qi "cerah\|terang\|matahari"; then
              WX_LINE="langit cerah, mood booster di ${DAY_LOWER}"
            elif echo "$WEATHER_MENTION" | grep -qi "mendung\|berawan\|cloud"; then
              WX_LINE="berawan teduh, enak fokus di ${DAY_LOWER}"
            elif echo "$WEATHER_MENTION" | grep -qi "panas\|terik"; then
              WX_LINE="lagi terik, mending indoor di ${DAY_LOWER}"
            elif echo "$WEATHER_MENTION" | grep -qi "angin\|berangin\|wind"; then
              WX_LINE="angin kenceng dikit, keep chill di ${DAY_LOWER}"
            fi
          
            case "${{ steps.context.outputs.TYPE }}" in
              "morning")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="yoooow ${DAY_LOWER} morning crew, coffee first or straight to gaming? gaskeun <@&1374047008829997157> pemanasan aim ringan dulu, btw ${WX_LINE}"
                else
                  DESC_RAW="heyyy ${DAY_LOWER} morning crew, ready for school or need more motivation? yuuuk semangat sekolah atau kerja dulu, gaming nanti sore, soalnya ${WX_LINE}"
                fi
                ;;
              "afternoon")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="wassuuup ${DAY_LOWER} afternoon squad, lunch coma or still energetic? yuuuk <@&1374047008829997157> valorant session, sekalian ${WX_LINE}"
                else
                  DESC_RAW="yo ${DAY_LOWER} afternoon, lunch break or still busy mode? yuuuk quick mobile legends classic, biar makin enak ${WX_LINE}"
                fi
                ;;
              "evening")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="oi ${DAY_LOWER} evening crew, weekend vibes still strong? yuuuk <@&1374047008829997157> mabar santai, btw ${WX_LINE}"
                else
                  DESC_RAW="sup ${DAY_LOWER} evening crew, school or work done for today? yuuuk santai gaming sambil dinner, sekalian ${WX_LINE}"
                fi
                ;;
              "night")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="yoooow ${DAY_LOWER} night gang, weekend freedom or getting sleepy? yuuuk <@&1374047008829997157> push rank, soalnya ${WX_LINE}"
                else
                  if [[ "${{ steps.context.outputs.CURRENT_DAY }}" == "Sunday" ]]; then
                    DESC_RAW="heyyy sunday night crew, ready for monday or denial mode? yuuuk chill bentar terus rest, btw ${WX_LINE}"
                  else
                    DESC_RAW="yo ${DAY_LOWER} night, quick gaming or sleep time? yuuuk valorant unrated bentar aja, sekalian ${WX_LINE}"
                  fi
                fi
                ;;
            esac
            
            echo "🎯 Fixed fallback: ${DESC_RAW}"
          fi
          
          # Set interactive titles based on time and context
          case "${{ steps.context.outputs.TYPE }}" in
            "morning")
              if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
                TITLE="good morning skyers"
                THUMB="2614"
              else
                TITLE="yoww morning skye squad"
                THUMB="2600"
              fi
              ;;
            "afternoon")
              if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
                TITLE="afternoon vibes skyers"
                THUMB="1f327"
              else
                TITLE="good afternoon skye squad"
                THUMB="1f343"
              fi
              ;;
            "evening")
              if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
                TITLE="evening chill skyers"
                THUMB="1f327"
              else
                TITLE="yoww evening skye squad"
                THUMB="1f307"
              fi
              ;;
            "night")
              if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
                TITLE="rainy night skyers"
                THUMB="1f327"
              else
                TITLE="good night skye squad"
                THUMB="1f989"
              fi
              ;;
          esac
          
          # Output values for next steps
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
          
          # Simple sticker selection
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Skye community greeting complete!"
name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="🌧️"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="🌦️"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="🔥"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="❄️"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="🍃"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="☁️"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="☀️"
          else
            WEATHER_EMOJI="🌤️"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Create AI Prompt
        id: create_prompt
        run: |
          # Create prompt file with authentic Indonesian gaming slang
          cat > /tmp/prompt.txt << 'EOL'
          **CONTEXT:**
          - Time: ${{ steps.context.outputs.TYPE }}
          - Day: ${{ steps.context.outputs.CURRENT_DAY }} (${{ steps.context.outputs.CONTEXT }})
          - Weather: ${{ steps.weather.outputs.WEATHER_INFO }}
          
          **ROLE:** You are a super casual Indonesian gaming Discord admin for server "Skye". You must sound EXACTLY like a real Indonesian gamer with their slang.
          
          **MESSAGE FORMAT (2 SENTENCES ONLY):**
          
          **SENTENCE 1 (ENGLISH WITH DAY REFERENCE):**
          - Start with casual opener: "yoooow", "wassuuup", "heyyy", "suuup", "bro", "guyss"
          - MUST mention ${{ steps.context.outputs.CURRENT_DAY }} casually 
          - Ask about specific activities based on time:
            * Morning: about school/work preparation, energy levels
            * Afternoon: about breaks, lunch, relaxing
            * Evening: how their school/work day went
            * Night: gaming plans or rest plans
          - End with question mark
          - Max 12 words
          
          **SENTENCE 2 (INDONESIAN WITH AUTHENTIC SLANG):**
          - MUST include AT LEAST ONE authentic Indonesian slang: "njirrr", "bjirrr", "ygy", "ytta", "anjay", "kocakkk", "wkwkwk", "awkowkwoka", "hehehehe", "walawe"
          - MUST use casual abbreviations: "dah", "gk", "yg", "aja", "bgt", "trs", "klo", "gmn"
          - Include day reference again in Indonesian
          - Include weather: ${{ steps.weather.outputs.WEATHER_INFO }}
          - IMPORTANT: ONLY add tag <@&1374047008829997157> if it's weekend (${{ steps.context.outputs.CONTEXT }} == "weekend")
          - Context-specific content:
            * Weekday Morning: encourage for school/work
            * Weekday Afternoon: suggest break time
            * Weekday Evening: ask about their day
            * Weekday Night: invite gamers or suggest rest (no late nights)
            * Weekend: more gaming-focused, invite to play together
          - End with emoji that matches mood
          
          **CRITICAL RULES:**
          - ALL LOWERCASE text only
          - STAY UNDER 180 CHARACTERS TOTAL
          - Sound EXACTLY like Indonesian gamers chat (not formal)
          - Messages should feel like they're from a real human, not AI
          - Use the Indonesian slang words authentically (don't force them)
          
          Write a super authentic Indonesian gamer greeting:
          EOL

          # Create Python AI generator script with more emphasis on brevity
          cat > /tmp/ai_generator.py << 'EOL'
          import json
          import requests
          import os
          import sys
          import re
          
          try:
              with open('/tmp/prompt.txt', 'r') as f:
                  prompt = f.read().strip()
              
              api_key = os.environ.get('GEMINI_API_KEY')
              if not api_key:
                  print("❌ No API key")
                  sys.exit(1)
              
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent?key={api_key}"
              
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.7,  # Increased for more creativity
                      "maxOutputTokens": 150,
                      "topP": 0.95
                  }
              }
              
              response = requests.post(url, json=payload, timeout=20)
              
              if response.status_code == 200:
                  data = response.json()
                  if 'candidates' in data and len(data['candidates']) > 0:
                      ai_text = data['candidates'][0]['content']['parts'][0]['text'].strip()
                      
                      # Clean formatting
                      clean_text = re.sub(r'\*\*([^*]+)\*\*', r'\1', ai_text)
                      clean_text = re.sub(r'`([^`]+)`', r'\1', clean_text)
                      clean_text = re.sub(r'\n+', ' ', clean_text)
                      clean_text = ' '.join(clean_text.split())
                      
                      # Find actual greeting
                      lines = [line.strip() for line in ai_text.split('\n') if line.strip()]
                      best_line = ""
                      
                      for line in lines:
                          if (len(line) > 40 and len(line) < 200 and
                              not line.startswith(('**', '#', '-', '*', 'Context:', 'Weather:', 'Time:', 'Day:')) and
                              not line.lower().startswith(('greeting:', 'message:', 'response:', 'output:', 'here'))) :
                              if ('?' in line):
                                  best_line = line
                                  break
                      
                      if not best_line and clean_text:
                          best_line = clean_text
                      
                      if best_line and len(best_line) > 40 and len(best_line) < 200:
                          # Enforce brevity by truncating if still too long
                          if len(best_line) > 180:
                              # Find a good breakpoint 
                              breakpoint = best_line.rfind(' ', 0, 177)
                              if breakpoint > 0:
                                  best_line = best_line[:breakpoint] + "..."
                              else:
                                  best_line = best_line[:177] + "..."
                          
                          with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                              f.write(best_line)
                          print("✅ AI generation successful")
                          sys.exit(0)
              
              print("❌ AI generation failed - invalid response")
              sys.exit(1)
              
          except Exception as e:
              print(f"❌ AI generation failed: {e}")
              sys.exit(1)
          EOL

          # Create Discord payload script
          cat > /tmp/discord_script.py << 'EOL'
          import json
          import os
          
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', 'what\'s good everyone!')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          
          # Convert description to lowercase
          desc = desc_raw.lower()
          
          # Add signature
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {
                  "url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"
              },
              "footer": {
                  "text": "chill gaming vibes",
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Payload created")
          EOL

      - name: Generate AI Greeting
        id: ai_generation
        run: |
          echo "🤖 Generating AI greeting..."
          
          # Execute the Python script
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} python3 /tmp/ai_generator.py
          
          if [[ $? -eq 0 && -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 AI generated: $AI_TEXT"
            
            # Improved validation with better pattern matching
            HAS_ENGLISH_PART=$(echo "$AI_TEXT" | grep -E "\?" || echo "")
            HAS_INDONESIAN_PART=$(echo "$AI_TEXT" | grep -iE "(yu+k|gas|ayo+k*|pada|hayu+k|gaskeun|mabar|santuy|ngepush|main)" || echo "")
            HAS_WEATHER=$(echo "$AI_TEXT" | grep -iE "(cuaca|hujan|gerimis|cerah|panas|dingin|sejuk|berawan|mendung)" || echo "")
            HAS_QUESTION=$(echo "$AI_TEXT" | grep -E "\?" || echo "")
            
            # Check for tag existence
            HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
            
            # Auto-fix for missing Indonesian part
            if [[ -z "$HAS_INDONESIAN_PART" ]]; then
              echo "⚠️ Missing Indonesian part, attempting to fix..."
              
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" && -z "$HAS_TAG" ]]; then
                # Create weekend fallback with tag - keeping these short
                case "${{ steps.context.outputs.TYPE }}" in
                  "morning")
                    SECOND_PART="yuuuk <@&1374047008829997157> ngopi sambil warm up, ${{ steps.weather.outputs.WEATHER_INFO }} enak buat fokus! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "afternoon")
                    SECOND_PART="gaskeun <@&1374047008829997157> quick match, ${{ steps.weather.outputs.WEATHER_INFO }} pas buat chill! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "evening")
                    SECOND_PART="gas <@&1374047008829997157> mabar sambil makan, ${{ steps.weather.outputs.WEATHER_INFO }} bikin relaxing! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "night")
                    SECOND_PART="yuuk <@&1374047008829997157> push rank, ${{ steps.weather.outputs.WEATHER_INFO }} enak buat grinding! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                esac
              elif [[ "${{ steps.context.outputs.CONTEXT }}" != "weekend" && -z "$HAS_TAG" ]]; then
                # Create weekday fallback without tag - keeping these short
                case "${{ steps.context.outputs.TYPE }}" in
                  "morning")
                    SECOND_PART="yuuuk ngopi sambil warm up aim, ${{ steps.weather.outputs.WEATHER_INFO }} enak buat fokus! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "afternoon")
                    SECOND_PART="gaskeun quick match, ${{ steps.weather.outputs.WEATHER_INFO }} pas buat chill gaming! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "evening")
                    SECOND_PART="gas mabar sambil makan, ${{ steps.weather.outputs.WEATHER_INFO }} bikin relaxing! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                  "night")
                    SECOND_PART="yuuk push rank bareng, ${{ steps.weather.outputs.WEATHER_INFO }} enak buat grinding! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                    ;;
                esac
              else
                # Already has a tag, don't add another one
                SECOND_PART=""
              fi
              
              # Add second part if the AI only generated the first part
              if [[ "$AI_TEXT" =~ \? && -n "$SECOND_PART" ]]; then
                AI_TEXT="$AI_TEXT $SECOND_PART"
                echo "✅ Fixed by adding second part: $AI_TEXT"
              fi
            fi
            
            # Length limit check - stricter enforcement
            if [[ ${#AI_TEXT} -gt 200 ]]; then
              echo "⚠️ Message too long (${#AI_TEXT} chars), trimming..."
              # Simplified trimming approach for better readability
              if [[ "$AI_TEXT" =~ "<@&" ]]; then
                # Find tag position
                TAG_START=$(echo "$AI_TEXT" | grep -b -o "<@&" | head -1 | cut -d':' -f1)
                # Find space before tag to create clean break
                BREAK_POINT=$(echo "$AI_TEXT" | cut -c1-$TAG_START | grep -b -o " " | tail -1 | cut -d':' -f1)
                
                if [[ -n "$BREAK_POINT" && $BREAK_POINT -gt 50 ]]; then
                  # We have a good break point before the tag
                  AI_TEXT=$(echo "$AI_TEXT" | cut -c1-$BREAK_POINT)
                  AI_TEXT="${AI_TEXT} <@&1374047008829997157> ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                else
                  # Fallback to simpler approach
                  AI_TEXT=$(echo "$AI_TEXT" | cut -c1-150)
                  AI_TEXT="${AI_TEXT}... <@&1374047008829997157> ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                fi
              else
                # Find a good sentence break
                QUESTION_MARK=$(echo "$AI_TEXT" | grep -b -o "?" | head -1 | cut -d':' -f1)
                if [[ -n "$QUESTION_MARK" && $QUESTION_MARK -gt 30 && $QUESTION_MARK -lt 150 ]]; then
                  # Keep just the question part and add a simple second part
                  PREFIX=$(echo "$AI_TEXT" | cut -c1-$((QUESTION_MARK+1)))
                  
                  if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                    AI_TEXT="${PREFIX} yuuuk <@&1374047008829997157> main game bareng, ${{ steps.weather.outputs.WEATHER_INFO }} mantap! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                  else
                    AI_TEXT="${PREFIX} yuuuk main game bareng, ${{ steps.weather.outputs.WEATHER_INFO }} mantap! ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                  fi
                else
                  # Simple trim
                  AI_TEXT=$(echo "$AI_TEXT" | cut -c1-180)
                  AI_TEXT="${AI_TEXT}... ${{ steps.weather.outputs.WEATHER_EMOJI }}"
                fi
              fi
            fi
            
            # Final validation after fixes
            if [[ -n "$HAS_ENGLISH_PART" && -n "$HAS_QUESTION" && (${#AI_TEXT} -gt 60) ]]; then
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "✅ AI validated: ${#AI_TEXT} chars"
            else
              USE_AI=false
              echo "⚠️ AI validation failed"
            fi
          else
            USE_AI=false
            echo "❌ AI generation failed, using fallback"
          fi
          
          # Fallback system - simplified with shorter messages
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using creative fallback system..."
            
            WEATHER_MENTION="${{ steps.weather.outputs.WEATHER_INFO }}"
            WEATHER_EMOJI="${{ steps.weather.outputs.WEATHER_EMOJI }}"
            
            # Compact fallback options per time period
            if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                DESC_RAW="yoooow morning squad, coffee or gaming which comes first today? yuuuk <@&1374047008829997157> warm up aim sambil ngopi, ${WEATHER_MENTION} perfect buat fokus! ${WEATHER_EMOJI}"
              else
                DESC_RAW="heyyyyyy weekday warriors, energy level udah ready buat grinding? gaskeun warm up aim sambil ngopi, ${WEATHER_MENTION} enak buat fresh start! ${WEATHER_EMOJI}"
              fi
            elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                DESC_RAW="wassuuup weekend squad, lunch break atau udah makan sambil main? yuuuk <@&1374047008829997157> quick match bareng, ${WEATHER_MENTION} pas buat chill! ${WEATHER_EMOJI}"
              else
                DESC_RAW="suuuup afternoon crew, break time atau masih grind mode? gas quick match bentar, ${WEATHER_MENTION} cocok buat refresh otak! ${WEATHER_EMOJI}"
              fi
            elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                DESC_RAW="yoooow evening legends, weekend vibe masih tinggi atau udah capek? gas polll <@&1374047008829997157> voice chat sambil mabar, ${WEATHER_MENTION} enak buat relaxing! ${WEATHER_EMOJI}"
              else
                DESC_RAW="heyyyyyy evening crew, hari ini productive atau butuh gaming therapy? yuuuk mabar valorant santai, ${WEATHER_MENTION} cocok buat wind down! ${WEATHER_EMOJI}"
              fi
            else
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                DESC_RAW="wassuuup night owls, masih semangat gaming atau udah sleepy mode? gas <@&1374047008829997157> push rank sampe pagi, ${WEATHER_MENTION} bikin betah begadang! ${WEATHER_EMOJI}"
              else
                DESC_RAW="suuuup night crew, insomnia squad atau emang dedicated gamer? yuuuk mabar sebentar, ${WEATHER_MENTION} pas buat late night gaming! ${WEATHER_EMOJI}"
              fi
            fi
            
            # Special context overrides
            if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "monday_motivation" ]]; then
              DESC_RAW="heyyyyyy monday warriors, weekend hangover atau udah siap conquer the week? yuuuk warm up pagi buat semangat, ${WEATHER_MENTION} cocok buat fresh start! ${WEATHER_EMOJI}"
            elif [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "sunday_prep" ]]; then
              DESC_RAW="oiiiii sunday squad, enjoying weekend freedom atau udah kepikiran monday? yuuuk <@&1374047008829997157> max out weekend fun, ${WEATHER_MENTION} enak buat last day gaming! ${WEATHER_EMOJI}"
            fi
            
            echo "🎯 Selected creative fallback: ${DESC_RAW}"
          fi
          
          # Set title and thumbnail based on time and weather
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="☔ Rainy Morning Vibes"
              THUMB="2614"
            else
              TITLE="☀️ Morning Skye Squad"
              THUMB="2600"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Afternoon Chill"
              THUMB="1f327"
            else
              TITLE="🍃 Afternoon Chill Mode"
              THUMB="1f343"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Evening Chill"
              THUMB="1f327"
            else
              TITLE="🌇 Evening Chill Squad"
              THUMB="1f307"
            fi
          else
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Night Gaming"
              THUMB="1f327"
            else
              TITLE="🦉 Late Night Squad"
              THUMB="1f989"
            fi
          fi
          
          # Output values for next steps
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Simple sticker selection
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "================================"
          echo "✅ Skye community greeting complete!"
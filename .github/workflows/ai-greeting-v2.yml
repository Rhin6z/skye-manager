name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="🌧️"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="🌦️"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="🔥"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="❄️"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="🍃"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="☁️"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="☀️"
          else
            WEATHER_EMOJI="🌤️"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Generate AI Greeting
        id: ai_generation
        env:
          CURRENT_DAY: ${{ steps.context.outputs.CURRENT_DAY }}
          TIME_OF_DAY: ${{ steps.context.outputs.TYPE }}
          CONTEXT: ${{ steps.context.outputs.CONTEXT }}
          WEATHER_INFO: ${{ steps.weather.outputs.WEATHER_INFO }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🤖 generating ai greeting (natural, no-dash)…"

          # derive weekend flag
          if [ "$CONTEXT" = "weekend" ]; then
            export IS_WEEKEND=true
          else
            export IS_WEEKEND=false
          fi
          
          # ---------- python generator ----------
          cat > /tmp/fixed_contextual_generator.py << 'EOL'
          import os, re, random, requests, sys

          """
          SLANG_GLOSSARY (arti asli biar konteks bener):
          indo:
            - yuk/yuuuk/yok/ayoo: ajakan halus buat mulai
            - gas: ayo langsung jalan sekarang
            - gaskeun: push terus tanpa ragu
            - anjay/anjayyy: kagum/terkejut (hindari untuk frasa cuaca)
            - gileee: takjub santai
            - gacorrr: perform bagus/ramai (voice/game), bukan buat cuaca
            - wkwkwk: ketawa tulisan (hindari di frasa cuaca)
            - njirrr: kaget/sinis santai (hindari di frasa cuaca)
            - ygy: “ya ga sih”; ytta: “yang tau tau aja” (inside joke; hindari di cuaca)
          english:
            - crew/squad/team: panggilan komunal santai
            - vibe: suasana/feel; grind: kerja keras; queue up: antri match
            - dialed in: fokus siap kerja; booting: masih pemanasan
            - touch grass: keluar sebentar dari layar
          """

          # -------- helpers --------
          def norm_wx(raw: str) -> str:
              w = (raw or "").lower()
              if "hujan" in w or "gerimis" in w: return "rain"
              if "cerah" in w or "terang" in w or "matahari" in w: return "clear"
              if "mendung" in w or "berawan" in w or "cloud" in w: return "cloudy"
              if "panas" in w or "terik" in w: return "hot"
              if "angin" in w or "berangin" in w or "wind" in w: return "windy"
              return "ok"

          def t_id(t): return {"morning":"pagi","afternoon":"siang","evening":"sore","night":"malem"}.get(t, "")
          
          def wx_phrase(time_id: str, wx: str):
              # variasi pendek, tanpa nyebut hari terus
              pools = {
                "rain": {
                  "pagi":[ "lagi rintik, enak fokus dulu", "hujan pagi, kopi dulu trus jalan", "adem dari pagi, langkah pelan aman" ],
                  "siang":[ "hujan siang, mending indoor", "rintik siang, rapihin kerjaan", "siang adem, konsen lumayan" ],
                  "sore":[ "hujan sore, wrap-up santai", "gerimis sore, kelarin sisa", "udara turun, enak tutup hari" ],
                  "malem":[ "hujan malem, cozy mode", "rintik malem, indoor vibes", "adem malem, enak wind down" ],
                },
                "clear": {
                  "pagi":[ "langit cerah, start mulus", "matahari ramah, langkah ringan", "pagi cerah, niat naik" ],
                  "siang":[ "cerah siang, energi naik", "matahari sopan, gerak enak", "langit biru, fokus kejaga" ],
                  "sore":[ "golden hour, vibes enak", "sore cerah, enak closing task", "cahaya manis, fokus rapi" ],
                  "malem":[ "malem cerah, kepala ringan", "langit tenang, enak chill", "bintang tipis, mood steady" ],
                },
                "cloudy": {
                  "pagi":[ "mendung pagi, no silau", "awan tipis, nyicil enak", "pagi teduh, fokus aman" ],
                  "siang":[ "berawan siang, suhu aman", "mendung halus, konsen jalan", "awan rata, pace stabil" ],
                  "sore":[ "sore teduh, wrap-up mulus", "berawan sore, nyaman gerak", "langit rata, sisa task rapi" ],
                  "malem":[ "malem teduh, santai produktif", "awan kalem, wind down enak", "malem adem, tempo pas" ],
                },
                "hot": {
                  "pagi":[ "pagi udah terik, indoor dulu", "panas naik cepat, hidrasi dulu", "terik pagi, keep it chill" ],
                  "siang":[ "siang terik, mending indoor", "panas nempel, kerja tipis-tipis", "uv nyolot, pilih fokus pendek" ],
                  "sore":[ "sore masih panas, cooldown dulu", "terik sisa, task ringan", "hawanya naik, slow pace" ],
                  "malem":[ "malem hangat, pelan aja", "panas sisa, pilih indoor", "udara nempel, low effort" ],
                },
                "windy": {
                  "pagi":[ "pagi berangin, headset aman", "hembus kenceng, jaketan dikit", "angin pagi, enak indoor" ],
                  "siang":[ "siang berangin, indoor vibes", "hembus siang, nyaman gerak", "angin narik awan, pace stabil" ],
                  "sore":[ "sore berangin, komuter santai", "hembus sore, tutup hari enak", "semilir rame, santai aja" ],
                  "malem":[ "malem berangin, cozy indoor", "hembus malem, comms aman", "angin malam, chill rapi" ],
                },
                "ok": {
                  "pagi":[ "pagi nyaman, start mulus", "hawanya pas, niat jalan", "pagi ringan, fokus enak" ],
                  "siang":[ "siang oke, ritme stabil", "hawanya pas, gerak mantap", "nyaman siang, task rapi" ],
                  "sore":[ "sore enak, closing task", "nyaman sore, wrap-up mulus", "sore halus, pace pas" ],
                  "malem":[ "malem oke, wind down santai", "nyaman malem, rileks rapi", "malem halus, tempo enak" ],
                }
              }
              return random.choice(pools.get(wx, pools["ok"]).get(time_id, pools["ok"]["pagi"]))

          def coin(p=0.5): return random.random() < p

          # ---------- english first (no dash, no “check-in/roll call”) ----------
          def first_en(day, time, is_weekend, wx):
              openers = ["yoooow", "heyyy", "yo", "sup", "hey team", "morning fam", "what's good"]
              labels = {
                "morning":[ f"{day} morning crew", f"{day} morning", f"{day} a.m." ],
                "afternoon":[ f"{day} afternoon squad", f"{day} afternoon", f"{day} midday" ],
                "evening":[ f"{day} evening crew", f"{day} evening", f"{day} dusk" ],
                "night":[ f"{day} night squad", f"{day} night", f"{day} late" ],
              }
              # hooks tanpa “x or y” spam
              hooks_general = [
                "staying dry" if wx=="rain" else "keeping it steady",
                "coffee ready",
                "heads on",
                "feeling sharp",
                "locking in",
                "keeping it light",
              ]
              hooks_alt = [
                "who's up",
                "you good",
                "we moving",
                "focus first",
                "one step at a time",
              ]
              lead = (random.choice(openers) + " " if coin(0.6) else "") + random.choice(labels.get(time, [f"{day} {time}"]))
              hook = random.choice(hooks_general + hooks_alt)
              # beberapa varian bentuk kalimat
              if coin(0.5):
                  sent = f"{lead}, {hook}?"
              else:
                  sent = f"{lead} — {hook}?"  # nanti dash disanitasi ke koma
              return sent

          # ---------- indo second (sinkron cuaca & konteks) ----------
          def second_id(day, time, is_weekend, wx):
              games = ["valorant","mobile legends","roblox"]
              tind = t_id(time)
              wxline = wx_phrase(tind, wx)
              if time=="morning" and not is_weekend:
                  later = random.choice(["nanti sore","abis pulang","malem nanti","abis tugas kelar"])
                  lines = [
                    f"prioritas tugas dulu, game {later}",
                    f"fokus sekolah atau kerja dulu, {random.choice(games)} {later}",
                    f"rapihin to-do dulu, {random.choice(games)} {later}",
                    f"serius bentar, baru santai {random.choice(games)} {later}",
                  ]
                  starter = random.choice(["yuk","yuuuk","yok","gas","gaskeun","ayoo"])
                  return f"{starter} {wxline}, {random.choice(lines)}" if coin(0.5) else f"{starter} {random.choice(lines)}, {wxline}"
              # other times
              if wx in ["rain","hot","windy","cloudy"]:
                  recs = [
                    f"mabar {random.choice(games)} santai",
                    f"{random.choice(games)} classic dulu",
                    f"voice chat {random.choice(games)} sambil ngemil",
                    f"aim training tipis-tipis",
                  ]
              else:
                  recs = [
                    f"{random.choice(games)} session bareng",
                    f"push tipis di {random.choice(games)}",
                    f"quick match {random.choice(games)}",
                    f"comms on, {random.choice(games)} yuk",
                  ]
              starter = random.choice(["yuk","yuuuk","yok","gas","gaskeun","ayoo"])
              tag = " <@&1374047008829997157>" if is_weekend else ""
              return f"{starter}{tag} {wxline}, {random.choice(recs)}" if coin(0.5) else f"{starter}{tag} {random.choice(recs)}, {wxline}"

          def sanitize(s: str) -> str:
              # hilangin dash “—/–” biar ga kerasa ai
              s = s.replace("—", ",").replace("–", ",")
              s = re.sub(r"\s+,", ",", s)
              s = re.sub(r"\s+", " ", s).strip()
              s = s.lower()
              return s

          def build():
              day = os.environ.get("CURRENT_DAY","today").lower()
              time = os.environ.get("TIME_OF_DAY","day")
              is_weekend = os.environ.get("IS_WEEKEND","false").lower()=="true"
              wx = norm_wx(os.environ.get("WEATHER_INFO",""))
              first = first_en(day, time, is_weekend, wx)
              if "?" not in first: first = first.rstrip(".") + "?"
              second = second_id(day, time, is_weekend, wx)
              msg = sanitize(first + " " + second)
              # guard english-only untuk kalimat 1
              first_part = msg.split("?",1)[0]
              if re.search(r"\b(yuk|yuuuk|yok|gas|gaskeun|atau|dulu|gini|banget|aja|sama|juga|kali|deh|dong|lah|nih|yg|kuy|mabar|anjay|wkwk|njir|pas|udah|ntar|besok|gue|gua|kamu|lu)\b", first_part):
                  # fallback: paksa english pendek
                  msg = re.sub(r"^.*?\?", f"{day} {time} crew, keep it steady? ", msg)
              # bersihin emoji trailing
              msg = re.sub(r"[🎮💯🔥⚡✨🎯💪🚀☕📚]+$", "", msg).strip()
              return msg

          try:
              # small prompt for gemini (optional)
              day = os.environ.get("CURRENT_DAY","today").lower()
              time = os.environ.get("TIME_OF_DAY","day")
              is_weekend = os.environ.get("IS_WEEKEND","false").lower()=="true"
              api_key = os.environ.get("GEMINI_API_KEY")
              if api_key:
                  if time=="morning" and not is_weekend:
                      prompt = f"""write a discord greeting for {day} morning (weekday), 2 sentences, all lowercase.
              sentence 1: english only, short and natural (no 'check in', no em dash). end with '?'.
              sentence 2: indonesian, productivity first then gaming later (valorant/mobile legends/roblox) + natural weather clause. no laughter slang. write only the greeting."""
                  elif time=="morning" and is_weekend:
                      prompt = f"""write a discord greeting for {day} morning (weekend), 2 sentences, all lowercase.
              sentence 1: english only, short and natural (no 'check in', no em dash). end with '?'.
              sentence 2: indonesian, start with yuk/yuuuk/yok/gas/gaskeun + <@&1374047008829997157>, include one game and a natural weather clause. write only the greeting."""
                  else:
                      prompt = f"""write a discord greeting for {day} {time}, 2 sentences, all lowercase.
              sentence 1: english only, short and natural (no 'check in', no em dash). end with '?'.
              sentence 2: indonesian, invite to valorant/mobile legends/roblox + natural weather clause. no laughter slang. write only the greeting."""
                  url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
                  payload = {"contents":[{"parts":[{"text":prompt}]}],"generationConfig":{"temperature":0.66,"maxOutputTokens":110,"topP":0.9}}
                  r = requests.post(url, json=payload, timeout=15)
                  if r.status_code==200:
                      data = r.json()
                      cand = (data.get("candidates") or [None])[0]
                      if cand and cand.get("finishReason")!="MAX_TOKENS":
                          parts = cand.get("content",{}).get("parts") or []
                          if parts and "text" in parts[0]:
                              t = parts[0]["text"].strip().lower()
                              t = re.sub(r"\*+|\n+"," ",t); t = " ".join(t.split())
                              if "?" not in t: t = re.sub(r"\.", "?", t, count=1)
                              msg = sanitize(t)
                              # guard gaming di kalimat 1 (weekday pagi)
                              if time=="morning" and not is_weekend:
                                  first_part = msg.split("?",1)[0]
                                  if re.search(r"\b(apex|valorant|mobile legends|roblox|gaming|main|mabar|push rank|competitive)\b", first_part):
                                      raise ValueError("gaming in first sentence")
                              # guard dash sisa
                              if "—" in msg or "–" in msg:
                                  msg = sanitize(msg)
                              if 60 <= len(msg) <= 200:
                                  open("/tmp/ai_response.txt","w",encoding="utf-8").write(msg)
                                  print("✅ gemini ok"); sys.exit(0)
              # fallback local
              msg = build()
              open("/tmp/ai_response.txt","w",encoding="utf-8").write(msg)
              print("✅ local generator ok"); sys.exit(0)
          except Exception as e:
              print("⚠️", e)
              msg = build()
              open("/tmp/ai_response.txt","w",encoding="utf-8").write(msg)
              print("✅ exception fallback ok"); sys.exit(0)
          EOL

          # ---------- payload script (unchanged) ----------
          cat > /tmp/discord_script.py << 'EOL'
          import json, os
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', "what's good everyone!")
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          desc = (desc_raw or '').lower()
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {"url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"},
              "footer": {"text": "chill gaming vibes", "icon_url": "https://files.catbox.moe/npfh4e.jpg"},
              "timestamp": timestamp
          }
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump({"embeds": [embed]}, f, ensure_ascii=False)
          print("✅ payload created")
          EOL

          # ---------- run ----------
          echo "🧪 executing generator..."
          python3 /tmp/fixed_contextual_generator.py
          
          # ---------- process result ----------
          if [[ -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 generated: $AI_TEXT"
            if [[ ${#AI_TEXT} -gt 40 && ${#AI_TEXT} -lt 250 ]]; then
              if [[ "$CONTEXT" == "weekend" ]]; then
                HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
                if [[ -z "$HAS_TAG" ]]; then
                  if [[ "$AI_TEXT" == *"?"* ]]; then
                    AI_TEXT=$(echo "$AI_TEXT" | sed 's/? /? <@&1374047008829997157> /')
                  else
                    AI_TEXT="$AI_TEXT <@&1374047008829997157>"
                  fi
                fi
              else
                AI_TEXT=$(echo "$AI_TEXT" | sed 's/<@&[0-9]*>//g')
              fi
              # style fixes (tanpa dash)
              AI_TEXT=$(echo "$AI_TEXT" | tr '–—' ',')
              AI_TEXT=$(echo "$AI_TEXT" | sed 's/school\/work/school or work/gI' | sed 's/sekolah\/kerja/sekolah atau kerja/gI')
              AI_TEXT=$(echo "$AI_TEXT" | sed -E 's/[🎮💯🔥⚡✨🎯💪🚀☕📚]+$//')
              AI_TEXT=$(echo "$AI_TEXT" | tr -s ' ')
              [ ${#AI_TEXT} -gt 200 ] && AI_TEXT="${AI_TEXT:0:190}..."
              DESC_RAW="$AI_TEXT"; USE_AI=true
              echo "✅ text accepted (${#AI_TEXT} chars)"
            else
              echo "❌ invalid length (${#AI_TEXT})"; USE_AI=false
            fi
          else
            echo "❌ no ai response"; USE_AI=false
          fi
          
          # ---------- bash fallback (ringkas, no dash) ----------
          if [[ "$USE_AI" != "true" ]]; then
            DAY=$(echo "$CURRENT_DAY" | tr '[:upper:]' '[:lower:]')
            case "$WEATHER_INFO" in
              *hujan*|*gerimis*) WX="rain" ;;
              *cerah*|*terang*|*matahari*) WX="clear" ;;
              *mendung*|*berawan*|*cloud*) WX="cloudy" ;;
              *panas*|*terik*) WX="hot" ;;
              *angin*|*berangin*|*wind*) WX="windy" ;;
              *) WX="ok" ;;
            esac
            # english first (no dash)
            case "$TIME_OF_DAY" in
              morning) FIRST="$(shuf -e "yoooow $DAY morning crew, staying dry?" "hey team $DAY morning, coffee ready?" "$DAY morning, keep it steady?" -n1)" ;;
              afternoon) FIRST="$(shuf -e "$DAY afternoon squad, keeping it steady?" "$DAY afternoon crew, heads on?" -n1)" ;;
              evening) FIRST="$(shuf -e "$DAY evening crew, dinner first?" "$DAY evening, feeling sharp?" -n1)" ;;
              night) FIRST="$(shuf -e "$DAY night squad, wind down?" "$DAY night, we moving?" -n1)" ;;
            esac
            # wx line
            case "$TIME_OF_DAY-$WX" in
              morning-rain) WXLINE="lagi rintik, enak fokus dulu" ;;
              afternoon-rain) WXLINE="hujan siang, mending indoor" ;;
              evening-rain) WXLINE="hujan sore, wrap-up santai" ;;
              night-rain) WXLINE="hujan malem, cozy mode" ;;
              morning-clear) WXLINE="langit cerah, start mulus" ;;
              afternoon-clear) WXLINE="cerah siang, energi naik" ;;
              evening-clear) WXLINE="golden hour, vibes enak" ;;
              night-clear) WXLINE="malem cerah, kepala ringan" ;;
              morning-cloudy) WXLINE="mendung pagi, no silau" ;;
              afternoon-cloudy) WXLINE="berawan siang, nyaman gerak" ;;
              evening-cloudy) WXLINE="sore teduh, wrap-up mulus" ;;
              night-cloudy) WXLINE="malem teduh, santai produktif" ;;
              morning-hot) WXLINE="pagi terik, indoor dulu" ;;
              afternoon-hot) WXLINE="siang terik, hemat tenaga" ;;
              evening-hot) WXLINE="sore masih panas, cooldown dulu" ;;
              night-hot) WXLINE="malem hangat, pelan aja" ;;
              morning-windy) WXLINE="pagi berangin, headset aman" ;;
              afternoon-windy) WXLINE="siang berangin, indoor vibes" ;;
              evening-windy) WXLINE="sore berangin, komuter santai" ;;
              night-windy) WXLINE="malem berangin, cozy indoor" ;;
              *) WXLINE="cuaca oke, pace enak" ;;
            esac
            if [[ "$TIME_OF_DAY" = "morning" && "$CONTEXT" != "weekend" ]]; then
              GAME=$(shuf -e valorant "mobile legends" roblox -n1)
              LATER=$(shuf -e "nanti sore" "abis pulang" "malem nanti" "abis tugas kelar" -n1)
              SECOND=$(shuf -e "yuk $WXLINE, prioritas tugas dulu, $GAME $LATER" "yok $WXLINE, fokus sekolah atau kerja dulu, $GAME $LATER" -n1)
            else
              GAME=$(shuf -e valorant "mobile legends" roblox -n1)
              TAG=""; [[ "$CONTEXT" = "weekend" ]] && TAG=" <@&1374047008829997157>"
              SECOND=$(shuf -e "yuk $WXLINE, mabar $GAME santai$TAG" "gas $WXLINE, quick match $GAME$TAG" -n1)
            fi
            DESC_RAW="$FIRST $SECOND"
          fi
          
          # titles & thumbs
          case "$TIME_OF_DAY" in
            "morning")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="good morning skyers"; THUMB="2614"; else TITLE="yoww morning skye squad"; THUMB="2600"; fi
              ;;
            "afternoon")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="afternoon vibes skyers"; THUMB="1f327"; else TITLE="good afternoon skye squad"; THUMB="1f343"; fi
              ;;
            "evening")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="evening chill skyers"; THUMB="1f327"; else TITLE="yoww evening skye squad"; THUMB="1f307"; fi
              ;;
            "night")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="rainy night skyers"; THUMB="1f327"; else TITLE="good night skye squad"; THUMB="1f989"; fi
              ;;
          esac
          
          # outputs
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
          
          # Simple sticker selection
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Skye community greeting complete!"
name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="🌧️"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="🌦️"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="🔥"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="❄️"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="🍃"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="☁️"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="☀️"
          else
            WEATHER_EMOJI="🌤️"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Generate AI Greeting
        id: ai_generation
        env:
          CURRENT_DAY: ${{ steps.context.outputs.CURRENT_DAY }}
          TIME_OF_DAY: ${{ steps.context.outputs.TYPE }}
          CONTEXT: ${{ steps.context.outputs.CONTEXT }}
          WEATHER_INFO: ${{ steps.weather.outputs.WEATHER_INFO }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🤖 Generating AI greeting with DYNAMIC approach..."

          # derive weekend flag in shell
          if [ "$CONTEXT" = "weekend" ]; then
            export IS_WEEKEND=true
          else
            export IS_WEEKEND=false
          fi
          
          # Create DYNAMIC Python script
          cat > /tmp/fixed_contextual_generator.py << 'EOL'
          import json, requests, os, sys, re, random

          """
          SLANG_GLOSSARY (arti asli biar konteks bener):
          indo:
            - "yuk/yuuuk/yok/ayoo": ajakan halus buat mulai
            - "gas": ayo langsung jalan
            - "gaskeun": push terus tanpa ragu
            - "anjay/anjayyy": kagum/terkejut (hindari untuk cuaca)
            - "gileee": takjub santai
            - "gacorrr": perform bagus/ramai (voice/game), bukan untuk cuaca
            - "wkwkwk": ketawa tulisan (hindari di frasa cuaca)
            - "njirrr": ekspresi kaget (hindari di frasa cuaca)
            - "ygy": "ya ga sih"
            - "ytta": "yang tau tau aja" (inside joke; hindari di cuaca)
          english:
            - "crew/squad/gang/team": panggilan komunal santai
            - "vibe": suasana/feel
            - "grind": kerja keras/latihan intens
            - "queue (up)": antri match
            - "dialed in": fokus siap kerja
            - "buffering/booting": masih pemanasan
            - "touch grass": keluar sebentar dari layar
            - "roll call": absen/cek kehadiran
          """

          # ---------- helpers ----------
          def normalize_weather(raw):
              w = (raw or "").lower()
              if "hujan" in w or "gerimis" in w: return "rain"
              if "cerah" in w or "terang" in w or "matahari" in w: return "clear"
              if "mendung" in w or "berawan" in w or "cloud" in w: return "cloudy"
              if "panas" in w or "terik" in w: return "hot"
              if "angin" in w or "berangin" in w or "wind" in w: return "windy"
              return "ok"
          
          def weather_phrase(day_indo, wx):
              pools = {
                  "rain": [
                      f"hujan dari pagi, enak fokus di {day_indo}",
                      f"grimis tipis, ngopi dulu trus gas di {day_indo}",
                      f"adem bgt, fokus jalan di {day_indo}",
                      f"hawa sejuk, ritme pelan aman di {day_indo}",
                  ],
                  "clear": [
                      f"langit cerah, mood booster di {day_indo}",
                      f"matahari ramah, energi nambah di {day_indo}",
                      f"cerah mantep, niat kerja sekolah naik di {day_indo}",
                      f"cuaca cerah, langkah ringan di {day_indo}",
                  ],
                  "cloudy": [
                      f"mendung santai, no silau di {day_indo}",
                      f"berawan teduh, nyaman gerak di {day_indo}",
                      f"langit teduh, fokus rapi di {day_indo}",
                      f"awan tipis, pace stabil di {day_indo}",
                  ],
                  "hot": [
                      f"terik pol, mending indoor di {day_indo}",
                      f"panas nempel, hidrasi dulu di {day_indo}",
                      f"cuaca panas, atur tenaga di {day_indo}",
                      f"matahari galak, keep it chill di {day_indo}",
                  ],
                  "windy": [
                      f"angin kenceng dikit, jaketan oke di {day_indo}",
                      f"berangin, semoga sinyal aman di {day_indo}",
                      f"hembus kenceng, indoor vibes di {day_indo}",
                      f"angin nyapu kota, tetap santai di {day_indo}",
                  ],
                  "ok": [
                      f"cuaca lagi oke, pace enak di {day_indo}",
                      f"hawanya pas, gerak mulus di {day_indo}",
                      f"nyaman bener di {day_indo}",
                      f"stabil aman di {day_indo}",
                  ],
              }
              return random.choice(pools.get(wx, pools["ok"]))

          def coin(p=0.5): return random.random() < p

          # ---------- dynamic english first sentence ----------
          def english_first_sentence(day, time, is_weekend, wx):
              # vocab pools
              openers = ["yoooow", "wassuuup", "heyyy", "yo", "sup", "oi", "hey team", "morning fam", "what's good", "rise n shine"]
              day_labels = [
                  f"{day} morning crew", f"{day} a.m. squad", f"{day} early shift",
                  f"{day} check-in", f"{day} roll call", f"{day} people"
              ] if time == "morning" else [
                  f"{day} {time} squad", f"{day} {time} crew", f"{day} {time} team",
                  f"{day} {time} check-in", f"{day} {time} roll call"
              ]
              # intent bits
              energy_pairs = [
                  "dialed in or still booting",
                  "locked in or still waking up",
                  "focused already or easing in",
                  "running hot or saving battery",
                  "sharp today or slow start"
              ]
              plan_pairs = [
                  "sprint or steady pace",
                  "deep work or light warm-up",
                  "heads-down or quick sync",
                  "clear plan or winging it",
                  "calendar-led or vibe-led"
              ]
              weekend_pairs = [
                  "marathon or micro-queue",
                  "full stack of games or errands first",
                  "team stack or solo cruise",
                  "rank climb or just vibe",
                  "queue up or touch grass first"
              ]
              rain_hooks = [
                  "rainy start—umbrella ready or trusting the clouds",
                  "grey skies—mood steady or coffee needed",
                  "wet morning—commute smooth or delay strategy",
                  "drizzly vibes—heads-down or hold up"
              ]
              neutral_hooks = [
                  "how's the vibe—quiet focus or light chaos",
                  "what's the move—plan locked or freestyling",
                  "status check—ahead of schedule or catching up",
                  "pulse check—energy high or mid"
              ]
              
              bits = []
              # maybe put label first or opener first
              if coin(0.6):
                  bits.append(random.choice(openers))
                  bits.append(random.choice(day_labels))
              else:
                  bits.append(random.choice(day_labels))
              
              # hook by context
              if time == "morning":
                  if not is_weekend and wx == "rain" and coin(0.7):
                      hook = random.choice(rain_hooks)
                  elif is_weekend:
                      hook = random.choice(weekend_pairs)
                  else:
                      hook = random.choice(energy_pairs + plan_pairs + neutral_hooks)
              else:
                  # non-morning
                  if is_weekend and coin(0.5):
                      hook = random.choice(weekend_pairs)
                  else:
                      hook = random.choice(energy_pairs + plan_pairs + neutral_hooks)
              
              first = " ".join(bits) + (", " if bits else "") + hook
              if not first.endswith("?"): first += "?"
              return first

          # ---------- indo second sentence (context-aware) ----------
          def indo_second_sentence(day_indo, time, is_weekend, wx):
              # activity pools diset sesuai cuaca+context
              # weekday morning: no explicit gaming now, promise later
              if time == "morning" and not is_weekend:
                  later_slots = ["nanti sore", "ntaran abis pulang", "malem nanti", "abis tugas kelar"]
                  # kalau hujan → tonjolkan fokus/indoor
                  if wx == "rain" or wx == "cloudy":
                      focus_lines = [
                          "rapihin to-do dulu, {} jadi reward".format(random.choice(["valorant", "mobile legends", "roblox"])),
                          "fokus sekolah atau kerja dulu, {} {}".format(random.choice(["valorant", "mobile legends", "roblox"]), random.choice(later_slots)),
                          "gas materi dulu, game-nya {}".format(random.choice(later_slots)),
                          "prioritas tugas dulu, baru santai game {}".format(random.choice(later_slots)),
                      ]
                  elif wx == "hot":
                      focus_lines = [
                          "indoor mode dulu biar adem, {} {}".format(random.choice(["valorant", "mobile legends", "roblox"]), random.choice(later_slots)),
                          "hemat tenaga dulu, {} {}".format(random.choice(["valorant", "mobile legends", "roblox"]), random.choice(later_slots)),
                          "kerjain inti dulu, game {}".format(random.choice(later_slots)),
                          "serius dulu bentar, lalu game {}".format(random.choice(later_slots)),
                      ]
                  else:  # clear/ok/windy
                      focus_lines = [
                          "langkah pelan tapi pasti, {} {}".format(random.choice(["valorant", "mobile legends", "roblox"]), random.choice(later_slots)),
                          "produktif dulu, game {}".format(random.choice(later_slots)),
                          "tuntasin target dulu, {} {}".format(random.choice(["valorant", "mobile legends", "roblox"]), random.choice(later_slots)),
                          "sekola kerja dulu, game {}".format(random.choice(later_slots)),
                      ]
                  starter = random.choice(["yuk", "yuuuk", "yok", "gas", "gaskeun", "ayoo"])
                  wx_line = weather_phrase(day_indo, wx)
                  # variasi posisi cuaca
                  if coin(0.5):
                      return f"{starter} {random.choice(focus_lines)}, {wx_line}"
                  else:
                      return f"{starter} {wx_line}, {random.choice(focus_lines)}"
              
              # weekend morning: gaming ok (indoor kalau hujan)
              if time == "morning" and is_weekend:
                  games = ["valorant", "mobile legends", "roblox"]
                  acts_rain = [
                      f"pemanasan aim ringan dulu di {random.choice(games)}",
                      f"classic {random.choice(games)} sambil ngopi",
                      f"chill {random.choice(games)} dulu biar hangat",
                  ]
                  acts_clear = [
                      f"quick {random.choice(games)} sambil sarapan",
                      f"unrated {random.choice(games)} tipis-tipis",
                      f"adventure {random.choice(games)} santai",
                  ]
                  act = random.choice(acts_rain if wx in ["rain","cloudy"] else acts_clear)
                  starter = random.choice(["yuk", "yuuuk", "yok", "gas", "gaskeun", "ayoo"])
                  tag = " <@&1374047008829997157>"
                  wx_line = weather_phrase(day_indo, wx)
                  if coin(0.5):
                      return f"{starter}{tag} {act}, {wx_line}"
                  else:
                      return f"{starter}{tag} {wx_line}, {act}"
              
              # afternoon/evening/night: gaming ok; arahkan indoor saat hujan/panas
              games = ["valorant", "mobile legends", "roblox"]
              if wx in ["rain","hot","windy","cloudy"]:
                  recs = [
                      f"mabar {random.choice(games)} santai",
                      f"{random.choice(games)} classic dulu",
                      f"voice chat {random.choice(games)} sambil ngemil",
                      f"aim training tipis-tipis",
                  ]
              else:  # clear/ok
                  recs = [
                      f"{random.choice(games)} session bareng",
                      f"push tipis di {random.choice(games)}",
                      f"quick match {random.choice(games)}",
                      f"comms on, {random.choice(games)} yuk",
                  ]
              starter = random.choice(["yuk", "yuuuk", "yok", "gas", "gaskeun", "ayoo"])
              tag = " <@&1374047008829997157>" if is_weekend else ""
              wx_line = weather_phrase(day_indo, wx)
              if coin(0.5):
                  return f"{starter}{tag} {random.choice(recs)}, {wx_line}"
              else:
                  return f"{starter}{tag} {wx_line}, {random.choice(recs)}"

          def create_dynamic_message():
              day = os.environ.get('CURRENT_DAY', 'today').lower()
              time = os.environ.get('TIME_OF_DAY', 'day')
              weather_raw = os.environ.get('WEATHER_INFO', '')
              is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
              
              wx = normalize_weather(weather_raw)
              day_indo_map = {'monday':'senin','tuesday':'selasa','wednesday':'rabu','thursday':'kamis','friday':'jumat','saturday':'sabtu','sunday':'minggu'}
              day_indo = day_indo_map.get(day, day)
              
              first = english_first_sentence(day, time, is_weekend, wx)
              second = indo_second_sentence(day_indo, time, is_weekend, wx)
              
              msg = (first + " " + second).strip().lower()
              msg = re.sub(r"\s+", " ", msg)
              return msg
          
          try:
              day = os.environ.get('CURRENT_DAY', 'today').lower()
              time = os.environ.get('TIME_OF_DAY', 'day')
              is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
              
              # prompts ringkas buat gemini (hindari klise tertentu)
              if time == 'morning' and not is_weekend:
                  prompt = f"""write a discord greeting for {day} morning (weekday), 2 sentences, all lowercase.
          sentence 1: english only, dynamic phrasing (avoid 'productivity mode or survival mode', avoid 'still loading'), end with '?'.
          sentence 2: indonesian, encourage productivity first then mention gaming later (valorant/mobile legends/roblox) + natural weather clause (no laughter slang). write only the greeting."""
              elif time == 'morning' and is_weekend:
                  prompt = f"""write a discord greeting for {day} morning (weekend), 2 sentences, all lowercase.
          sentence 1: english only, dynamic phrasing, end with '?'.
          sentence 2: indonesian, start with yuk/yuuuk/yok/gas/gaskeun, include <@&1374047008829997157>, pick one game (valorant/mobile legends/roblox), add natural weather clause. write only the greeting."""
              else:
                  prompt = f"""write a discord greeting for {day} {time}, 2 sentences, all lowercase.
          sentence 1: english only, dynamic phrasing, end with '?'.
          sentence 2: indonesian, invite to valorant/mobile legends/roblox + natural weather clause (no laughter slang). write only the greeting."""
              
              api_key = os.environ.get('GEMINI_API_KEY')
              
              if api_key:
                  url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
                  payload = {"contents":[{"parts":[{"text":prompt}]}], "generationConfig":{"temperature":0.72,"maxOutputTokens":110,"topP":0.9}}
                  
                  print("📡 trying gemini prompt...")
                  resp = requests.post(url, json=payload, timeout=15)
                  if resp.status_code == 200:
                      data = resp.json()
                      cand = (data.get("candidates") or [None])[0]
                      if cand and cand.get("finishReason") != "MAX_TOKENS":
                          parts = cand.get("content",{}).get("parts") or []
                          if parts and "text" in parts[0]:
                              t = parts[0]["text"].strip().lower()
                              t = re.sub(r"\*+|\n+"," ",t); t = " ".join(t.split())
                              if "?" not in t: t = re.sub(r"\.", "?", t, count=1)
                              # split
                              fs = t.split("?",1)
                              first = fs[0]
                              second = fs[1].strip() if len(fs)>1 else ""
                              
                              ok = True
                              # no gaming in sentence 1 if weekday morning
                              if time=="morning" and not is_weekend:
                                  if any(w in first for w in ['apex','valorant','mobile legends','roblox','gaming','main','mabar','push rank','competitive']): ok=False
                              # english-only guard
                              if any(tok in first.split() for tok in ['yuk','yuuuk','yok','gaskeun','gas','atau','dulu','gini','banget','aja','sama','juga','kali','deh','dong','lah','nih','yg','kuy','mabar','anjay','wkwk','njir','pas','udah','ntar','besok','gue','gua','kamu','lu']): ok=False
                              # weather clause sanity
                              if re.search(r'(cuaca|hujan|cerah|mendung|berawan|panas|terik|angin)[^.!?]{0,80}(kocak+k*|wkwk(wk)*|ytta)', second): ok=False
                              
                              rebuilt = (first.strip()+"? "+second.strip()).strip()
                              rebuilt = re.sub(r"\s+"," ",rebuilt)
                              if ok and 60 <= len(rebuilt) <= 200:
                                  with open('/tmp/ai_response.txt','w',encoding='utf-8') as f: f.write(rebuilt)
                                  print("✅ gemini ok")
                                  sys.exit(0)
              
              # fallback: our dynamic generator
              msg = create_dynamic_message()
              with open('/tmp/ai_response.txt','w',encoding='utf-8') as f: f.write(msg)
              print("✅ dynamic fallback ok")
              sys.exit(0)
          
          except Exception as e:
              print(f"⚠️ exception: {e}")
              msg = create_dynamic_message()
              with open('/tmp/ai_response.txt','w',encoding='utf-8') as f: f.write(msg)
              print("✅ exception fallback ok")
              sys.exit(0)
          EOL

          # Create Discord payload script (unchanged)
          cat > /tmp/discord_script.py << 'EOL'
          import json, os
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', "what's good everyone!")
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          desc = (desc_raw or '').lower()
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {"url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"},
              "footer": {"text": "chill gaming vibes", "icon_url": "https://files.catbox.moe/npfh4e.jpg"},
              "timestamp": timestamp
          }
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump({"embeds": [embed]}, f, ensure_ascii=False)
          print("✅ payload created")
          EOL

          # Execute
          echo "🧪 Executing generator..."
          python3 /tmp/fixed_contextual_generator.py
          
          # Process result
          if [[ -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 Generated text: $AI_TEXT"
            if [[ ${#AI_TEXT} -gt 40 && ${#AI_TEXT} -lt 250 ]]; then
              if [[ "$CONTEXT" == "weekend" ]]; then
                HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
                if [[ -z "$HAS_TAG" ]]; then
                  echo "⚠️ adding weekend tag..."
                  if [[ "$AI_TEXT" == *"?"* ]]; then
                    AI_TEXT=$(echo "$AI_TEXT" | sed 's/? /? <@&1374047008829997157> /')
                  else
                    AI_TEXT="$AI_TEXT <@&1374047008829997157>"
                  fi
                fi
              else
                AI_TEXT=$(echo "$AI_TEXT" | sed 's/<@&[0-9]*>//g' | sed 's/  / /g')
              fi
              # style fixes
              AI_TEXT=$(echo "$AI_TEXT" | sed 's/school\/work/school or work/gI' | sed 's/sekolah\/kerja/sekolah atau kerja/gI')
              AI_TEXT=$(echo "$AI_TEXT" | sed -E 's/[🎮💯🔥⚡✨🎯💪🚀☕📚]+$//')
              [ ${#AI_TEXT} -gt 200 ] && AI_TEXT="${AI_TEXT:0:190}..."
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "✅ AI text accepted (${#AI_TEXT} chars)"
            else
              echo "❌ invalid length (${#AI_TEXT})"
              USE_AI=false
            fi
          else
            echo "❌ no AI response file"
            USE_AI=false
          fi
          
          # Fallback (still dynamic, synced dgn cuaca)
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using dynamic fallback in bash..."
            WEATHER_MENTION="$WEATHER_INFO"
            DAY_LOWER=$(echo "$CURRENT_DAY" | tr '[:upper:]' '[:lower:]')
            # simple wx normalize
            if echo "$WEATHER_MENTION" | grep -qi "hujan\|gerimis"; then WX="rain"
            elif echo "$WEATHER_MENTION" | grep -qi "cerah\|terang\|matahari"; then WX="clear"
            elif echo "$WEATHER_MENTION" | grep -qi "mendung\|berawan\|cloud"; then WX="cloudy"
            elif echo "$WEATHER_MENTION" | grep -qi "panas\|terik"; then WX="hot"
            elif echo "$WEATHER_MENTION" | grep -qi "angin\|berangin\|wind"; then WX="windy"
            else WX="ok"; fi
            # weather line
            case "$WX" in
              rain)  WX_LINE="hujan dari pagi, enak fokus di ${DAY_LOWER}" ;;
              clear) WX_LINE="langit cerah, mood booster di ${DAY_LOWER}" ;;
              cloudy) WX_LINE="mendung santai, no silau di ${DAY_LOWER}" ;;
              hot)   WX_LINE="terik pol, mending indoor di ${DAY_LOWER}" ;;
              windy) WX_LINE="angin kenceng dikit, indoor vibes di ${DAY_LOWER}" ;;
              *)     WX_LINE="cuaca lagi oke, pace enak di ${DAY_LOWER}" ;;
            esac
            # activity line (weekday morning no game now)
            if [ "$TIME_OF_DAY" = "morning" ] && [ "$CONTEXT" != "weekend" ]; then
              GAME=$(shuf -e valorant "mobile legends" roblox -n1)
              LATER=$(shuf -e "nanti sore" "ntaran abis pulang" "malem nanti" "abis tugas kelar" -n1)
              ACT=$(shuf -e \
                "rapihin to-do dulu, ${GAME} ${LATER}" \
                "fokus sekolah atau kerja dulu, ${GAME} ${LATER}" \
                "gas materi dulu, game-nya ${LATER}" \
                "prioritas tugas dulu, baru santai game ${LATER}" -n1)
              START=$(shuf -e yuk yuuuk yok gas gaskeun ayoo -n1)
              if [ $((RANDOM%2)) -eq 0 ]; then
                DESC_RAW="${START} ${ACT}, ${WX_LINE}"
              else
                DESC_RAW="${START} ${WX_LINE}, ${ACT}"
              fi
            else
              GAME=$(shuf -e valorant "mobile legends" roblox -n1)
              ACT=$(shuf -e \
                "mabar ${GAME} santai" \
                "${GAME} classic dulu" \
                "voice chat ${GAME} sambil ngemil" \
                "aim training tipis-tipis" \
                "${GAME} session bareng" \
                "push tipis di ${GAME}" \
                "quick match ${GAME}" \
                "comms on, ${GAME} yuk" -n1)
              START=$(shuf -e yuk yuuuk yok gas gaskeun ayoo -n1)
              TAG=""
              [ "$CONTEXT" = "weekend" ] && TAG=" <@&1374047008829997157>"
              if [ $((RANDOM%2)) -eq 0 ]; then
                DESC_RAW="${START}${TAG} ${ACT}, ${WX_LINE}"
              else
                DESC_RAW="${START}${TAG} ${WX_LINE}, ${ACT}"
              fi
            fi
            # english first (very short, dynamic)
            FIRST=$(shuf -e \
              "yoooow ${DAY_LOWER} morning crew, dialed in or still booting" \
              "hey team ${DAY_LOWER} check-in, sprint or steady pace" \
              "${DAY_LOWER} a.m. squad, coffee secured or still waking up" \
              "${DAY_LOWER} roll call, focused already or easing in" -n1)
            DESC_RAW="${FIRST}? ${DESC_RAW}"
            echo "🎯 Fallback built: ${DESC_RAW}"
          fi
          
          # Titles & thumbs
          case "$TIME_OF_DAY" in
            "morning")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="good morning skyers"; THUMB="2614"; else TITLE="yoww morning skye squad"; THUMB="2600"; fi
              ;;
            "afternoon")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="afternoon vibes skyers"; THUMB="1f327"; else TITLE="good afternoon skye squad"; THUMB="1f343"; fi
              ;;
            "evening")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="evening chill skyers"; THUMB="1f327"; else TITLE="yoww evening skye squad"; THUMB="1f307"; fi
              ;;
            "night")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="rainy night skyers"; THUMB="1f327"; else TITLE="good night skye squad"; THUMB="1f989"; fi
              ;;
          esac
          
          # Outputs
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
          
          # Simple sticker selection
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Skye community greeting complete!"
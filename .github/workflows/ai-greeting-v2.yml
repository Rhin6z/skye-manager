name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT

      - name: Generate AI Greeting
        id: ai_generation
        run: |
          echo "🤖 Generating AI greeting..."
          
          cat > /tmp/prompt.txt << 'EOF'
          You are writing a casual message to your Indonesian gaming friends in the Skye Discord community. Write exactly 2 sentences in ALL LOWERCASE with natural, creative, and non-template language.

          Current Context: TYPE_PLACEHOLDER on CONTEXT_PLACEHOLDER day
          Weather: WEATHER_INFO_PLACEHOLDER
          
          **CRITICAL REQUIREMENTS:**
          
          1. **ALL TEXT MUST BE LOWERCASE** - no capitals anywhere
          2. **NO TEMPLATE LANGUAGE** - sound like a real person, not a bot
          3. **BE CREATIVE** - vary your expressions, don't repeat patterns
          4. **NATURAL FLOW** - like texting close friends
          5. **INCLUDE WEATHER** mention somewhere naturally
          
          **SENTENCE STRUCTURE:**
          
          **Sentence 1 (English casual greeting + mood/activity check):**
          - Start casual: "yooo", "wassup", "heyyyy", "ayooo", "sup"
          - Ask about current state: mood, energy, what they're doing
          - Use extended words: "wassuppppp", "doinggg", "vibeeeee"
          - Examples: "yooo what's everyone up to rn?", "wassuppp how y'all feeling?", "heyyyy what's the vibe tonight?"
          
          **Sentence 2 (Indo-English mix activity invitation with WEEKEND ROLE TAG):**
          
          FOR WEEKEND CONTEXT_PLACEHOLDER: ALWAYS include "<@&1374047008829997157>" (Skye Member role tag) naturally in the sentence
          FOR WEEKDAY: NO role tags, just regular invitation
          
          **TIME-SPECIFIC ACTIVITIES:**
          
          **MORNING (5-12):** Light activities, exercise, breakfast
          - Exercise: "yuk jogging bareng", "olahraga pagi", "stretching dulu"
          - Breakfast: "sarapan bareng", "ngopi dulu", "makan pagi"
          - Light gaming: "main roblox santai", "casual ml"
          - Social: "jalan-jalan pagi", "ke warung", "nongkrong"
          
          **AFTERNOON (12-17):** Social, lunch, moderate activities
          - Lunch: "makan siang bareng", "lunch time", "ke warteg"
          - Social: "nongkrong", "hangout", "ke mall"
          - Gaming: "main ml bareng", "roblox session", "gaming time"
          - Activities: "jalan-jalan", "keliling", "eksplor"
          
          **EVENING (17-21):** Dinner, prime gaming, social
          - Dinner: "dinner bareng", "makan malem", "ke resto"
          - Gaming: "mabar roblox", "push rank ml", "valo session"
          - Social: "nongkrong malem", "voice chat", "cerita-cerita"
          
          **NIGHT (21-5):** Late night gaming, voice chat, chill
          - Gaming: "begadang mabar", "push rank sampai pagi", "marathon valo"
          - Social: "voice chat", "ngobrol", "cerita horror"
          - Activities: "midnight snack", "nonton bareng"
          
          **TONE VARIATIONS (be creative, mix these):**
          - Friendly: "yuk", "siapa mau", "bareng", "sama-sama"
          - Slightly toxic (mild): "males banget", "bocil dimana", "noob semua"
          - Encouraging: "gas", "skuy", "ayo", "semangat"
          - Casual: "santai aja", "chill", "slow", "enjoy"
          
          **WEEKEND ROLE TAGGING EXAMPLES:**
          - "yuk <@&1374047008829997157> mabar roblox"
          - "siapa mau voice chat <@&1374047008829997157>"
          - "<@&1374047008829997157> gas main valo bareng"
          - "ayo <@&1374047008829997157> nongkrong sambil gaming"
          
          **CREATIVE LANGUAGE REQUIREMENTS:**
          - Mix Indonesian slang naturally: "yuk", "gas", "skuy", "males", "santai"
          - Use current gaming terms: "mabar", "push rank", "carry", "noob", "pro"
          - Add personality: jokes, mild roasting, encouragement
          - Include activities beyond gaming when appropriate
          - Make it sound spontaneous, not scripted
          
          Write ONLY the 2 lowercase sentences - creative, natural, engaging!
          EOF
          
          sed -i "s/TYPE_PLACEHOLDER/${{ steps.context.outputs.TYPE }}/g" /tmp/prompt.txt
          sed -i "s/CONTEXT_PLACEHOLDER/${{ steps.context.outputs.CONTEXT }}/g" /tmp/prompt.txt
          sed -i "s/WEATHER_INFO_PLACEHOLDER/${{ steps.weather.outputs.WEATHER_INFO }}/g" /tmp/prompt.txt
          
          AI_SUCCESS=false
          
          python3 << 'PYTHON_EOF'
          import json
          import requests
          import os
          import sys
          import re
          
          try:
              with open('/tmp/prompt.txt', 'r') as f:
                  prompt = f.read().strip()
              
              api_key = os.environ.get('GEMINI_API_KEY')
              if not api_key:
                  sys.exit(1)
              
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent?key={api_key}"
              
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.85,
                      "maxOutputTokens": 200,
                      "topP": 0.9
                  }
              }
              
              response = requests.post(url, json=payload, timeout=25)
              
              if response.status_code == 200:
                  data = response.json()
                  if 'candidates' in data and len(data['candidates']) > 0:
                      ai_text = data['candidates'][0]['content']['parts'][0]['text'].strip()
                      
                      # Clean and extract the message
                      clean_text = re.sub(r'\*\*([^*]+)\*\*', r'\1', ai_text)
                      clean_text = re.sub(r'\*([^*]+)\*', r'\1', clean_text)
                      clean_text = re.sub(r'`([^`]+)`', r'\1', clean_text)
                      
                      # Find the best line (longest substantial content)
                      lines = [line.strip() for line in clean_text.split('\n') if line.strip()]
                      best_line = ""
                      
                      for line in lines:
                          if (len(line) > 30 and 
                              not line.startswith(('**', '#', '-', '*', 'Context:', 'Weather:', 'SENTENCE', 'TIME-BASED')) and
                              not line.lower().startswith(('greeting:', 'message:', 'response:', 'output:'))):
                              if len(line) > len(best_line):
                                  best_line = line
                      
                      if best_line:
                          with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                              f.write(best_line)
                          print("✅ AI generation successful")
                          sys.exit(0)
              
              sys.exit(1)
              
          except Exception as e:
              print(f"❌ AI generation failed: {e}")
              sys.exit(1)
          PYTHON_EOF
          
          if [[ $? -eq 0 && -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 AI generated: $AI_TEXT"
            
            SENTENCE_COUNT=$(echo "$AI_TEXT" | grep -o '[.!?]' | wc -l)
            HAS_ACTIVITY=$(echo "$AI_TEXT" | grep -iE "(roblox|ml|mobile legends|emel|mabar|main|gaming|game|yuk|siapa mau|bareng|nongkrong|jalan|sarapan|makan|dinner|begadang)")
            HAS_QUESTION=$(echo "$AI_TEXT" | grep -E "[?]")
            
            if [[ ${#AI_TEXT} -gt 40 && ${#AI_TEXT} -lt 300 && $SENTENCE_COUNT -ge 2 && -n "$HAS_ACTIVITY" && -n "$HAS_QUESTION" ]]; then
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "✅ AI validated: ${#AI_TEXT} chars, ${SENTENCE_COUNT} sentences"
            else
              echo "⚠️ AI validation failed, using fallback"
              USE_AI=false
            fi
          else
            echo "❌ AI generation failed, using fallback"
            USE_AI=false
          fi
          
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using enhanced fallback system..."
            
            WEATHER_MENTION="${{ steps.weather.outputs.WEATHER_INFO }}"
            declare -a MESSAGES
            
            case "${{ steps.context.outputs.TYPE }}" in
              "morning")
                MESSAGES=(
                  "yooooo morning squad, udah bangun atau masih merem terus? yuk <@&1374047008829997157> olahraga pagi terus sarapan sambil ngobrol, ${WEATHER_MENTION} enak nih!"
                  "wassuppp early birds, energy level gimana pagi ini? siapa mau jogging bareng <@&1374047008829997157> terus main roblox santai, ${WEATHER_MENTION}?"
                  "heyyyy morning legends, udah minum kopi atau masih zombie mode? gas <@&1374047008829997157> stretching dulu terus gaming session, ${WEATHER_MENTION}"
                  "ayooo good morning gamers, fresh atau masih ngantuk parah? yuk <@&1374047008829997157> jalan-jalan pagi sambil planning hari ini, ${WEATHER_MENTION}!"
                )
                if [[ "${{ steps.context.outputs.CONTEXT }}" != "weekend" ]]; then
                  MESSAGES=(
                    "yooooo morning squad, udah bangun atau masih merem terus? yuk olahraga pagi terus sarapan sambil ngobrol, ${WEATHER_MENTION} enak nih!"
                    "wassuppp early birds, energy level gimana pagi ini? siapa mau jogging bareng terus main roblox santai, ${WEATHER_MENTION}?"
                    "heyyyy morning legends, udah minum kopi atau masih zombie mode? gas stretching dulu terus gaming session, ${WEATHER_MENTION}"
                    "ayooo good morning gamers, fresh atau masih ngantuk parah? yuk jalan-jalan pagi sambil planning hari ini, ${WEATHER_MENTION}!"
                  )
                fi
                ;;
              "afternoon")
                MESSAGES=(
                  "yooooo afternoon vibes, productive day atau males total? yuk <@&1374047008829997157> makan siang bareng terus mabar ml, ${WEATHER_MENTION} nih!"
                  "wassuppp midday squad, gimana progress hari ini? siapa mau nongkrong <@&1374047008829997157> sambil chill gaming, ${WEATHER_MENTION}?"
                  "heyyyy afternoon legends, udah lunch atau masih sibuk? gas <@&1374047008829997157> ke mall terus main roblox, ${WEATHER_MENTION}"
                  "sup afternoon crew, capek atau masih semangat? ayo <@&1374047008829997157> hangout sambil push rank, ${WEATHER_MENTION}!"
                )
                if [[ "${{ steps.context.outputs.CONTEXT }}" != "weekend" ]]; then
                  MESSAGES=(
                    "yooooo afternoon vibes, productive day atau males total? yuk makan siang bareng terus mabar ml, ${WEATHER_MENTION} nih!"
                    "wassuppp midday squad, gimana progress hari ini? siapa mau nongkrong sambil chill gaming, ${WEATHER_MENTION}?"
                    "heyyyy afternoon legends, udah lunch atau masih sibuk? gas ke warteg terus main roblox, ${WEATHER_MENTION}"
                    "sup afternoon crew, capek atau masih semangat? ayo santai sambil push rank, ${WEATHER_MENTION}!"
                  )
                fi
                ;;
              "evening")
                MESSAGES=(
                  "yooooo evening squad, how was today overall? winding down <@&1374047008829997157> dinner bareng terus voice chat, ${WEATHER_MENTION} nih!"
                  "wassuppp golden hour gang, tired atau masih energetic? siapa mau <@&1374047008829997157> nongkrong terus mabar valo, ${WEATHER_MENTION}?"
                  "heyyyy evening legends, day was good atau challenging? perfect time <@&1374047008829997157> makan malem sambil gaming, ${WEATHER_MENTION}"
                  "sup evening mood, dinner udah atau masih nyari makan? yuk <@&1374047008829997157> ke resto terus push rank ml, ${WEATHER_MENTION}!"
                )
                if [[ "${{ steps.context.outputs.CONTEXT }}" != "weekend" ]]; then
                  MESSAGES=(
                    "yooooo evening squad, how was today overall? winding down dinner bareng terus main roblox, ${WEATHER_MENTION} nih!"
                    "wassuppp golden hour gang, tired atau masih energetic? siapa mau nongkrong terus mabar valo, ${WEATHER_MENTION}?"
                    "heyyyy evening legends, day was good atau challenging? perfect time makan malem sambil gaming, ${WEATHER_MENTION}"
                    "sup evening mood, dinner udah atau masih nyari makan? yuk santai terus push rank ml, ${WEATHER_MENTION}!"
                  )
                fi
                ;;
              "night")
                MESSAGES=(
                  "yooooo night owls, masih melek atau udah ngantuk? perfect time <@&1374047008829997157> begadang voice chat sambil mabar, ${WEATHER_MENTION} nih!"
                  "wassuppp midnight squad, insomnia atau pilihan stay up? siapa mau <@&1374047008829997157> marathon valo sampai pagi, ${WEATHER_MENTION}?"
                  "heyyyy nocturnal gamers, vibes malam beda ya? gas <@&1374047008829997157> push rank ml sambil ngobrol, ${WEATHER_MENTION}"
                  "sup late night legends, peaceful hours nih bocil udah tidur! ayo <@&1374047008829997157> nonton bareng sambil gaming, ${WEATHER_MENTION}?"
                )
                if [[ "${{ steps.context.outputs.CONTEXT }}" != "weekend" ]]; then
                  MESSAGES=(
                    "yooooo night owls, masih melek atau udah ngantuk? perfect time begadang mabar roblox, ${WEATHER_MENTION} nih!"
                    "wassuppp midnight squad, insomnia atau pilihan stay up? siapa mau marathon valo sampai pagi, ${WEATHER_MENTION}?"
                    "heyyyy nocturnal gamers, vibes malam beda ya? gas push rank ml sambil ngobrol, ${WEATHER_MENTION}"
                    "sup late night legends, peaceful hours nih bocil udah tidur! ayo chill gaming sambil voice chat, ${WEATHER_MENTION}?"
                  )
                fi
                ;;
            esac
            
            RANDOM_INDEX=$((RANDOM % ${#MESSAGES[@]}))
            DESC_RAW="${MESSAGES[$RANDOM_INDEX]}"
          fi
          
          declare -a TITLES
          declare -a THUMBS
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") 
              TITLES=("☀️ Morning Skye Squad" "🌅 Early Bird Energy" "☕ Coffee & Gaming Time" "🌞 Fresh Morning Vibes" "⭐ New Day New Games")
              THUMBS=("2600" "1f305" "2615" "1f31e" "2b50")
              ;;
            "afternoon") 
              TITLES=("� Afternoon Chill Mode" "�️ Midday Squad Check" "☀️ Lunch Break Gaming" "🎯 Afternoon Focus Time" "💼 Productive Break")
              THUMBS=("1f343" "1f324" "2600" "1f3af" "1f4bc")
              ;;
            "evening") 
              TITLES=("🌇 Evening Chill Squad" "🌆 Golden Hour Gaming" "✨ Evening Wind-Down" "🌅 Sunset Gaming Time" "🎯 Evening Focus Mode")
              THUMBS=("1f307" "1f307" "2728" "1f305" "1f3af")
              ;;
            "night") 
              TITLES=("🦉 Late Night Squad" "🌙 Midnight Gaming Club" "⭐ Night Owl Assembly" "✨ Nocturnal Gamers" "🌟 Late Night Energy")
              THUMBS=("1f989" "1f319" "2b50" "2728" "1f31f")
              ;;
          esac
          
          RANDOM_INDEX=$((RANDOM % ${#TITLES[@]}))
          TITLE="${TITLES[$RANDOM_INDEX]}"
          THUMB="${THUMBS[$RANDOM_INDEX]}"
          
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT
          
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          python3 << 'PYTHON_EOF'
          import json
          import os
          
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', 'what\'s good everyone!')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          context = os.environ.get('CONTEXT', 'weekday')
          
          # Convert description to lowercase
          desc = desc_raw.lower()
          
          # Weekend role tagging is handled in AI prompt and fallback messages
          # No additional processing needed here since it's already included
          
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {
                  "url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"
              },
              "footer": {
                  "text": "chill gaming vibes",
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Payload created")
          PYTHON_EOF
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          
        env:
          TITLE: ${{ steps.ai_generation.outputs.TITLE }}
          DESC: ${{ steps.ai_generation.outputs.DESC_RAW }}
          COLOR: ${{ env.COLOR }}
          TIMESTAMP: ${{ env.TIMESTAMP }}
          THUMB: ${{ steps.ai_generation.outputs.THUMB }}
          CONTEXT: ${{ steps.context.outputs.CONTEXT }}

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning")
              STICKERS=(
                "https://media.discordapp.net/stickers/1404543938815197306.png"
                "https://media.discordapp.net/stickers/1405277985237368943.png"
                "https://media.discordapp.net/stickers/1405477154095104082.png"
              )
              ;;
            "afternoon")
              STICKERS=(
                "https://media.discordapp.net/stickers/1405487683526201404.png"
                "https://media.discordapp.net/stickers/1405546781927936051.png"
                "https://media.discordapp.net/stickers/1405855503858274397.png"
              )
              ;;
            "evening")
              STICKERS=(
                "https://media.discordapp.net/stickers/1405914196922597549.png"
                "https://media.discordapp.net/stickers/1406065324758929509.png"
                "https://media.discordapp.net/stickers/1406629592839491716.png"
              )
              ;;
            "night")
              STICKERS=(
                "https://media.discordapp.net/stickers/1406668584335184003.png"
                "https://media.discordapp.net/stickers/1407858067013369856.png"
                "https://media.discordapp.net/stickers/1407858350334677204.png"
                "https://media.discordapp.net/stickers/1407858765616779396.png"
                "https://media.discordapp.net/stickers/1407859373396590735.png"
              )
              ;;
          esac
          
          RANDOM_INDEX=$((RANDOM % ${#STICKERS[@]}))
          SELECTED_STICKER=${STICKERS[$RANDOM_INDEX]}
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$SELECTED_STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "================================"
          echo "✅ Skye community greeting complete!"

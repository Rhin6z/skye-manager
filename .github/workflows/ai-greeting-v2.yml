name: Clean AI Discord Greeting

on:
  schedule:
    - cron: '0 0 * * 1-5'    # 7 AM WIB weekdays
    - cron: '0 5 * * 1-5'    # 12 PM WIB weekdays  
    - cron: '0 10 * * 1-5'   # 5 PM WIB weekdays
    - cron: '0 15 * * 1-5'   # 10 PM WIB weekdays
    - cron: '0 0 * * 6,0'    # 7 AM WIB weekends
    - cron: '0 5 * * 6,0'    # 12 PM WIB weekends
    - cron: '0 10 * * 6,0'   # 5 PM WIB weekends
    - cron: '0 15 * * 6,0'   # 10 PM WIB weekends
  workflow_dispatch:
    inputs:
      greeting_type:
        description: 'Select greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          # Time info
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          # Determine type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            case "${{ github.event.schedule }}" in
              "0 0 * * 1-5"|"0 0 * * 6,0") TYPE="morning" ;;
              "0 5 * * 1-5"|"0 5 * * 6,0") TYPE="afternoon" ;;
              "0 10 * * 1-5"|"0 10 * * 6,0") TYPE="evening" ;;
              "0 15 * * 1-5"|"0 15 * * 6,0") TYPE="night" ;;
            esac
          fi
          
          # Context
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          # Special context
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          
          echo "üéØ Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Generate AI Greeting
        id: ai_generation
        run: |
          echo "ü§ñ Generating AI greeting..."
          
          # Create prompt
          cat > /tmp/prompt.txt << 'EOF'
          Create a natural Discord greeting for Indonesian gaming friends.
          
          Context: TYPE_PLACEHOLDER on CONTEXT_PLACEHOLDER
          Time: CURRENT_DAY_PLACEHOLDER (CURRENT_DATE_PLACEHOLDER) at CURRENT_TIME_PLACEHOLDER WIB
          Special: SPECIAL_CONTEXT_PLACEHOLDER
          
          Requirements:
          - Write like a human friend texting gaming buddies
          - Mix Indonesian and English naturally (60% Indo, 40% English)
          - Use trendy slang: "yooooo", "wassuppppp", "what's gooddddd", "heyyyy"
          - Gaming references: valorant, roblox, mobile legends/emel
          - Indonesian slang: gabut, males, capek, seneng, skuy, anjay, mantul
          - Extended words: "chillinnnnn", "laterrrr", "todayyyy", "boreddd"
          - Personal touches: "just woke up", "feeling lazy", "need coffee"
          - Keep it 1-2 sentences, natural conversation style
          
          Examples:
          yooooo what's gooddddd everyone!! hope y'all are chillinnnnn today, might hop on valorant laterrrr
          bruhhh friday morning finallyyyy! besok weekend dah time to grind valorant ranked skuy
          heyyyy guyssss what's the vibeeeee? gabut bgt might play some roblox or emel push rank anyone???
          woiiii just bangun tidur and feeling lazy deymm, perfect weather buat cozy gaming seharian
          
          Write naturally - no formatting needed!
          EOF
          
          # Replace placeholders
          sed -i "s/TYPE_PLACEHOLDER/${{ steps.context.outputs.TYPE }}/g" /tmp/prompt.txt
          sed -i "s/CONTEXT_PLACEHOLDER/${{ steps.context.outputs.CONTEXT }}/g" /tmp/prompt.txt
          sed -i "s/CURRENT_DAY_PLACEHOLDER/${{ steps.context.outputs.CURRENT_DAY }}/g" /tmp/prompt.txt
          sed -i "s/CURRENT_DATE_PLACEHOLDER/${{ steps.context.outputs.CURRENT_DATE }}/g" /tmp/prompt.txt
          sed -i "s/CURRENT_TIME_PLACEHOLDER/${{ steps.context.outputs.CURRENT_TIME }}/g" /tmp/prompt.txt
          sed -i "s/SPECIAL_CONTEXT_PLACEHOLDER/${{ steps.context.outputs.SPECIAL_CONTEXT }}/g" /tmp/prompt.txt
          
          # Try AI generation
          AI_SUCCESS=false
          
          python3 << 'PYTHON_EOF'
          import json
          import requests
          import os
          import sys
          
          try:
              with open('/tmp/prompt.txt', 'r') as f:
                  prompt = f.read().strip()
              
              api_key = os.environ.get('GEMINI_API_KEY')
              if not api_key:
                  sys.exit(1)
              
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent?key={api_key}"
              
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.9,
                      "maxOutputTokens": 200,
                      "topP": 0.95
                  }
              }
              
              response = requests.post(url, json=payload, timeout=20)
              
              if response.status_code == 200:
                  data = response.json()
                  if 'candidates' in data and len(data['candidates']) > 0:
                      ai_text = data['candidates'][0]['content']['parts'][0]['text'].strip()
                      with open('/tmp/ai_response.txt', 'w') as f:
                          f.write(ai_text)
                      print("‚úÖ AI success")
                      sys.exit(0)
              
              sys.exit(1)
              
          except Exception as e:
              print(f"‚ùå AI error: {e}")
              sys.exit(1)
          PYTHON_EOF
          
          if [[ $? -eq 0 && -s /tmp/ai_response.txt ]]; then
            AI_SUCCESS=true
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "üéØ AI generated: $AI_TEXT"
            
            # Smart parsing
            if [[ ${#AI_TEXT} -gt 20 && ${#AI_TEXT} -lt 300 ]]; then
              # Good length, use as description
              DESC_RAW="$AI_TEXT"
              case "${{ steps.context.outputs.TYPE }}" in
                "morning") TITLE="üåÖ Morning Vibes" ;;
                "afternoon") TITLE="‚òÄÔ∏è Afternoon Check" ;;
                "evening") TITLE="üåÜ Evening Squad" ;;
                "night") TITLE="üåô Night Gaming" ;;
              esac
              FOOTER="chill gaming vibes"
              USE_AI=true
            else
              AI_SUCCESS=false
            fi
          fi
          
          # Fallback if AI fails
          if [[ "$AI_SUCCESS" != "true" ]]; then
            echo "üé≤ Using fallback..."
            USE_AI=false
            
            case "${{ steps.context.outputs.TYPE }}" in
              "morning")
                if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "monday_motivation" ]]; then
                  TITLE="üåÖ Monday Fresh Start"
                  DESC_RAW="yooooo what's gooddddd beautiful people! monday lagi tapi honestly feeling optimistic maybe actually productive today (atau valorant ranked aja skuy)"
                else
                  TITLE="üåÖ Morning Squad Online"
                  DESC_RAW="heyyyy gamerssss hope y'all slept wellll! butuh kopi dulu then maybe some roblox chillin or valorant unrated sambil ngobrol"
                fi
                ;;
              "afternoon")
                if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "hump_day" ]]; then
                  TITLE="‚òÄÔ∏è Hump Day Checkpoint"
                  DESC_RAW="wassuppppp squad! wednesday already wtfff feels like monday was yesterday but weekend almost here dah time flies so fast anjay"
                else
                  TITLE="‚òÄÔ∏è Afternoon Recharge"
                  DESC_RAW="ayooo what's the vibeeeee today everyone? honestly agak gabut need some gaming therapy fr siapa mau push rank emel laterrrr?"
                fi
                ;;
              "evening")
                if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "weekend_countdown" ]]; then
                  TITLE="üåÜ Friday Night Preview"
                  DESC_RAW="yooooo friday evening finallyyyy! weekend vibes incoming besok libur dah time to grind valorant ranked or main roblox seharian skuy"
                else
                  TITLE="üåÜ Golden Hour Squad"
                  DESC_RAW="wassup kings and queensss how was todayyyy? feeling chill rn might just unrated val sambil ngobrol or 1v1 anyone???"
                fi
                ;;
              "night")
                if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "sunday_prep" ]]; then
                  TITLE="üåú Sunday Wind Down"
                  DESC_RAW="heyyyy squad sunday night feels bittersweettt weekend ending tapi was pretty good sih last gaming session anyone before reality check besok?"
                else
                  TITLE="üåô Night Owl Territory"
                  DESC_RAW="ayooo who's still awakeeee??? either gabisa tidur or don't wanna end the day perfect time for some cozy valorant or roblox tower of hell"
                fi
                ;;
            esac
            FOOTER="nocturnal gaming sessions activate"
          fi
          
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "FOOTER=$FOOTER" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "üì§ Sending Discord message..."
          
          # Color scheme
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;  # Gold
            "afternoon") COLOR=16763904 ;; # Orange
            "evening") COLOR=16744448 ;;  # Red-orange
            "night") COLOR=8947848 ;;     # Dark blue
          esac
          
          # Create JSON payload
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          FOOTER="${{ steps.ai_generation.outputs.FOOTER }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          python3 << 'PYTHON_EOF'
          import json
          import os
          
          title = os.environ.get('TITLE', 'Gaming Squad')
          desc_raw = os.environ.get('DESC', 'What\'s good everyone!')
          footer = os.environ.get('FOOTER', 'chill gaming vibes')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          
          # Add attribution
          desc = f"{desc_raw}\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {
                  "url": "https://twemoji.maxcdn.com/v/latest/72x72/1f305.png"
              },
              "footer": {
                  "text": footer,
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("‚úÖ Payload created")
          PYTHON_EOF
          
          # Send to Discord
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "‚úÖ Message sent!"
          echo "ü§ñ AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          
        env:
          TITLE: ${{ steps.ai_generation.outputs.TITLE }}
          DESC: ${{ steps.ai_generation.outputs.DESC_RAW }}
          FOOTER: ${{ steps.ai_generation.outputs.FOOTER }}
          COLOR: ${{ env.COLOR }}
          TIMESTAMP: ${{ env.TIMESTAMP }}

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "üß™ TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "Footer: ${{ steps.ai_generation.outputs.FOOTER }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "================================"
          echo "üß™ Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "üé≤ Sending random sticker..."
          sleep 3
          
          STICKERS=(
            "https://media.discordapp.net/stickers/1404543938815197306.png"
            "https://media.discordapp.net/stickers/1405277985237368943.png"
            "https://media.discordapp.net/stickers/1405477154095104082.png"
            "https://media.discordapp.net/stickers/1405487683526201404.png"
            "https://media.discordapp.net/stickers/1405546781927936051.png"
            "https://media.discordapp.net/stickers/1405855503858274397.png"
            "https://media.discordapp.net/stickers/1405914196922597549.png"
            "https://media.discordapp.net/stickers/1406065324758929509.png"
            "https://media.discordapp.net/stickers/1406629592839491716.png"
            "https://media.discordapp.net/stickers/1406668584335184003.png"
            "https://media.discordapp.net/stickers/1407858067013369856.png"
            "https://media.discordapp.net/stickers/1407858350334677204.png"
            "https://media.discordapp.net/stickers/1407858765616779396.png"
            "https://media.discordapp.net/stickers/1407859373396590735.png"
          )
          
          RANDOM_INDEX=$((RANDOM % ${#STICKERS[@]}))
          SELECTED_STICKER=${STICKERS[$RANDOM_INDEX]}
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$SELECTED_STICKER\"}"
          
          echo "üéâ Sticker sent!"

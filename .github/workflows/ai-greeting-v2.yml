name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Setup Creative Context
        id: creative_context
        run: |
          echo "� Setting up creative context for AI generation..."
          
          # Generate random context elements for creativity
          MOOD_WORDS=("chill" "energetic" "focused" "relaxed" "hyped" "zen" "wild" "smooth")
          RANDOM_MOOD=${MOOD_WORDS[$((RANDOM % ${#MOOD_WORDS[@]}))]}
          
          VIBES=("gaming vibes" "squad energy" "team spirit" "community feels" "discord energy" "crew vibes" "collective mood")
          RANDOM_VIBE=${VIBES[$((RANDOM % ${#VIBES[@]}))]}
          
          echo "MOOD_CONTEXT=$RANDOM_MOOD" >> $GITHUB_OUTPUT
          echo "VIBE_CONTEXT=$RANDOM_VIBE" >> $GITHUB_OUTPUT
          echo "✅ Creative context ready: $RANDOM_MOOD $RANDOM_VIBE"

      - name: Generate AI Content (Message + Title + Footer)
        id: ai_generation
        env:
          CURRENT_DAY: ${{ steps.context.outputs.CURRENT_DAY }}
          TIME_OF_DAY: ${{ steps.context.outputs.TYPE }}
          CONTEXT: ${{ steps.context.outputs.CONTEXT }}
          MOOD_CONTEXT: ${{ steps.creative_context.outputs.MOOD_CONTEXT }}
          VIBE_CONTEXT: ${{ steps.creative_context.outputs.VIBE_CONTEXT }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🤖 Generating complete AI content (message + title + footer)..."

          # Weekend flag
          if [ "$CONTEXT" = "weekend" ]; then
            export IS_WEEKEND=true
          else
            export IS_WEEKEND=false
          fi
          
          # Advanced AI generator dengan title dan footer
          cat > /tmp/advanced_ai_generator.py << 'EOL'
          import os, re, random, requests, sys, json

          def generate_content():
              day = os.environ.get("CURRENT_DAY", "today").lower()
              time = os.environ.get("TIME_OF_DAY", "day")
              context = os.environ.get("CONTEXT", "weekday")
              mood = os.environ.get("MOOD_CONTEXT", "chill")
              vibe = os.environ.get("VIBE_CONTEXT", "gaming vibes")
              is_weekend = context == "weekend"
              api_key = os.environ.get("GEMINI_API_KEY")
              
              if not api_key:
                  raise Exception("No API key")
              
              # Comprehensive prompt untuk message, title, dan footer
              prompt = f"""You are creating content for Skye Discord gaming community. Generate exactly 3 items in JSON format:

              **CONTEXT:**
              - Day: {day} ({context})
              - Time: {time}
              - Mood: {mood}
              - Community vibe: {vibe}
              - Games played: Roblox, Mobile Legends, Valorant

              **GENERATE JSON WITH:**
              {{
                "message": "2-sentence Discord greeting",
                "title": "creative channel title", 
                "footer": "contextual footer text"
              }}

              **MESSAGE REQUIREMENTS:**
              - Sentence 1: English only, casual greeting + question about current state/mood/activity
              - Sentence 2: Indonesian invitation to game + {'<@&1374047008829997157>' if is_weekend else 'no role tag'}
              - All lowercase, natural conversation, 80-200 chars
              - No weather mentions, focus on time/day context and gaming

              **TITLE REQUIREMENTS:**
              - Creative, unique title reflecting current {time} {day} mood
              - Avoid templates like "Morning Squad" or "Evening Crew"  
              - Be creative: "code red caffeine protocol", "post-lunch power mode", "midnight legends unite"
              - 3-6 words max, engaging and dynamic
              - All lowercase

              **FOOTER REQUIREMENTS:**
              - Contextual to time/day/mood, not generic "chill gaming vibes"
              - Examples: "{time} energy activated", "{day} grind mode", "{mood} squad assembled"
              - 2-4 words, lowercase, specific to current context

              **EXAMPLES:**
              Morning weekday: {{"message": "yoooow {day} crew, ready to tackle this productive day? yuk prioritas tugas dulu, gaming nanti sore", "title": "morning fuel squad", "footer": "productivity first mode"}}
              
              Evening weekend: {{"message": "wassup {day} legends, day was epic or disaster? yuuuk <@&1374047008829997157> dinner sambil voice chat valorant", "title": "weekend wind down", "footer": "evening chill activated"}}

              Write only the JSON, no other text:
              """
              
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.8,
                      "maxOutputTokens": 250,
                      "topP": 0.9
                  }
              }
              
              response = requests.post(url, json=payload, timeout=20)
              
              if response.status_code == 200:
                  data = response.json()
                  if 'candidates' in data and len(data['candidates']) > 0:
                      ai_text = data['candidates'][0]['content']['parts'][0]['text'].strip()
                      
                      # Extract JSON dari response
                      json_match = re.search(r'\{[^}]*"message"[^}]*\}', ai_text, re.DOTALL)
                      if json_match:
                          try:
                              content = json.loads(json_match.group())
                              if all(key in content for key in ['message', 'title', 'footer']):
                                  # Validate dan clean content
                                  message = content['message'].lower().strip()
                                  title = content['title'].lower().strip()
                                  footer = content['footer'].lower().strip()
                                  
                                  # Ensure proper role tag for weekend
                                  if is_weekend and '<@&1374047008829997157>' not in message:
                                      if '?' in message:
                                          message = message.replace('?', '? <@&1374047008829997157>', 1)
                                      else:
                                          message += ' <@&1374047008829997157>'
                                  elif not is_weekend:
                                      message = re.sub(r'<@&[0-9]+>', '', message).strip()
                                  
                                  # Length validation
                                  if 50 <= len(message) <= 220:
                                      return {
                                          'message': message,
                                          'title': title,
                                          'footer': footer,
                                          'source': 'ai'
                                      }
                          except json.JSONDecodeError:
                              pass
              
              raise Exception("AI generation failed")

          def generate_fallback():
              day = os.environ.get("CURRENT_DAY", "today").lower()
              time = os.environ.get("TIME_OF_DAY", "day")
              context = os.environ.get("CONTEXT", "weekday")
              is_weekend = context == "weekend"
              
              # Creative fallback messages
              openers = ["yoooow", "wassup", "heyyyy", "sup", "ayooo"]
              
              time_contexts = {
                  "morning": {
                      "questions": ["coffee ready or controller calling?", "energy level check how we feeling?", "productive mood activated or still sleepy?"],
                      "activities": ["warm up aim training", "daily quest speedrun", "morning gaming ritual"],
                      "titles": ["dawn patrol squad", "morning fuel crew", "early bird legends", "sunrise gaming mode"],
                      "footers": ["morning energy on", "dawn squad ready", "early grind mode", "sunrise vibes"]
                  },
                  "afternoon": {
                      "questions": ["lunch break energy hitting different?", "midday vibe check how we doing?", "post-meal gaming mood?"],
                      "activities": ["quick match session", "ranked push time", "afternoon gaming break"],
                      "titles": ["midday momentum", "afternoon power mode", "lunch break legends", "peak hour squad"],
                      "footers": ["midday energy peak", "afternoon grind on", "peak gaming hours", "lunch power mode"]
                  },
                  "evening": {
                      "questions": ["day was productive or chaos?", "dinner plans or gaming first?", "evening chill mode activated?"],
                      "activities": ["dinner sambil voice chat", "evening gaming session", "wind down gaming"],
                      "titles": ["golden hour crew", "evening legends", "dinner gaming mode", "sunset squad"],
                      "footers": ["evening chill on", "golden hour vibes", "dinner gaming time", "sunset mode"]
                  },
                  "night": {
                      "questions": ["insomnia hitting or choice begadang?", "night owl mode activated?", "peaceful late hours?"],
                      "activities": ["marathon gaming session", "late night competitive", "midnight gaming vibes"],
                      "titles": ["midnight legends", "night owl squad", "late shift crew", "nocturnal gamers"],
                      "footers": ["midnight mode on", "night owl energy", "late shift vibes", "nocturnal gaming"]
                  }
              }
              
              ctx = time_contexts.get(time, time_contexts["afternoon"])
              
              opener = random.choice(openers)
              question = random.choice(ctx["questions"])
              activity = random.choice(ctx["activities"])
              title = random.choice(ctx["titles"])
              footer = random.choice(ctx["footers"])
              
              tag = " <@&1374047008829997157>" if is_weekend else ""
              games = ["valorant", "mobile legends", "roblox"]
              game = random.choice(games)
              
              message = f"{opener} {day} squad, {question} yuuuk{tag} {activity} {game}"
              
              return {
                  'message': message,
                  'title': title,
                  'footer': footer,
                  'source': 'fallback'
              }

          try:
              result = generate_content()
              print(f"✅ AI generation successful")
          except Exception as e:
              print(f"⚠️ AI failed: {e}, using creative fallback")
              result = generate_fallback()
          
          # Write results
          with open('/tmp/ai_message.txt', 'w', encoding='utf-8') as f:
              f.write(result['message'])
          with open('/tmp/ai_title.txt', 'w', encoding='utf-8') as f:
              f.write(result['title'])
          with open('/tmp/ai_footer.txt', 'w', encoding='utf-8') as f:
              f.write(result['footer'])
          with open('/tmp/ai_source.txt', 'w', encoding='utf-8') as f:
              f.write(result['source'])
          
          print(f"🎯 Generated content:")
          print(f"   Message: {result['message'][:60]}...")
          print(f"   Title: {result['title']}")
          print(f"   Footer: {result['footer']}")
          print(f"   Source: {result['source']}")
          EOL

          # Execute the advanced generator
          echo "🧪 Executing advanced AI generator..."
          python3 /tmp/advanced_ai_generator.py
          
          # Process results
          if [[ -s /tmp/ai_message.txt && -s /tmp/ai_title.txt && -s /tmp/ai_footer.txt ]]; then
            AI_MESSAGE=$(cat /tmp/ai_message.txt)
            AI_TITLE=$(cat /tmp/ai_title.txt)
            AI_FOOTER=$(cat /tmp/ai_footer.txt)
            AI_SOURCE=$(cat /tmp/ai_source.txt)
            
            echo "🎯 Generated content:"
            echo "   Message: $AI_MESSAGE"
            echo "   Title: $AI_TITLE"
            echo "   Footer: $AI_FOOTER"
            echo "   Source: $AI_SOURCE"
            
            # Validation
            if [[ ${#AI_MESSAGE} -gt 40 && ${#AI_MESSAGE} -lt 250 ]]; then
              DESC_RAW="$AI_MESSAGE"
              TITLE="$AI_TITLE"
              FOOTER_TEXT="$AI_FOOTER"
              USE_AI=true
              echo "✅ Content validated and accepted"
            else
              echo "❌ Content validation failed, using backup"
              USE_AI=false
            fi
          else
            echo "❌ Generation failed, using backup"
            USE_AI=false
          fi
          
          # Backup system jika AI gagal
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using backup creative system..."
            
            DAY=$(echo "$CURRENT_DAY" | tr '[:upper:]' '[:lower:]')
            
            case "$TIME_OF_DAY" in
              "morning")
                DESC_RAW=$(shuf -e \
                  "yoooow $DAY crew, coffee ready or controller calling? yuuuk warm up aim valorant dulu" \
                  "wassup $DAY squad, energy level gimana nih? gaskeun daily quest mobile legends" \
                  "heyyyy $DAY legends, productive mood on? yuuuk morning gaming ritual roblox" \
                  -n1)
                TITLE=$(shuf -e "dawn patrol activated" "morning fuel squad" "early bird legends" "sunrise gaming mode" -n1)
                FOOTER_TEXT=$(shuf -e "morning energy on" "dawn squad ready" "early grind mode" "sunrise vibes" -n1)
                ;;
              "afternoon")
                DESC_RAW=$(shuf -e \
                  "yoooow $DAY squad, lunch break energy different? yuuuk quick match valorant" \
                  "wassup $DAY crew, midday vibe check? gaskeun ranked push mobile legends" \
                  "heyyyy $DAY legends, post-meal gaming mood? yuuuk afternoon session roblox" \
                  -n1)
                TITLE=$(shuf -e "midday momentum" "afternoon power mode" "lunch break legends" "peak hour squad" -n1)
                FOOTER_TEXT=$(shuf -e "midday energy peak" "afternoon grind on" "peak gaming hours" "lunch power mode" -n1)
                ;;
              "evening")
                DESC_RAW=$(shuf -e \
                  "yoooow $DAY squad, day productive atau chaos? yuuuk dinner sambil voice chat valorant" \
                  "wassup $DAY crew, evening chill activated? gaskeun wind down mobile legends" \
                  "heyyyy $DAY legends, golden hour vibes? yuuuk evening session roblox" \
                  -n1)
                TITLE=$(shuf -e "golden hour crew" "evening legends" "dinner gaming mode" "sunset squad" -n1)
                FOOTER_TEXT=$(shuf -e "evening chill on" "golden hour vibes" "dinner gaming time" "sunset mode" -n1)
                ;;
              "night")
                DESC_RAW=$(shuf -e \
                  "yoooow $DAY squad, insomnia atau choice begadang? yuuuk marathon gaming valorant" \
                  "wassup $DAY crew, night owl mode on? gaskeun late night competitive mobile legends" \
                  "heyyyy $DAY legends, peaceful late hours? yuuuk midnight session roblox" \
                  -n1)
                TITLE=$(shuf -e "midnight legends" "night owl squad" "late shift crew" "nocturnal gamers" -n1)
                FOOTER_TEXT=$(shuf -e "midnight mode on" "night owl energy" "late shift vibes" "nocturnal gaming" -n1)
                ;;
            esac
            
            # Add weekend role tag
            if [[ "$CONTEXT" == "weekend" ]]; then
              DESC_RAW=$(echo "$DESC_RAW" | sed 's/yuuuk /yuuuk <@&1374047008829997157> /' | sed 's/gaskeun /gaskeun <@&1374047008829997157> /')
            fi
          fi
          
          # Dynamic thumbnail based on time
          case "$TIME_OF_DAY" in
            "morning") THUMB="2600" ;;
            "afternoon") THUMB="1f343" ;;
            "evening") THUMB="1f307" ;;
            "night") THUMB="1f989" ;;
          esac
          
          # Output untuk step berikutnya
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "FOOTER_TEXT=$FOOTER_TEXT" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message with dynamic content..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          FOOTER_TEXT="${{ steps.ai_generation.outputs.FOOTER_TEXT }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Create advanced Discord payload dengan AI-generated footer
          cat > /tmp/advanced_discord_script.py << 'EOL'
          import json, os
          
          title = os.environ.get('TITLE', 'skye squad')
          desc_raw = os.environ.get('DESC', "what's good everyone!")
          footer_text = os.environ.get('FOOTER_TEXT', 'gaming vibes')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          
          # Convert description to lowercase dan add signature
          desc = (desc_raw or '').lower()
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {"url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"},
              "footer": {
                  "text": footer_text,
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Advanced payload created with dynamic footer")
          EOL
          
          TITLE="$TITLE" DESC="$DESC" FOOTER_TEXT="$FOOTER_TEXT" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/advanced_discord_script.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent with dynamic content!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🎨 Title: $TITLE"
          echo "💬 Footer: $FOOTER_TEXT"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "Footer: ${{ steps.ai_generation.outputs.FOOTER_TEXT }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "Creative Context: ${{ steps.creative_context.outputs.MOOD_CONTEXT }} ${{ steps.creative_context.outputs.VIBE_CONTEXT }}"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
          else
            WEBHOOK_URL="${{ secrets.Discord_WEBHOOK_URL }}"
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
          
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "� Creative Context: ${{ steps.creative_context.outputs.MOOD_CONTEXT }} ${{ steps.creative_context.outputs.VIBE_CONTEXT }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "📝 Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "💬 Footer: ${{ steps.ai_generation.outputs.FOOTER_TEXT }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Skye community greeting complete with dynamic AI content!"

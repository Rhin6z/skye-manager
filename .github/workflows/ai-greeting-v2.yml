name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="🌧️"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="🌦️"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="🔥"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="❄️"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="🍃"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="☁️"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="☀️"
          else
            WEATHER_EMOJI="🌤️"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Create AI Prompt
        id: create_prompt
        run: |
          # Step 1: Generate the English part first
          cat > /tmp/prompt_english.txt << 'EOL'
          You are a casual Indonesian gaming Discord admin writing a greeting message.
          
          Write ONLY ONE SHORT casual English question sentence with these requirements:
          - Start with one of these openers: "yoooow", "wassuuup", "heyyy", "suuup", "bro", "guyss"
          - Directly mention ${{ steps.context.outputs.CURRENT_DAY }} (like "monday vibes" or "tuesday grind")
          - Ask a question relevant to ${{ steps.context.outputs.TYPE }} time of day
          - End with a question mark
          - Keep it casual and authentic
          - Make it 10-12 words maximum
          - ALL lowercase only
          
          Just write the ONE English greeting sentence and nothing else:
          EOL
          
          # Step 2: Generate the Indonesian part separately
          cat > /tmp/prompt_indonesian.txt << 'EOL'
          You are an Indonesian gaming Discord admin writing the second part of a greeting.
          
          Write ONLY ONE SHORT Indonesian sentence with these requirements:
          - Start with one of these: "yuuuk", "gaskeun", "gas", "ayooook", "skuyyyy"
          - Include at least one authentic Indonesian slang like: "njirrr", "bjirrr", "ygy", "anjay", "wkwkwk", "hehehehe"
          - Use abbreviations like: "dah", "gk", "yg", "aja", "bgt"
          - Mention ${{ steps.context.outputs.CURRENT_DAY }} in Indonesian (senin/selasa/rabu/etc)
          - Include reference to ${{ steps.weather.outputs.WEATHER_INFO }}
          - If it's ${{ steps.context.outputs.CONTEXT }} == "weekend", include this tag: <@&1374047008829997157>
          - End with one emoji
          - Keep it under 100 characters
          - ALL lowercase only
          
          Just write the ONE Indonesian sentence and nothing else:
          EOL
          
          # Create Python scripts for each part
          cat > /tmp/generate_english.py << 'EOL'
          import requests
          import os
          import sys
          
          try:
              with open('/tmp/prompt_english.txt', 'r') as f:
                  prompt = f.read().strip()
              
              api_key = os.environ.get('GEMINI_API_KEY')
              if not api_key:
                  print("❌ No API key")
                  sys.exit(1)
              
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key={api_key}"
              
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.5,
                      "maxOutputTokens": 50,
                      "topP": 0.8
                  }
              }
              
              response = requests.post(url, json=payload, timeout=20)
              
              if response.status_code == 200:
                  data = response.json()
                  if 'candidates' in data and len(data['candidates']) > 0:
                      text = data['candidates'][0]['content']['parts'][0]['text'].strip()
                      text = text.lower().strip()
                      
                      # Clean up any formatting
                      text = text.replace('"', '').replace('*', '')
                      
                      # Verify it's a proper question
                      if '?' in text and len(text) < 100:
                          with open('/tmp/english_part.txt', 'w') as f:
                              f.write(text)
                          print(f"✅ English part generated: {text}")
                          sys.exit(0)
              
              print("❌ English generation failed")
              sys.exit(1)
              
          except Exception as e:
              print(f"❌ Error: {e}")
              sys.exit(1)
          EOL
          
          cat > /tmp/generate_indonesian.py << 'EOL'
          import requests
          import os
          import sys
          
          try:
              with open('/tmp/prompt_indonesian.txt', 'r') as f:
                  prompt = f.read().strip()
              
              api_key = os.environ.get('GEMINI_API_KEY')
              if not api_key:
                  print("❌ No API key")
                  sys.exit(1)
              
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key={api_key}"
              
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.5,
                      "maxOutputTokens": 100,
                      "topP": 0.8
                  }
              }
              
              response = requests.post(url, json=payload, timeout=20)
              
              if response.status_code == 200:
                  data = response.json()
                  if 'candidates' in data and len(data['candidates']) > 0:
                      text = data['candidates'][0]['content']['parts'][0]['text'].strip()
                      text = text.lower().strip()
                      
                      # Clean up any formatting
                      text = text.replace('"', '').replace('*', '')
                      
                      # Verify it contains Indonesian slang
                      slang_terms = ["njirrr", "bjirrr", "ygy", "ytta", "anjay", "kocak", "wkwk", "wkwkwk", "hehe", "hehehehe", "walawe"]
                      has_slang = any(term in text.lower() for term in slang_terms)
                      
                      # Check for weather and weekend tag when needed
                      has_weather = "${{ steps.weather.outputs.WEATHER_INFO }}" in text
                      
                      if "${{ steps.context.outputs.CONTEXT }}" == "weekend":
                          has_tag = "<@&1374047008829997157>" in text
                      else:
                          has_tag = True  # No tag needed for weekdays
                      
                      if has_slang and len(text) < 120:
                          with open('/tmp/indonesian_part.txt', 'w') as f:
                              f.write(text)
                          print(f"✅ Indonesian part generated: {text}")
                          sys.exit(0)
              
              print("❌ Indonesian generation failed")
              sys.exit(1)
              
          except Exception as e:
              print(f"❌ Error: {e}")
              sys.exit(1)
          EOL
          
          # Create Discord payload script
          cat > /tmp/discord_script.py << 'EOL'
          import json
          import os
          
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', 'what\'s good everyone!')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          
          # Convert description to lowercase
          desc = desc_raw.lower()
          
          # Add signature
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {
                  "url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"
              },
              "footer": {
                  "text": "chill gaming vibes",
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Payload created")
          EOL

      - name: Generate AI Greeting
        id: ai_generation
        run: |
          echo "🤖 Generating AI greeting with OpenAI..."
          
          # Create simplified prompt for OpenAI
          cat > /tmp/openai_prompt.txt << 'EOL'
          You are a casual Indonesian gaming Discord admin for server "Skye". Create a Discord greeting with EXACTLY these parts:

          PART 1: A casual English sentence that:
          - Starts with "yoooow", "wassuuup", "heyyy", or "bro"
          - Mentions ${{ steps.context.outputs.CURRENT_DAY }} by name
          - Asks a question about ${{ steps.context.outputs.TYPE }} activities
          - Ends with a question mark
          - Is all lowercase
          - Maximum 12 words

          PART 2: A casual Indonesian sentence that:
          - Starts with "yuuuk", "gaskeun", "gas", or "skuyyyy" 
          - Includes Indonesian slang like "anjay", "wkwkwk", "bjirrr", or "ygy"
          - References ${{ steps.weather.outputs.WEATHER_INFO }}
          - Mentions ${{ steps.context.outputs.CURRENT_DAY }} in Indonesian
          - If weekend (${{ steps.context.outputs.CONTEXT }} == "weekend"): includes <@&1374047008829997157> tag
          - If weekday: no tag
          - Ends with an emoji
          - Is all lowercase
          - Maximum 15 words

          TOTAL MESSAGE MUST BE UNDER 180 CHARACTERS.
          RESPONSE FORMAT: Write only the two sentences separated by a space, nothing else.
          EOL
          
          # Create Python script using OpenAI
          cat > /tmp/openai_generator.py << 'EOL'
          import json
          import requests
          import os
          import sys
          
          try:
              with open('/tmp/openai_prompt.txt', 'r') as f:
                  prompt = f.read().strip()
              
              api_key = os.environ.get('OPENAI_API_KEY')
              if not api_key:
                  print("❌ No OpenAI API key found")
                  sys.exit(1)
              
              headers = {
                  "Content-Type": "application/json",
                  "Authorization": f"Bearer {api_key}"
              }
              
              payload = {
                  "model": "gpt-3.5-turbo",
                  "messages": [
                      {"role": "system", "content": "You are a Discord admin for an Indonesian gaming server."},
                      {"role": "user", "content": prompt}
                  ],
                  "temperature": 0.7,
                  "max_tokens": 150
              }
              
              print("📡 Sending request to OpenAI API...")
              response = requests.post(
                  "https://api.openai.com/v1/chat/completions",
                  headers=headers,
                  json=payload,
                  timeout=30
              )
              
              if response.status_code != 200:
                  print(f"❌ OpenAI API error: {response.status_code}")
                  print(response.text)
                  sys.exit(1)
              
              data = response.json()
              if 'choices' in data and len(data['choices']) > 0:
                  ai_text = data['choices'][0]['message']['content'].strip()
                  
                  # Clean up any possible formatting
                  ai_text = ai_text.replace('"', '').replace('*', '')
                  
                  # Basic validation
                  if '?' in ai_text and len(ai_text) > 40 and len(ai_text) < 200:
                      with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                          f.write(ai_text)
                      print(f"✅ OpenAI generation successful: {ai_text[:50]}...")
                      sys.exit(0)
                  else:
                      print(f"❌ Response doesn't match expected format: {ai_text}")
                      sys.exit(1)
              else:
                  print("❌ No choices in OpenAI response")
                  sys.exit(1)
                  
          except Exception as e:
              print(f"❌ Error: {str(e)}")
              sys.exit(1)
          EOL
          
          # Execute the OpenAI script
          echo "🧪 Executing OpenAI generation script..."
          OPENAI_API_KEY="YOUR_OPENAI_API_KEY" python3 /tmp/openai_generator.py
          
          if [[ $? -eq 0 && -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 AI generated: $AI_TEXT"
            
            # Validate key components
            HAS_ENGLISH=$(echo "$AI_TEXT" | grep -E "\?" || echo "")
            HAS_INDONESIAN=$(echo "$AI_TEXT" | grep -iE "(yu+k|gas|ayo+k*|pada|hayu+k|gaskeun|skuyy)" || echo "")
            HAS_SLANG=$(echo "$AI_TEXT" | grep -iE "(njir|bjir|ygy|anjay|wkwk|hehe)" || echo "")
            
            # Weekend tag check
            if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
              HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
              if [[ -z "$HAS_TAG" ]]; then
                echo "⚠️ Missing weekend tag, adding..."
                AI_TEXT=$(echo "$AI_TEXT" | sed "s/\([.!?]\) /\1 <@&1374047008829997157> /")
              fi
            else
              # Make sure weekday has no tag
              HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
              if [[ -n "$HAS_TAG" ]]; then
                echo "⚠️ Removing tag for weekday..."
                AI_TEXT=$(echo "$AI_TEXT" | sed "s/<@&[0-9]*>//g")
              fi
            fi
            
            # Final validation
            if [[ -n "$HAS_ENGLISH" && -n "$HAS_INDONESIAN" ]]; then
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "✅ AI validation passed: ${#AI_TEXT} chars"
            else
              USE_AI=false
              echo "⚠️ Generated text missing required components"
            fi
          else
            USE_AI=false
            echo "❌ AI generation failed, using fallback"
          fi
                    
          # Fallback system with authentic Indonesian gamer language
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using fallback system..."
            
            WEATHER_MENTION="${{ steps.weather.outputs.WEATHER_INFO }}"
            WEATHER_EMOJI="${{ steps.weather.outputs.WEATHER_EMOJI }}"
            DAY_LOWER=$(echo "${{ steps.context.outputs.CURRENT_DAY }}" | tr '[:upper:]' '[:lower:]')
            
            case "${{ steps.context.outputs.TYPE }}" in
              "morning")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="wassuuup ${DAY_LOWER} morning crew, weekend vibes hitting different? gaskeun <@&1374047008829997157> warm up aim sambil ngopi, ${WEATHER_MENTION} di ${DAY_LOWER} gini anjay bgt buat grinding! ${WEATHER_EMOJI}"
                else
                  DESC_RAW="yoooow ${DAY_LOWER} morning gang, ready for the day or still in zombie mode? semangat ${DAY_LOWER} ini wkwkwk, ${WEATHER_MENTION} pas bgt buat fresh start ygy! ${WEATHER_EMOJI}"
                fi
                ;;
              "afternoon")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="heyyy ${DAY_LOWER} afternoon squad, lunch coma or still grinding? yuuuk <@&1374047008829997157> quick match valorant, ${WEATHER_MENTION} di ${DAY_LOWER} gini bjirrr enak bgt dah! ${WEATHER_EMOJI}"
                else
                  DESC_RAW="bro ${DAY_LOWER} siang, lunch break atau masih grind? istirahat dulu kali yak, ${WEATHER_MENTION} di ${DAY_LOWER} gini anjay enak buat refreshing! ${WEATHER_EMOJI}"
                fi
                ;;
              "evening")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="suuup ${DAY_LOWER} evening legends, weekend still going strong? skuyyyy <@&1374047008829997157> mabar valorant nih, ${WEATHER_MENTION} di ${DAY_LOWER} sore gini wkwkwk perfect bet! ${WEATHER_EMOJI}"
                else
                  DESC_RAW="yoooow ${DAY_LOWER} evening, school/work all done for today? gas santai dulu abis capek seharian, ${WEATHER_MENTION} di ${DAY_LOWER} gini ygy pas buat relaxing! ${WEATHER_EMOJI}"
                fi
                ;;
              "night")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="wassuuup ${DAY_LOWER} night gang, still awake and gaming? yuuuk <@&1374047008829997157> push rank valorant, ${WEATHER_MENTION} malem ${DAY_LOWER} gini anjay sih buat naikin elo! ${WEATHER_EMOJI}"
                else
                  if [[ "${{ steps.context.outputs.CURRENT_DAY }}" == "Sunday" ]]; then
                    DESC_RAW="heyyy sunday night crew, ready for monday or still in denial? jgn begadang y besok udh senin wkwkwk, ${WEATHER_MENTION} gini enak buat bobo ygy! ${WEATHER_EMOJI}"
                  else
                    DESC_RAW="bro ${DAY_LOWER} malam, grinding atau mau bobo soon? jgn begadang mulu deh besok masih ${DAY_LOWER}, ${WEATHER_MENTION} gini bjirrr enak bat buat istirahat! ${WEATHER_EMOJI}"
                  fi
                fi
                ;;
            esac
            
            echo "🎯 Selected fallback: ${DESC_RAW}"
          fi
          
          # Set title and thumbnail based on time and weather
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="☔ Rainy Morning Vibes"
              THUMB="2614"
            else
              TITLE="☀️ Morning Skye Squad"
              THUMB="2600"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Afternoon Chill"
              THUMB="1f327"
            else
              TITLE="🍃 Afternoon Chill Mode"
              THUMB="1f343"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Evening Chill"
              THUMB="1f327"
            else
              TITLE="🌇 Evening Chill Squad"
              THUMB="1f307"
            fi
          else
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Night Gaming"
              THUMB="1f327"
            else
              TITLE="🦉 Late Night Squad"
              THUMB="1f989"
            fi
          fi
          
          # Output values for next steps
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Simple sticker selection
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "================================"
          echo "✅ Skye community greeting complete!"
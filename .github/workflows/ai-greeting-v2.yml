name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="🌧️"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="🌦️"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="🔥"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="❄️"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="🍃"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="☁️"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="☀️"
          else
            WEATHER_EMOJI="🌤️"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Generate AI Greeting
        id: ai_generation
        env:
          CURRENT_DAY: ${{ steps.context.outputs.CURRENT_DAY }}
          TIME_OF_DAY: ${{ steps.context.outputs.TYPE }}
          CONTEXT: ${{ steps.context.outputs.CONTEXT }}
          WEATHER_INFO: ${{ steps.weather.outputs.WEATHER_INFO }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🤖 Generating AI greeting with MORE DYNAMIC approach..."

          # derive weekend flag di shell
          if [ "$CONTEXT" = "weekend" ]; then
            export IS_WEEKEND=true
          else
            export IS_WEEKEND=false
          fi
          
          # Python generator
          cat > /tmp/fixed_contextual_generator.py << 'EOL'
          import json, requests, os, sys, re, random

          """
          SLANG_GLOSSARY (arti asli, supaya pemakaian tepat konteks):
          indo:
            - yuk/yuuuk/yok/ayoo: ajakan halus buat mulai
            - gas: ayo langsung jalan sekarang
            - gaskeun: push terus tanpa ragu
            - anjay/anjayyy: kagum/terkejut (hindari untuk frasa cuaca)
            - gileee: takjub santai
            - gacorrr: perform bagus/ramai (voice/game), bukan buat cuaca
            - wkwkwk: ketawa tulisan (hindari di frasa cuaca)
            - njirrr: kaget/sinis santai (hindari di frasa cuaca)
            - ygy: “ya ga sih”
            - ytta: “yang tau tau aja” (inside joke; hindari di cuaca)
          english:
            - crew/squad/gang/team: panggilan komunal santai
            - vibe: suasana/feel
            - grind: kerja keras/latihan intens
            - queue up: antri match
            - dialed in: fokus siap kerja
            - buffering/booting: masih pemanasan
            - touch grass: keluar sebentar dari layar
            - roll call/check-in: absen/cek kehadiran singkat
          """

          # ---------- helpers ----------
          def normalize_weather(raw):
              w = (raw or "").lower()
              if "hujan" in w or "gerimis" in w: return "rain"
              if "cerah" in w or "terang" in w or "matahari" in w: return "clear"
              if "mendung" in w or "berawan" in w or "cloud" in w: return "cloudy"
              if "panas" in w or "terik" in w: return "hot"
              if "angin" in w or "berangin" in w or "wind" in w: return "windy"
              return "ok"

          def time_indo_label(t):
              return {"morning":"pagi", "afternoon":"siang", "evening":"sore", "night":"malem"}.get(t, "")

          def weather_phrase(day_indo, time_indo, wx):
              # variasi per waktu biar ga keulang
              pools = {
                  "rain": {
                      "pagi": [
                          f"hujan pagi, enak fokus di {day_indo}",
                          f"grimis dari subuh, kopi dulu trus jalan di {day_indo}",
                          f"rintik pagi, ritme pelan aman di {day_indo}",
                          f"adem dari pagi, fokus rapi di {day_indo}",
                      ],
                      "siang": [
                          f"hujan siang, mending indoor di {day_indo}",
                          f"rintik siang, enak rapihin kerjaan di {day_indo}",
                          f"siang adem, konsen lumayan di {day_indo}",
                          f"langit basah, pace stabil di {day_indo}",
                      ],
                      "sore": [
                          f"hujan sore, komuter santai di {day_indo}",
                          f"gerimis sore, enak wrap-up di {day_indo}",
                          f"udara turun, fokus kelarin sisa di {day_indo}",
                          f"rinai sore, timing santai di {day_indo}",
                      ],
                      "malem": [
                          f"hujan malem, cozy mode di {day_indo}",
                          f"rintik malem, indoor vibes di {day_indo}",
                          f"adem malem, enak wind down di {day_indo}",
                          f"malem basah, nyantai produktif di {day_indo}",
                      ],
                  },
                  "clear": {
                      "pagi": [
                          f"langit cerah, mood booster di {day_indo}",
                          f"matahari ramah, langkah ringan di {day_indo}",
                          f"pagi cerah, niat naik di {day_indo}",
                          f"udara bersih, start mulus di {day_indo}",
                      ],
                      "siang": [
                          f"cerah siang, energi naik di {day_indo}",
                          f"matahari sopan, gerak enak di {day_indo}",
                          f"langit biru, fokus kejaga di {day_indo}",
                          f"terang santai, pace oke di {day_indo}",
                      ],
                      "sore": [
                          f"golden hour, vibes enak di {day_indo}",
                          f"sore cerah, enak closing task di {day_indo}",
                          f"langit bening, energi sisa cukup di {day_indo}",
                          f"cahaya manis, fokus rapi di {day_indo}",
                      ],
                      "malem": [
                          f"malem cerah, kepala ringan di {day_indo}",
                          f"langit tenang, enak chill di {day_indo}",
                          f"bintang tipis, mood steady di {day_indo}",
                          f"udara bersih, wind down enak di {day_indo}",
                      ],
                  },
                  "cloudy": {
                      "pagi": [
                          f"mendung pagi, no silau di {day_indo}",
                          f"awan tipis, enak nyicil di {day_indo}",
                          f"pagi teduh, fokus aman di {day_indo}",
                          f"berawan adem, jalan pelan di {day_indo}",
                      ],
                      "siang": [
                          f"berawan siang, suhu aman di {day_indo}",
                          f"mendung halus, konsen jalan di {day_indo}",
                          f"awan rata, pace stabil di {day_indo}",
                          f"siang teduh, tugas rapi di {day_indo}",
                      ],
                      "sore": [
                          f"sore teduh, enak wrap-up di {day_indo}",
                          f"berawan sore, nyaman gerak di {day_indo}",
                          f"langit rata, fokus sisa task di {day_indo}",
                          f"adem sore, langkah mantap di {day_indo}",
                      ],
                      "malem": [
                          f"malem teduh, enak santai produktif di {day_indo}",
                          f"awan tenang, fokus ringan di {day_indo}",
                          f"langit kalem, good wind down di {day_indo}",
                          f"malem adem, tempo pas di {day_indo}",
                      ],
                  },
                  "hot": {
                      "pagi": [
                          f"pagi udah terik, indoor dulu di {day_indo}",
                          f"panas cepat naik, hidrasi dulu di {day_indo}",
                          f"matahari galak, atur tenaga di {day_indo}",
                          f"terik pagi, keep it chill di {day_indo}",
                      ],
                      "siang": [
                          f"siang terik, mending indoor di {day_indo}",
                          f"panas nempel, kerja tipis-tipis di {day_indo}",
                          f"UV nyolot, pilih fokus pendek di {day_indo}",
                          f"gerah siang, ritme hemat di {day_indo}",
                      ],
                      "sore": [
                          f"sore masih panas, cooldown dulu di {day_indo}",
                          f"terik sisa, pilih task ringan di {day_indo}",
                          f"hawanya naik, slow pace di {day_indo}",
                          f"gerah tipis, indoor enak di {day_indo}",
                      ],
                      "malem": [
                          f"malem masih hangat, santai panjang di {day_indo}",
                          f"panas sisa, pilih indoor di {day_indo}",
                          f"udara nempel, pelan aja di {day_indo}",
                          f"gerah malem, nyantai low effort di {day_indo}",
                      ],
                  },
                  "windy": {
                      "pagi": [
                          f"pagi berangin, sinyal semoga aman di {day_indo}",
                          f"hembus kenceng, jaketan dikit di {day_indo}",
                          f"angin pagi, enak indoor di {day_indo}",
                          f"gusty tipis, fokus pelan di {day_indo}",
                      ],
                      "siang": [
                          f"siang berangin, rapihin kerjaan di {day_indo}",
                          f"hembus siang, nyaman di {day_indo}",
                          f"angin narik awan, pace stabil di {day_indo}",
                          f"semilir kenceng, indoor vibes di {day_indo}",
                      ],
                      "sore": [
                          f"sore berangin, comms aman di {day_indo}",
                          f"hembus sore, enak tutup hari di {day_indo}",
                          f"angin dorong, fokus tipis di {day_indo}",
                          f"semilir rame, santai di {day_indo}",
                      ],
                      "malem": [
                          f"malem berangin, cozy indoor di {day_indo}",
                          f"hembus malem, headset aman di {day_indo}",
                          f"angin malam, nyantai rapi di {day_indo}",
                          f"semilir kenceng, enak chill di {day_indo}",
                      ],
                  },
                  "ok": {
                      "pagi": [
                          f"pagi nyaman, start mulus di {day_indo}",
                          f"hawanya pas, niat jalan di {day_indo}",
                          f"pagi ringan, fokus enak di {day_indo}",
                          f"cuaca oke, pelan tapi pasti di {day_indo}",
                      ],
                      "siang": [
                          f"siang oke, ritme stabil di {day_indo}",
                          f"hawanya pas, gerak mantap di {day_indo}",
                          f"nyaman siang, task rapi di {day_indo}",
                          f"cuaca oke, fokus jalan di {day_indo}",
                      ],
                      "sore": [
                          f"sore enak, closing task di {day_indo}",
                          f"nyaman sore, wrap-up mulus di {day_indo}",
                          f"cuaca oke, sisa kerja kelar di {day_indo}",
                          f"sore halus, pace pas di {day_indo}",
                      ],
                          "malem": [
                          f"malem oke, wind down santai di {day_indo}",
                          f"nyaman malem, santai produktif di {day_indo}",
                          f"cuaca oke, rileks rapi di {day_indo}",
                          f"malem halus, tempo enak di {day_indo}",
                      ],
                  },
              }
              return random.choice(pools.get(wx, {}).get(time_indo, pools["ok"][time_indo]))

          def coin(p=0.5): return random.random() < p

          # ---------- english first sentence ----------
          def english_first_sentence(day, time, is_weekend, wx):
              openers = ["yoooow", "wassuuup", "heyyy", "yo", "sup", "oi", "hey team", "morning fam", "what's good", "rise n shine"]
              labels = {
                  "morning": [f"{day} morning crew", f"{day} a.m. squad", f"{day} early shift", f"{day} roll call", f"{day} check-in"],
                  "afternoon": [f"{day} afternoon squad", f"{day} afternoon crew", f"{day} afternoon check-in", f"{day} mid-shift team"],
                  "evening": [f"{day} evening squad", f"{day} evening crew", f"{day} golden hour check-in", f"{day} dusk team"],
                  "night": [f"{day} night squad", f"{day} night crew", f"{day} late shift", f"{day} night check-in"],
              }
              energy = [
                  "dialed in or still booting",
                  "locked in or easing in",
                  "sharp already or warming up",
                  "green bar or low battery",
                  "heads-down or light start",
              ]
              plans = [
                  "sprint or steady pace",
                  "deep work or light warm-up",
                  "plan locked or freestyling",
                  "calendar-led or vibe-led",
                  "clear runway or quick detours",
              ]
              rain_hooks = [
                  "rain check—umbrella mode or hoodie mode",
                  "drizzly start—coffee secured or top-up needed",
                  "wet commute—on time or adjusting route",
                  "grey morning—steady focus or gentle ramp",
              ]
              lunch_hooks = [
                  "post-lunch—power back up or short reset",
                  "siesta vibes—push through or quick stretch",
                  "midday pulse—energy back or still mellow",
              ]
              evening_hooks = [
                  "wrap-up soon or second wind coming",
                  "dinner first or queue later",
                  "golden hour—close loops or open comms",
              ]
              night_hooks = [
                  "wind down or one last queue",
                  "late energy or screen dim soon",
                  "quiet grind or chill chat",
              ]

              bits = []
              if coin(0.55): bits.append(random.choice(openers))
              bits.append(random.choice(labels.get(time, [f"{day} {time} crew"])))
              
              if time == "morning":
                  hook_pool = (rain_hooks if wx == "rain" and not is_weekend else []) + energy + plans
              elif time == "afternoon":
                  hook_pool = lunch_hooks + plans + energy
              elif time == "evening":
                  hook_pool = evening_hooks + plans
              else:
                  hook_pool = night_hooks + energy

              hook = random.choice(hook_pool)
              first = ", ".join([" ".join(bits), hook])
              if not first.endswith("?"): first += "?"
              # pastikan english-only di kalimat 1
              return first

          # ---------- indonesian second sentence ----------
          def indo_second_sentence(day_indo, time, is_weekend, wx):
              games = ["valorant", "mobile legends", "roblox"]
              tindo = time_indo_label(time)
              wx_line = weather_phrase(day_indo, tindo, wx)

              if time == "morning" and not is_weekend:
                  later_slots = ["nanti sore", "ntaran abis pulang", "malem nanti", "abis tugas kelar"]
                  lines = [
                      f"prioritas tugas dulu, game {random.choice(later_slots)}",
                      f"fokus sekolah atau kerja dulu, {random.choice(games)} {random.choice(later_slots)}",
                      f"rapihin to-do dulu, {random.choice(games)} {random.choice(later_slots)}",
                      f"kerjain inti dulu, baru santai {random.choice(games)} {random.choice(later_slots)}",
                  ]
                  starter = random.choice(["yuk", "yuuuk", "yok", "gas", "gaskeun", "ayoo"])
                  return f"{starter} {wx_line}, {random.choice(lines)}" if coin(0.5) else f"{starter} {random.choice(lines)}, {wx_line}"

              # weekend morning: bebas, tapi ikut cuaca
              if time == "morning" and is_weekend:
                  acts_rain = [
                      f"pemanasan aim tipis di {random.choice(games)}",
                      f"classic {random.choice(games)} sambil ngopi",
                      f"chill {random.choice(games)} dulu biar hangat",
                  ]
                  acts_clear = [
                      f"quick {random.choice(games)} sambil sarapan",
                      f"unrated {random.choice(games)} tipis-tipis",
                      f"adventure {random.choice(games)} santai",
                  ]
                  act = random.choice(acts_rain if wx in ["rain","cloudy"] else acts_clear)
                  starter = random.choice(["yuk", "yuuuk", "yok", "gas", "gaskeun", "ayoo"])
                  tag = " <@&1374047008829997157>"
                  return f"{starter}{tag} {wx_line}, {act}" if coin(0.5) else f"{starter}{tag} {act}, {wx_line}"

              # selain itu: gaming ok, arahkan sesuai cuaca
              if wx in ["rain","hot","windy","cloudy"]:
                  recs = [
                      f"mabar {random.choice(games)} santai",
                      f"{random.choice(games)} classic dulu",
                      f"voice chat {random.choice(games)} sambil ngemil",
                      f"aim training tipis-tipis",
                  ]
              else:
                  recs = [
                      f"{random.choice(games)} session bareng",
                      f"push tipis di {random.choice(games)}",
                      f"quick match {random.choice(games)}",
                      f"comms on, {random.choice(games)} yuk",
                  ]
              starter = random.choice(["yuk", "yuuuk", "yok", "gas", "gaskeun", "ayoo"])
              tag = " <@&1374047008829997157>" if is_weekend else ""
              return f"{starter}{tag} {wx_line}, {random.choice(recs)}" if coin(0.5) else f"{starter}{tag} {random.choice(recs)}, {wx_line}"

          def build_message():
              day = os.environ.get('CURRENT_DAY', 'today').lower()
              time = os.environ.get('TIME_OF_DAY', 'day')
              weather_raw = os.environ.get('WEATHER_INFO', '')
              is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
              
              wx = normalize_weather(weather_raw)
              day_indo_map = {'monday':'senin','tuesday':'selasa','wednesday':'rabu','thursday':'kamis','friday':'jumat','saturday':'sabtu','sunday':'minggu'}
              day_indo = day_indo_map.get(day, day)
              
              first = english_first_sentence(day, time, is_weekend, wx)
              second = indo_second_sentence(day_indo, time, is_weekend, wx)
              
              # pastikan struktur bersih
              msg = (first.strip() + " " + second.strip()).lower()
              msg = re.sub(r"\s+", " ", msg).strip()
              # hapus emoji trailing
              msg = re.sub(r'[🎮💯🔥⚡✨🎯💪🚀☕📚]+$', '', msg)
              return msg

          try:
              # optional: coba gemini dulu dengan prompt ringkas
              day = os.environ.get('CURRENT_DAY', 'today').lower()
              time = os.environ.get('TIME_OF_DAY', 'day')
              is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
              
              if time == 'morning' and not is_weekend:
                  prompt = f"""write a discord greeting for {day} morning (weekday), 2 sentences, all lowercase.
          sentence 1: english only, dynamic phrasing (avoid repeating templates), end with '?'.
          sentence 2: indonesian, productivity first then gaming later (valorant/mobile legends/roblox) + natural weather clause (no laughter slang). write only the greeting."""
              elif time == 'morning' and is_weekend:
                  prompt = f"""write a discord greeting for {day} morning (weekend), 2 sentences, all lowercase.
          sentence 1: english only, dynamic phrasing, end with '?'.
          sentence 2: indonesian, start with yuk/yuuuk/yok/gas/gaskeun + <@&1374047008829997157>, pick one game, add natural weather clause. write only the greeting."""
              else:
                  prompt = f"""write a discord greeting for {day} {time}, 2 sentences, all lowercase.
          sentence 1: english only, dynamic phrasing, end with '?'.
          sentence 2: indonesian, invite to valorant/mobile legends/roblox + natural weather clause (no laughter slang). write only the greeting."""
              
              api_key = os.environ.get('GEMINI_API_KEY')
              if api_key:
                  url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
                  payload = {"contents":[{"parts":[{"text":prompt}]}], "generationConfig":{"temperature":0.7,"maxOutputTokens":110,"topP":0.9}}
                  resp = requests.post(url, json=payload, timeout=15)
                  if resp.status_code == 200:
                      data = resp.json()
                      cand = (data.get("candidates") or [None])[0]
                      if cand and cand.get("finishReason") != "MAX_TOKENS":
                          parts = cand.get("content",{}).get("parts") or []
                          if parts and "text" in parts[0]:
                              t = parts[0]["text"].strip().lower()
                              t = re.sub(r"\*+|\n+"," ",t); t = " ".join(t.split())
                              if "?" not in t: t = re.sub(r"\.", "?", t, count=1)
                              first, second = (t.split("?",1)+[""])[:2]
                              # guard: no gaming in first (weekday morning), english-only first, no ketawa di cuaca
                              ok = True
                              if time=="morning" and not is_weekend:
                                  if any(w in first for w in ['apex','valorant','mobile legends','roblox','gaming','main','mabar','push rank','competitive']): ok=False
                              if any(tok in first.split() for tok in ['yuk','yuuuk','yok','gaskeun','gas','atau','dulu','gini','banget','aja','sama','juga','kali','deh','dong','lah','nih','yg','kuy','mabar','anjay','wkwk','njir','pas','udah','ntar','besok','gue','gua','kamu','lu']): ok=False
                              if re.search(r'(cuaca|hujan|cerah|mendung|berawan|panas|terik|angin)[^.!?]{0,80}(kocak+k*|wkwk(wk)*|ytta)', second): ok=False
                              rebuilt = (first.strip()+"? "+second.strip()).strip()
                              rebuilt = re.sub(r"\s+"," ",rebuilt)
                              if ok and 60 <= len(rebuilt) <= 200:
                                  with open('/tmp/ai_response.txt','w',encoding='utf-8') as f: f.write(rebuilt)
                                  print("✅ gemini ok"); sys.exit(0)
              # fallback ke generator kita
              msg = build_message()
              with open('/tmp/ai_response.txt','w',encoding='utf-8') as f: f.write(msg)
              print("✅ dynamic generator ok"); sys.exit(0)
          except Exception as e:
              print(f"⚠️ exception: {e}")
              msg = build_message()
              with open('/tmp/ai_response.txt','w',encoding='utf-8') as f: f.write(msg)
              print("✅ exception fallback ok"); sys.exit(0)
          EOL

          # payload (tetep)
          cat > /tmp/discord_script.py << 'EOL'
          import json, os
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', "what's good everyone!")
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          desc = (desc_raw or '').lower()
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {"url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"},
              "footer": {"text": "chill gaming vibes", "icon_url": "https://files.catbox.moe/npfh4e.jpg"},
              "timestamp": timestamp
          }
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump({"embeds": [embed]}, f, ensure_ascii=False)
          print("✅ payload created")
          EOL

          # eksekusi
          echo "🧪 Executing generator..."
          python3 /tmp/fixed_contextual_generator.py
          
          # proses hasil
          if [[ -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 Generated text: $AI_TEXT"
            if [[ ${#AI_TEXT} -gt 40 && ${#AI_TEXT} -lt 250 ]]; then
              if [[ "$CONTEXT" == "weekend" ]]; then
                HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
                if [[ -z "$HAS_TAG" ]]; then
                  echo "⚠️ adding weekend tag..."
                  if [[ "$AI_TEXT" == *"?"* ]]; then
                    AI_TEXT=$(echo "$AI_TEXT" | sed 's/? /? <@&1374047008829997157> /')
                  else
                    AI_TEXT="$AI_TEXT <@&1374047008829997157>"
                  fi
                fi
              else
                AI_TEXT=$(echo "$AI_TEXT" | sed 's/<@&[0-9]*>//g' | sed 's/  / /g')
              fi
              # style kecil
              AI_TEXT=$(echo "$AI_TEXT" | sed 's/school\/work/school or work/gI' | sed 's/sekolah\/kerja/sekolah atau kerja/gI')
              AI_TEXT=$(echo "$AI_TEXT" | sed -E 's/[🎮💯🔥⚡✨🎯💪🚀☕📚]+$//')
              [ ${#AI_TEXT} -gt 200 ] && AI_TEXT="${AI_TEXT:0:190}..."
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "✅ AI text accepted (${#AI_TEXT} chars)"
            else
              echo "❌ invalid length (${#AI_TEXT})"; USE_AI=false
            fi
          else
            echo "❌ no AI response file"; USE_AI=false
          fi
          
          # fallback dinamis di bash (singkat, tetap kontekstual)
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using bash fallback..."
            DAY_LOWER=$(echo "$CURRENT_DAY" | tr '[:upper:]' '[:lower:]')
            # normalize wx
            if echo "$WEATHER_INFO" | grep -qi "hujan\|gerimis"; then WX="rain"
            elif echo "$WEATHER_INFO" | grep -qi "cerah\|terang\|matahari"; then WX="clear"
            elif echo "$WEATHER_INFO" | grep -qi "mendung\|berawan\|cloud"; then WX="cloudy"
            elif echo "$WEATHER_INFO" | grep -qi "panas\|terik"; then WX="hot"
            elif echo "$WEATHER_INFO" | grep -qi "angin\|berangin\|wind"; then WX="windy"
            else WX="ok"; fi
            # wx line simple per time
            case "$TIME_OF_DAY-$WX" in
              morning-rain) WX_LINE="hujan pagi, enak fokus di ${DAY_LOWER}" ;;
              afternoon-rain) WX_LINE="hujan siang, mending indoor di ${DAY_LOOWER}" ;;
              evening-rain) WX_LINE="hujan sore, wrap-up santai di ${DAY_LOWER}" ;;
              night-rain) WX_LINE="hujan malem, cozy mode di ${DAY_LOWER}" ;;
              morning-clear) WX_LINE="langit cerah, start mulus di ${DAY_LOWER}" ;;
              afternoon-clear) WX_LINE="cerah siang, energi naik di ${DAY_LOWER}" ;;
              evening-clear) WX_LINE="golden hour, vibes enak di ${DAY_LOWER}" ;;
              night-clear) WX_LINE="malem cerah, wind down enak di ${DAY_LOWER}" ;;
              morning-cloudy) WX_LINE="mendung pagi, no silau di ${DAY_LOWER}" ;;
              afternoon-cloudy) WX_LINE="berawan siang, nyaman gerak di ${DAY_LOWER}" ;;
              evening-cloudy) WX_LINE="sore teduh, enak closing di ${DAY_LOWER}" ;;
              night-cloudy) WX_LINE="malem teduh, santai produktif di ${DAY_LOWER}" ;;
              morning-hot) WX_LINE="pagi terik, indoor dulu di ${DAY_LOWER}" ;;
              afternoon-hot) WX_LINE="siang terik, hemat tenaga di ${DAY_LOWER}" ;;
              evening-hot) WX_LINE="sore masih panas, cooldown dulu di ${DAY_LOWER}" ;;
              night-hot) WX_LINE="malem hangat, pelan aja di ${DAY_LOWER}" ;;
              morning-windy) WX_LINE="pagi berangin, headset aman di ${DAY_LOWER}" ;;
              afternoon-windy) WX_LINE="siang berangin, indoor vibes di ${DAY_LOWER}" ;;
              evening-windy) WX_LINE="sore berangin, komuter santai di ${DAY_LOWER}" ;;
              night-windy) WX_LINE="malem berangin, cozy indoor di ${DAY_LOWER}" ;;
              *) WX_LINE="cuaca oke, pace enak di ${DAY_LOWER}" ;;
            esac
            # english first fallback
            FIRST=$(shuf -e \
              "yoooow ${DAY_LOWER} morning crew, dialed in or easing in" \
              "hey team ${DAY_LOWER} check-in, plan locked or freestyling" \
              "${DAY_LOWER} a.m. squad, coffee secured or still booting" \
              "${DAY_LOWER} roll call, green bar or low battery" \
              "${DAY_LOWER} morning crew, rain check—umbrella or hoodie" -n1)
            # indo second
            if [ "$TIME_OF_DAY" = "morning" ] && [ "$CONTEXT" != "weekend" ]; then
              GAME=$(shuf -e valorant "mobile legends" roblox -n1)
              LATER=$(shuf -e "nanti sore" "ntaran abis pulang" "malem nanti" "abis tugas kelar" -n1)
              SECOND=$(shuf -e \
                "yuk ${WX_LINE}, prioritas tugas dulu, ${GAME} ${LATER}" \
                "yok ${WX_LINE}, fokus sekolah atau kerja dulu, ${GAME} ${LATER}" \
                "gas ${WX_LINE}, rapihin to-do dulu, ${GAME} ${LATER}" \
                "gaskeun ${WX_LINE}, kerjain inti dulu, baru santai ${GAME} ${LATER}" -n1)
            else
              GAME=$(shuf -e valorant "mobile legends" roblox -n1)
              TAG=""; [ "$CONTEXT" = "weekend" ] && TAG=" <@&1374047008829997157>"
              SECOND=$(shuf -e \
                "yuk ${WX_LINE}, mabar ${GAME} santai${TAG}" \
                "yok ${WX_LINE}, ${GAME} classic dulu${TAG}" \
                "gas ${WX_LINE}, quick match ${GAME}${TAG}" \
                "gaskeun ${WX_LINE}, comms on, ${GAME} yuk${TAG}" -n1)
            fi
            DESC_RAW="${FIRST}? ${SECOND}"
            echo "🎯 Fallback built: ${DESC_RAW}"
          fi
          
          # judul & thumb
          case "$TIME_OF_DAY" in
            "morning")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="good morning skyers"; THUMB="2614"; else TITLE="yoww morning skye squad"; THUMB="2600"; fi
              ;;
            "afternoon")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="afternoon vibes skyers"; THUMB="1f327"; else TITLE="good afternoon skye squad"; THUMB="1f343"; fi
              ;;
            "evening")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="evening chill skyers"; THUMB="1f327"; else TITLE="yoww evening skye squad"; THUMB="1f307"; fi
              ;;
            "night")
              if [[ "$WEATHER_INFO" == *"hujan"* ]]; then TITLE="rainy night skyers"; THUMB="1f327"; else TITLE="good night skye squad"; THUMB="1f989"; fi
              ;;
          esac
          
          # outputs
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
          
          # Simple sticker selection
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Skye community greeting complete!"
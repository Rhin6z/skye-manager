name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="🌧️"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="🌦️"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="🔥"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="❄️"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="🍃"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="☁️"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="☀️"
          else
            WEATHER_EMOJI="🌤️"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Generate AI Greeting
        id: ai_generation
        run: |
          echo "🤖 Generating AI greeting with CONTEXTUAL approach..."
          
          # Create CONTEXTUAL Python script
          cat > /tmp/contextual_generator.py << 'EOL'
          import json
          import requests
          import os
          import sys
          import re
          import random
          import datetime
          
          def create_contextual_ai_message():
              """Creates contextually appropriate, human-like messages with proper logic"""
              day = os.environ.get('CURRENT_DAY', 'today').lower()
              time = os.environ.get('TIME_OF_DAY', 'day')
              weather = os.environ.get('WEATHER_INFO', 'cuaca enak')
              is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
              
              # Updated Indonesian slang - no more cringe "skuyyyy"
              indo_starters = ["yuuuk", "gaskeun", "gas", "ayoook", "yok"]
              slang_terms = ["anjayyy", "gileee", "gacorrr", "wkwkwkwk", "awkowkoak", "njirrr", "ygy", "ytta", "dah", "kocakk"]
              english_starters = ["yoooow", "wassuuup", "heyyy", "bro", "suuup"]
              emojis = ["🎮", "💯", "🔥", "⚡", "✨", "🎯", "💪", "🚀", "☕", "📚"]
              
              # Contextual logic based on time and day
              if time == 'morning':
                  if is_weekend:
                      # Weekend morning - gaming is OK
                      questions = [
                          f"weekend morning vibes hitting different {day}?",
                          f"bangun pagi buat gaming atau kebetulan {day}?", 
                          f"coffee first atau straight to controller {day}?",
                          f"lazy weekend morning atau productive mode {day}?"
                      ]
                      activities = [
                          "ngopi sambil valorant unrated",
                          "chill mobile legends sambil sarapan",
                          "roblox building sambil stretching", 
                          "warm up aim training weekend session"
                      ]
                      activity_emojis = ["🎮", "☕", "🔥", "✨"]
                  else:
                      # Weekday morning - encourage productivity
                      questions = [
                          f"siap sekolah/kerja atau masih butuh motivasi {day}?",
                          f"semangat {day} morning atau weekend countdown mode?",
                          f"energy level full atau masih loading {day}?",
                          f"productive {day} atau survival mode aja?"
                      ]
                      activities = [
                          "semangat sekolah/kerja dulu, gaming nanti sore",
                          "focus aktivitas dulu, valorant tunggu break time", 
                          "productive dulu, mobile legends reward nanti",
                          "gas sekolah/kerja, weekend gaming marathon menanti"
                      ]
                      activity_emojis = ["📚", "💪", "⚡", "🚀"]
              
              elif time == 'afternoon':
                  if is_weekend:
                      # Weekend afternoon - full gaming mode
                      questions = [
                          f"lunch coma atau masih energetic {day}?",
                          f"productive weekend afternoon atau santai total {day}?", 
                          f"panas siang gini perfect indoor gaming {day}?",
                          f"weekend vibes masih going strong {day}?"
                      ]
                      activities = [
                          "ranked push mobile legends bareng",
                          "competitive valorant session", 
                          "roblox adventure sambil ngadem",
                          "voice chat gaming sambil makan"
                      ]
                  else:
                      # Weekday afternoon - light gaming/break time
                      questions = [
                          f"lunch break freedom atau masih busy {day}?",
                          f"butuh gaming therapy break {day}?",
                          f"capek siang gini enak quick gaming {day}?", 
                          f"weekend masih jauh ya {day} afternoon?"
                      ]
                      activities = [
                          "quick mobile legends classic break time",
                          "valorant unrated sambil istirahat bentar",
                          "chill roblox sambil charging energy",
                          "aim training sambil snack break"
                      ]
              
              elif time == 'evening':
                  # Evening is generally OK for gaming regardless of day
                  questions = [
                      f"day was productive atau challenging {day}?",
                      f"dinner gaming session atau family time dulu {day}?",
                      f"cape seharian butuh relaxing gaming {day}?",
                      f"golden hour vibes perfect buat mabar {day}?"
                  ]
                  activities = [
                      "mabar valorant sambil dinner",
                      "mobile legends team fight bareng",
                      "roblox voice chat sambil makan", 
                      "evening gaming session santai"
                  ]
              
              else:  # night
                  if is_weekend:
                      # Weekend night - gaming marathon OK
                      questions = [
                          f"weekend night freedom atau udah ngantuk {day}?",
                          f"marathon gaming session mode {day}?",
                          f"night owl weekend energy {day}?",
                          f"weekend privilege jadi begadang legal {day}?"
                      ]
                      activities = [
                          "competitive valorant push rank",
                          "mobile legends night session marathon", 
                          "roblox building project sambil ngobrol",
                          "late night gaming dengan squad"
                      ]
                  else:
                      # Weekday night - suggest lighter activities
                      questions = [
                          f"quick gaming sebelum istirahat {day}?",
                          f"besok masih ada aktivitas atau santai {day}?",
                          f"wind down gaming atau langsung bobo {day}?",
                          f"insomnia atau sengaja begadang bentar {day}?"
                      ]
                      activities = [
                          "valorant unrated bentar sebelum tidur",
                          "mobile legends classic santai dulu",
                          "roblox chill sambil wind down", 
                          "aim training ringan sebelum istirahat"
                      ]
              
              # Build contextually appropriate message
              starter = random.choice(english_starters)
              question = random.choice(questions)
              
              indo_starter = random.choice(indo_starters)
              activity = random.choice(activities)
              slang = random.choice(slang_terms)
              emoji = random.choice(emojis if time != 'morning' or is_weekend else activity_emojis)
              
              # Weekend tag only for appropriate gaming times
              tag = ""
              if is_weekend and time in ['morning', 'afternoon', 'evening', 'night']:
                  tag = " <@&1374047008829997157>"
              
              # Indonesian day mapping
              day_indo_map = {
                  'monday': 'senin', 'tuesday': 'selasa', 'wednesday': 'rabu',
                  'thursday': 'kamis', 'friday': 'jumat', 'saturday': 'sabtu', 'sunday': 'minggu'
              }
              day_indo = day_indo_map.get(day, day)
              
              # Create contextually logical message
              message = f"{starter} {question} {indo_starter}{tag} {activity}, {weather} di {day_indo} gini {slang} cocok! {emoji}"
              
              return message
          
          try:
              # Create MUCH more specific prompt for weekday mornings
              day = os.environ.get('CURRENT_DAY', 'today').lower()
              time = os.environ.get('TIME_OF_DAY', 'day')
              is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
              
              if time == 'morning' and not is_weekend:
                  # Weekday morning - very specific prompt
                  prompt = f"""Write 2 sentences for {day} morning Discord greeting:
          
          1. English: "yoooow/wassuuup {day} morning crew, [question about school/work readiness]?" (lowercase)
          2. Indonesian: "yuuuk/gaskeun [encourage school/work first, gaming later], cuaca [weather] gini [slang] cocok buat semangat! [emoji]" (lowercase)
          
          Focus: Encourage productivity first, gaming as reward later.
          Slang: anjayyy, gileee, wkwkwkwk, njirrr, ygy, dah
          NO gaming invites for weekday mornings.
          
          Write only the 2 sentences:"""
              else:
                  # Other times - regular prompt  
                  prompt = f"""Write 2 sentences for {day} {time} Discord greeting:
          
          1. English: "yoooow/wassuuup {day} {time}, [contextual question]?" (lowercase)
          2. Indonesian: "yuuuk/gaskeun [appropriate activity], cuaca [weather] gini [slang] perfect! [emoji]" (lowercase)
          
          Context: {day} {time}, weekend: {is_weekend}
          Games: valorant, mobile legends, roblox only
          Slang: anjayyy, gileee, wkwkwkwk, njirrr, ygy, dah
          
          Write only the 2 sentences:"""
              
              api_key = os.environ.get('GEMINI_API_KEY')
              
              if api_key:
                  url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent?key={api_key}"
                  
                  payload = {
                      "contents": [{"parts": [{"text": prompt}]}],
                      "generationConfig": {
                          "temperature": 0.7,
                          "maxOutputTokens": 80,
                          "topP": 0.9
                      }
                  }
                  
                  print("📡 Trying contextual Gemini prompt...")
                  response = requests.post(url, json=payload, timeout=15)
                  
                  if response.status_code == 200:
                      data = response.json()
                      print(f"Response: {str(data)[:150]}...")
                      
                      if 'candidates' in data and data['candidates']:
                          candidate = data['candidates'][0]
                          
                          if candidate.get('finishReason') != 'MAX_TOKENS':
                              try:
                                  if 'content' in candidate and 'parts' in candidate['content']:
                                      parts = candidate['content']['parts']
                                      if parts and 'text' in parts[0]:
                                          text_content = parts[0]['text'].strip().lower()
                                          
                                          # Clean the text
                                          clean_text = re.sub(r'\*+', '', text_content)
                                          clean_text = re.sub(r'\n+', ' ', clean_text)
                                          clean_text = ' '.join(clean_text.split())
                                          
                                          # Validate context appropriateness
                                          is_appropriate = True
                                          if time == 'morning' and not is_weekend:
                                              # Check if it inappropriately invites gaming
                                              gaming_invites = ['apex', 'valorant', 'mobile legends', 'roblox', 'gaming', 'main', 'mabar']
                                              if any(invite in clean_text for invite in gaming_invites):
                                                  is_appropriate = False
                                                  print("⚠️ Inappropriate weekday morning gaming invite detected")
                                          
                                          if is_appropriate and len(clean_text) > 40 and len(clean_text) < 200:
                                              with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                                                  f.write(clean_text)
                                              print(f"✅ Contextual Gemini success: {clean_text[:50]}...")
                                              sys.exit(0)
                              except:
                                  pass
              
              # Fallback to contextual generation
              print("🎲 Using contextual generation...")
              message = create_contextual_ai_message()
              
              with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                  f.write(message)
              print(f"✅ Contextual message: {message[:50]}...")
              sys.exit(0)
              
          except Exception as e:
              print(f"⚠️ Exception: {e}")
              message = create_contextual_ai_message()
              with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                  f.write(message)
              print(f"✅ Exception fallback: {message[:50]}...")
              sys.exit(0)
          EOL

          # Create Discord payload script
          cat > /tmp/discord_script.py << 'EOL'
          import json
          import os
          
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', 'what\'s good everyone!')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          
          # Convert description to lowercase
          desc = desc_raw.lower()
          
          # Add signature
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {
                  "url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"
              },
              "footer": {
                  "text": "chill gaming vibes",
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Payload created")
          EOL

          # Execute with environment variables for contextual generation
          echo "🧪 Executing CONTEXTUAL generator..."
          CURRENT_DAY="${{ steps.context.outputs.CURRENT_DAY }}" \
          TIME_OF_DAY="${{ steps.context.outputs.TYPE }}" \
          WEATHER_INFO="${{ steps.weather.outputs.WEATHER_INFO }}" \
          IS_WEEKEND="${{ steps.context.outputs.CONTEXT == 'weekend' }}" \
          GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
          python3 /tmp/contextual_generator.py
          
          # This should ALWAYS succeed now
          if [[ -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 Generated text: $AI_TEXT"
            
            # RELAXED validation - if we have reasonable content, use it
            if [[ ${#AI_TEXT} -gt 30 && ${#AI_TEXT} -lt 250 ]]; then
              
              # Auto-fix weekend tags if needed
              if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                HAS_TAG=$(echo "$AI_TEXT" | grep -E "<@&[0-9]+>" || echo "")
                if [[ -z "$HAS_TAG" ]]; then
                  echo "⚠️ Adding weekend tag..."
                  # Find good insertion point after first sentence
                  if [[ "$AI_TEXT" == *"?"* ]]; then
                    AI_TEXT=$(echo "$AI_TEXT" | sed 's/? /? <@&1374047008829997157> /')
                  else
                    AI_TEXT="$AI_TEXT <@&1374047008829997157>"
                  fi
                fi
              else
                # Remove tags for weekdays
                AI_TEXT=$(echo "$AI_TEXT" | sed 's/<@&[0-9]*>//g')
              fi
              
              # Ensure proper length
              if [[ ${#AI_TEXT} -gt 200 ]]; then
                AI_TEXT="${AI_TEXT:0:190}..."
              fi
              
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "✅ AI SUCCESS: ${#AI_TEXT} chars"
            else
              echo "❌ Generated text invalid length: ${#AI_TEXT}"
              USE_AI=false
            fi
          else
            echo "❌ No AI response file generated"
            USE_AI=false
          fi
          
          # ONLY use traditional fallback if everything fails (this should be rare now)
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using traditional fallback (this shouldn't happen often)..."
            
            WEATHER_MENTION="${{ steps.weather.outputs.WEATHER_INFO }}"
            WEATHER_EMOJI="${{ steps.weather.outputs.WEATHER_EMOJI }}"
            DAY_LOWER=$(echo "${{ steps.context.outputs.CURRENT_DAY }}" | tr '[:upper:]' '[:lower:]')
            
            case "${{ steps.context.outputs.TYPE }}" in
              "morning")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="yoooow ${DAY_LOWER} morning crew, weekend vibes hitting different? gaskeun <@&1374047008829997157> warm up aim sambil ngopi, ${WEATHER_MENTION} di ${DAY_LOWER} gini anjayyy bgt buat grinding! ${WEATHER_EMOJI}"
                else
                  DESC_RAW="heyyy ${DAY_LOWER} morning gang, ready for the day or still zombie mode? semangat ${DAY_LOWER} ini wkwkwkwk, ${WEATHER_MENTION} pas bgt buat fresh start ygy! ${WEATHER_EMOJI}"
                fi
                ;;
              "afternoon")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="wassuuup ${DAY_LOWER} afternoon squad, lunch coma or still grinding? yuuuk <@&1374047008829997157> quick match valorant, ${WEATHER_MENTION} di ${DAY_LOWER} gini gileee enak bgt dah! ${WEATHER_EMOJI}"
                else
                  DESC_RAW="bro ${DAY_LOWER} siang, lunch break atau masih grind? istirahat dulu kali yak, ${WEATHER_MENTION} di ${DAY_LOWER} gini anjayyy enak buat refreshing! ${WEATHER_EMOJI}"
                fi
                ;;
              "evening")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="suuup ${DAY_LOWER} evening legends, weekend still going strong? yuuuk <@&1374047008829997157> mabar valorant nih, ${WEATHER_MENTION} di ${DAY_LOWER} sore gini wkwkwkwk perfect bet! ${WEATHER_EMOJI}"
                else
                  DESC_RAW="yoooow ${DAY_LOWER} evening, school/work done for today? gas santai dulu abis capek seharian, ${WEATHER_MENTION} di ${DAY_LOWER} gini ygy pas buat relaxing! ${WEATHER_EMOJI}"
                fi
                ;;
              "night")
                if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                  DESC_RAW="wassuuup ${DAY_LOWER} night gang, still awake and gaming? yuuuk <@&1374047008829997157> push rank valorant, ${WEATHER_MENTION} malem ${DAY_LOWER} gini gacorrr sih buat naikin elo! ${WEATHER_EMOJI}"
                else
                  if [[ "${{ steps.context.outputs.CURRENT_DAY }}" == "Sunday" ]]; then
                    DESC_RAW="heyyy sunday night crew, ready for monday or denial mode? jgn begadang y besok udh senin wkwkwkwk, ${WEATHER_MENTION} gini enak buat bobo ygy! ${WEATHER_EMOJI}"
                  else
                    DESC_RAW="bro ${DAY_LOWER} malam, grinding atau mau bobo soon? jgn begadang mulu deh besok ${DAY_LOWER}, ${WEATHER_MENTION} gini njirrr enak bat buat istirahat! ${WEATHER_EMOJI}"
                  fi
                fi
                ;;
            esac
            
            echo "🎯 Traditional fallback: ${DESC_RAW}"
          fi
          
          # Set title and thumbnail based on time and weather
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="☔ Rainy Morning Vibes"
              THUMB="2614"
            else
              TITLE="☀️ Morning Skye Squad"
              THUMB="2600"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Afternoon Chill"
              THUMB="1f327"
            else
              TITLE="🍃 Afternoon Chill Mode"
              THUMB="1f343"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Evening Chill"
              THUMB="1f327"
            else
              TITLE="🌇 Evening Chill Squad"
              THUMB="1f307"
            fi
          else
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Night Gaming"
              THUMB="1f327"
            else
              TITLE="🦉 Late Night Squad"
              THUMB="1f989"
            fi
          fi
          
          # Output values for next steps
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
          
          # Simple sticker selection
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Skye community greeting complete!"
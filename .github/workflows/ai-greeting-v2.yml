name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (BMKG Yogyakarta)
        id: weather
        run: |
          WEATHER_INFO=""
          echo "🌤️ Fetching BMKG weather for Yogyakarta..."
          
          BMKG_RAW=$(curl -s "https://api.bmkg.go.id/publik/prakiraan-cuaca?adm4=34.04.07.2001" --connect-timeout 8 --max-time 15 || echo "")
            
          if [[ -n "$BMKG_RAW" && "$BMKG_RAW" != *"error"* && "$BMKG_RAW" != *"Error"* ]]; then
            echo "✅ BMKG API response received"
            
            TEMP=$(echo "$BMKG_RAW" | grep -o '"t":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            DESC=$(echo "$BMKG_RAW" | grep -o '"weather_desc":"[^"]*"' | head -1 | cut -d'"' -f4 || echo "")
            
            if [[ -n "$TEMP" || -n "$DESC" ]]; then
              echo "🌡️ Raw: $TEMP°C | $DESC"
              
              WEATHER_CASUAL=""
              if [[ -n "$DESC" ]]; then
                DESC_LOWER=$(echo "$DESC" | tr '[:upper:]' '[:lower:]')
                
                if [[ "$DESC_LOWER" == *"hujan"* || "$DESC_LOWER" == *"rain"* ]]; then
                  WEATHER_CASUAL="hujan"
                elif [[ "$DESC_LOWER" == *"gerimis"* || "$DESC_LOWER" == *"drizzle"* ]]; then
                  WEATHER_CASUAL="gerimis"
                elif [[ "$DESC_LOWER" == *"panas"* || "$DESC_LOWER" == *"hot"* || "$DESC_LOWER" == *"terik"* ]]; then
                  WEATHER_CASUAL="panas"
                elif [[ "$DESC_LOWER" == *"dingin"* || "$DESC_LOWER" == *"cold"* ]]; then
                  WEATHER_CASUAL="dingin"
                elif [[ "$DESC_LOWER" == *"sejuk"* || "$DESC_LOWER" == *"cool"* || "$DESC_LOWER" == *"adem"* ]]; then
                  WEATHER_CASUAL="sejuk"
                elif [[ "$DESC_LOWER" == *"berawan"* || "$DESC_LOWER" == *"cloudy"* ]]; then
                  WEATHER_CASUAL="berawan"
                elif [[ "$DESC_LOWER" == *"cerah"* || "$DESC_LOWER" == *"sunny"* || "$DESC_LOWER" == *"clear"* ]]; then
                  WEATHER_CASUAL="cerah"
                else
                  WEATHER_CASUAL="enak"
                fi
              fi
              
              if [[ -n "$TEMP" && -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL} ${TEMP}°c"
              elif [[ -n "$WEATHER_CASUAL" ]]; then
                WEATHER_INFO="cuaca ${WEATHER_CASUAL}"
              elif [[ -n "$TEMP" ]]; then
                WEATHER_INFO="${TEMP}°c"
              fi
              
              echo "✅ BMKG Weather: $WEATHER_INFO"
            else
              echo "⚠️ Could not extract weather data from BMKG response"
              WEATHER_INFO="cuaca enak"
            fi
          else
            echo "❌ BMKG API failed, using fallback"
            WEATHER_INFO="cuaca enak"
          fi
          
          # Define weather-appropriate emojis for later use
          WEATHER_EMOJI=""
          if [[ "$WEATHER_INFO" == *"hujan"* ]]; then
            WEATHER_EMOJI="🌧️"
          elif [[ "$WEATHER_INFO" == *"gerimis"* ]]; then
            WEATHER_EMOJI="🌦️"
          elif [[ "$WEATHER_INFO" == *"panas"* ]]; then
            WEATHER_EMOJI="🔥"
          elif [[ "$WEATHER_INFO" == *"dingin"* ]]; then
            WEATHER_EMOJI="❄️"
          elif [[ "$WEATHER_INFO" == *"sejuk"* ]]; then
            WEATHER_EMOJI="🍃"
          elif [[ "$WEATHER_INFO" == *"berawan"* ]]; then
            WEATHER_EMOJI="☁️"
          elif [[ "$WEATHER_INFO" == *"cerah"* ]]; then
            WEATHER_EMOJI="☀️"
          else
            WEATHER_EMOJI="🌤️"
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT
          echo "WEATHER_EMOJI=$WEATHER_EMOJI" >> $GITHUB_OUTPUT

      - name: Create Direct OpenAI Generator
        id: create_generator
        run: |
          # Create a simple and reliable OpenAI generation script
          cat > /tmp/openai_generator.py << 'EOL'
          import json
          import requests
          import os
          import sys
          import random
          
          def generate_with_openai():
              """Generate greeting using OpenAI API"""
              try:
                  api_key = os.environ.get('OPENAI_API_KEY')
                  if not api_key:
                      print("❌ No OpenAI API key found")
                      return None
                  
                  # Extract context variables
                  day = os.environ.get('CURRENT_DAY', 'today').lower()
                  time_of_day = os.environ.get('TIME_OF_DAY', 'day')
                  weather = os.environ.get('WEATHER_INFO', 'nice weather')
                  is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
                  
                  # Prepare tag based on weekend status
                  tag = " <@&1374047008829997157>" if is_weekend else ""
                  
                  # Super simple prompt focused on the exact output format
                  system_message = "You are a casual Indonesian gaming Discord admin. Keep responses lowercase only."
                  
                  user_message = f"""
                  Write exactly TWO sentences for a Discord greeting:
                  
                  1. An English question starting with "yoooow", "wassuuup", "heyyy", or "bro" about {day} {time_of_day} gaming. End with "?"
                  
                  2. An Indonesian invitation starting with "yuuuk", "gaskeun", or "gas" that includes:
                     - Indonesian gaming slang like "njirrr", "bjirrr", "ygy", "anjay", or "wkwkwk"
                     - Reference to {weather}
                     - Reference to {day} in Indonesian
                     - {'Include tag <@&1374047008829997157>' if is_weekend else 'No tags'}
                     - End with an emoji
                  
                  IMPORTANT: Just write the two sentences with NO additional text. All lowercase. Total under 180 characters.
                  """
                  
                  headers = {
                      "Content-Type": "application/json",
                      "Authorization": f"Bearer {api_key}"
                  }
                  
                  payload = {
                      "model": "gpt-3.5-turbo",
                      "messages": [
                          {"role": "system", "content": system_message},
                          {"role": "user", "content": user_message}
                      ],
                      "temperature": 0.7,
                      "max_tokens": 150
                  }
                  
                  print("📡 Sending request to OpenAI API...")
                  response = requests.post(
                      "https://api.openai.com/v1/chat/completions",
                      headers=headers,
                      json=payload,
                      timeout=20
                  )
                  
                  if response.status_code == 200:
                      data = response.json()
                      if 'choices' in data and len(data['choices']) > 0:
                          message = data['choices'][0]['message']['content'].strip()
                          print(f"✅ OpenAI generated: {message[:50]}...")
                          return message
                      else:
                          print("❌ No choices in OpenAI response")
                  else:
                      print(f"❌ OpenAI API error {response.status_code}: {response.text}")
                  
                  return None
              except Exception as e:
                  print(f"❌ OpenAI generation error: {str(e)}")
                  return None
          
          def generate_with_template():
              """Generate greeting using pre-built templates with randomization"""
              try:
                  # Extract context variables
                  day = os.environ.get('CURRENT_DAY', 'today').lower()
                  time_of_day = os.environ.get('TIME_OF_DAY', 'day')
                  weather = os.environ.get('WEATHER_INFO', 'nice weather')
                  is_weekend = os.environ.get('IS_WEEKEND', 'false').lower() == 'true'
                  weather_emoji = os.environ.get('WEATHER_EMOJI', '🌤️')
                  
                  # Prepare tag based on weekend status
                  tag = " <@&1374047008829997157>" if is_weekend else ""
                  
                  # First part variations (English questions)
                  english_openers = ["yoooow", "wassuuup", "heyyy", "suuup", "bro", "guyss"]
                  english_templates = [
                      "{opener} {day} {time} squad, ready for some gaming action?",
                      "{opener} {day} {time} crew, gaming plans or chilling today?",
                      "{opener} {day} {time} gang, energy level for gaming looking good?",
                      "{opener} {day} {time} peeps, vibes good for some ranked matches?",
                      "{opener} {day} {time} gamers, grinding or taking it easy today?",
                      "{opener} {time} {day}, anyone up for some competitive matches?"
                  ]
                  
                  # Second part variations (Indonesian with slang)
                  indo_openers = ["yuuuk", "gaskeun", "gas", "skuyyyy", "ayoook"]
                  indo_slang = ["njirrr", "bjirrr", "ygy", "anjay", "wkwkwk", "hehehehe"]
                  indo_templates = [
                      "{opener}{tag} mabar valorant, {weather} di {day} gini {slang} enak banget buat grinding! {emoji}",
                      "{opener}{tag} push rank bareng, {weather} {day} gini {slang} pas buat competitive mode! {emoji}",
                      "{opener}{tag} main game sambil santai, {weather} di {day} gini {slang} bikin mood naik! {emoji}",
                      "{opener}{tag} ngegame bareng, {weather} di {day} gini {slang} cocok buat fokus! {emoji}",
                      "{opener}{tag} warming up aim, {weather} {day} gini {slang} perfect buat headshot! {emoji}"
                  ]
                  
                  # Random emojis
                  emojis = ["🎮", "🔥", "💯", "🏆", "✨", "🚀", weather_emoji]
                  
                  # Generate the parts
                  english_opener = random.choice(english_openers)
                  english_template = random.choice(english_templates)
                  english_part = english_template.format(opener=english_opener, day=day, time=time_of_day)
                  
                  indo_opener = random.choice(indo_openers)
                  indo_template = random.choice(indo_templates)
                  indo_slang = random.choice(indo_slang)
                  emoji = random.choice(emojis)
                  indo_part = indo_template.format(opener=indo_opener, tag=tag, weather=weather, day=day, slang=indo_slang, emoji=emoji)
                  
                  # Combine
                  result = f"{english_part} {indo_part}"
                  print(f"✅ Template generated: {result[:50]}...")
                  return result
                  
              except Exception as e:
                  print(f"❌ Template generation error: {str(e)}")
                  return "wassuuup gamers, how's everyone doing? yuuuk mabar valorant, cuaca enak nih wkwkwk! 🎮"
          
          def main():
              # First try OpenAI
              openai_result = generate_with_openai()
              
              # If successful, save and exit
              if openai_result:
                  with open('/tmp/greeting.txt', 'w', encoding='utf-8') as f:
                      f.write(openai_result)
                  print("✅ Used OpenAI generation")
                  sys.exit(0)
              
              # Otherwise use template fallback
              print("⚠️ Falling back to template generation")
              template_result = generate_with_template()
              with open('/tmp/greeting.txt', 'w', encoding='utf-8') as f:
                  f.write(template_result)
              print("✅ Used template generation")
              sys.exit(0)
          
          if __name__ == "__main__":
              main()
          EOL
          
          # Create Discord payload script
          cat > /tmp/discord_script.py << 'EOL'
          import json
          import os
          
          title = os.environ.get('TITLE', 'Skye Squad')
          desc_raw = os.environ.get('DESC', 'what\'s good everyone!')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          
          # Convert description to lowercase
          desc = desc_raw.lower()
          
          # Add signature
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {
                  "url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"
              },
              "footer": {
                  "text": "chill gaming vibes",
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Payload created")
          EOL

      - name: Generate Greeting
        id: ai_generation
        run: |
          echo "🤖 Generating greeting message..."
          
          # Execute the OpenAI generator script with all context
          CURRENT_DAY="${{ steps.context.outputs.CURRENT_DAY }}" \
          TIME_OF_DAY="${{ steps.context.outputs.TYPE }}" \
          WEATHER_INFO="${{ steps.weather.outputs.WEATHER_INFO }}" \
          WEATHER_EMOJI="${{ steps.weather.outputs.WEATHER_EMOJI }}" \
          IS_WEEKEND="${{ steps.context.outputs.CONTEXT == 'weekend' }}" \
          OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          python3 /tmp/openai_generator.py
          
          if [[ -s /tmp/greeting.txt ]]; then
            GREETING=$(cat /tmp/greeting.txt)
            echo "🎯 Generated greeting: $GREETING"
            
            # Verify and fix if needed
            HAS_ENGLISH=$(echo "$GREETING" | grep -E "\?" || echo "")
            HAS_INDONESIAN=$(echo "$GREETING" | grep -iE "(yu+k|gas|ayo+k*|hayu+k|gaskeun|skuyy)" || echo "")
            
            # Weekend vs Weekday tag check
            if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
              HAS_TAG=$(echo "$GREETING" | grep -E "<@&[0-9]+>" || echo "")
              if [[ -z "$HAS_TAG" ]]; then
                echo "⚠️ Missing weekend tag, adding..."
                
                # Add tag more intelligently - find the second sentence
                QUESTION_END=$(echo "$GREETING" | grep -b -o "?" | head -1 | cut -d':' -f1)
                if [[ -n "$QUESTION_END" && $QUESTION_END -gt 10 ]]; then
                  # Insert after the question mark
                  FIRST_PART="${GREETING:0:$((QUESTION_END+1))}"
                  SECOND_PART="${GREETING:$((QUESTION_END+1))}"
                  # Add tag at beginning of second part
                  GREETING="$FIRST_PART <@&1374047008829997157>$SECOND_PART"
                  echo "✅ Added tag: $GREETING"
                fi
              fi
            else
              # Make sure weekday has no tag
              HAS_TAG=$(echo "$GREETING" | grep -E "<@&[0-9]+>" || echo "")
              if [[ -n "$HAS_TAG" ]]; then
                echo "⚠️ Removing tag for weekday..."
                GREETING=$(echo "$GREETING" | sed "s/<@&[0-9]*>//g")
              fi
            fi
            
            # Make sure it's not too long
            if [[ ${#GREETING} -gt 200 ]]; then
              echo "⚠️ Greeting too long, trimming..."
              GREETING="${GREETING:0:197}..."
            fi
            
            # Set final greeting
            DESC_RAW="$GREETING"
            USE_AI=true
          else
            echo "❌ Generation failed, using emergency fallback"
            
            # Emergency fallback if everything else fails
            DAY_LOWER=$(echo "${{ steps.context.outputs.CURRENT_DAY }}" | tr '[:upper:]' '[:lower:]')
            WEATHER_MENTION="${{ steps.weather.outputs.WEATHER_INFO }}"
            WEATHER_EMOJI="${{ steps.weather.outputs.WEATHER_EMOJI }}"
            
            if [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
              DESC_RAW="wassuuup ${DAY_LOWER} ${{ steps.context.outputs.TYPE }} squad, weekend vibes hitting different? yuuuk <@&1374047008829997157> mabar valorant, ${WEATHER_MENTION} di ${DAY_LOWER} gini anjay bgt buat grinding! ${WEATHER_EMOJI}"
            else
              DESC_RAW="yoooow ${DAY_LOWER} ${{ steps.context.outputs.TYPE }} gang, energy level looking good? gas push rank sambil santai, ${WEATHER_MENTION} pas bgt buat fresh start ygy! ${WEATHER_EMOJI}"
            fi
            
            USE_AI=false
          fi
          
          # Set title and thumbnail based on time and weather
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="☔ Rainy Morning Vibes"
              THUMB="2614"
            else
              TITLE="☀️ Morning Skye Squad"
              THUMB="2600"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Afternoon Chill"
              THUMB="1f327"
            else
              TITLE="🍃 Afternoon Chill Mode"
              THUMB="1f343"
            fi
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Evening Chill"
              THUMB="1f327"
            else
              TITLE="🌇 Evening Chill Squad"
              THUMB="1f307"
            fi
          else
            if [[ "${{ steps.weather.outputs.WEATHER_INFO }}" == *"hujan"* ]]; then
              TITLE="🌧️ Rainy Night Gaming"
              THUMB="1f327"
            else
              TITLE="🦉 Late Night Squad"
              THUMB="1f989"
            fi
          fi
          
          # Output values for next steps
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Run Python script with environment variables
          TITLE="$TITLE" DESC="$DESC" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/discord_script.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Select webhook based on test mode
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
          
          # Simple sticker selection
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Skye community greeting complete!"
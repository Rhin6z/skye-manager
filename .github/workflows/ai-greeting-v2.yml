name: Fixed AI Discord Greeting

on:
  schedule:
    - cron: '0 0 * * 1-5'    # 7 AM WIB weekdays
    - cron: '0 5 * * 1-5'    # 12 PM WIB weekdays  
    - cron: '0 10 * * 1-5'   # 5 PM WIB weekdays
    - cron: '0 15 * * 1-5'   # 10 PM WIB weekdays
    - cron: '0 0 * * 6,0'    # 7 AM WIB weekends
    - cron: '0 5 * * 6,0'    # 12 PM WIB weekends
    - cron: '0 10 * * 6,0'   # 5 PM WIB weekends
    - cron: '0 15 * * 6,0'   # 10 PM WIB weekends
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          # Check if running from OpenWrt (no delay needed)
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          # Time info
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          # Determine type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            case "${{ github.event.schedule }}" in
              "0 0 * * 1-5"|"0 0 * * 6,0") TYPE="morning" ;;
              "0 5 * * 1-5"|"0 5 * * 6,0") TYPE="afternoon" ;;
              "0 10 * * 1-5"|"0 10 * * 6,0") TYPE="evening" ;;
              "0 15 * * 1-5"|"0 15 * * 6,0") TYPE="night" ;;
            esac
          fi
          
          # Context
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          # Special context
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Get Weather (Optional)
        id: weather
        run: |
          WEATHER_INFO=""
          FETCH_WEATHER=false
          
          # Only fetch weather if forced or random 25% chance
          if [[ "${{ github.event.inputs.force_weather }}" == "true" ]]; then
            FETCH_WEATHER=true
          elif [[ $((RANDOM % 4)) -eq 0 ]]; then
            FETCH_WEATHER=true
          fi
          
          if [[ "$FETCH_WEATHER" == "true" ]]; then
            echo "🌤️ Fetching weather..."
            WEATHER_RAW=$(curl -s "http://wttr.in/Jakarta?format=%t+%C" --connect-timeout 5 --max-time 10 || echo "")
            
            if [[ -n "$WEATHER_RAW" && "$WEATHER_RAW" != *"Unknown"* ]]; then
              # Simple weather parsing
              TEMP=$(echo "$WEATHER_RAW" | cut -d' ' -f1)
              DESC=$(echo "$WEATHER_RAW" | cut -d' ' -f2-)
              
              if [[ -n "$TEMP" && "$TEMP" != "+Unknown" ]]; then
                WEATHER_INFO=" with $TEMP $DESC"
                echo "✅ Weather: $WEATHER_INFO"
              fi
            fi
          fi
          
          echo "WEATHER_INFO=$WEATHER_INFO" >> $GITHUB_OUTPUT

      - name: Generate AI Greeting
        id: ai_generation
        run: |
          echo "🤖 Generating AI greeting..."
          
          # Create simplified prompt
          cat > /tmp/prompt.txt << 'EOF'
          Create a casual Discord greeting for Indonesian gaming friends.
          
          Context: TYPE_PLACEHOLDER on CONTEXT_PLACEHOLDER
          Time: CURRENT_DAY_PLACEHOLDER (CURRENT_DATE_PLACEHOLDER) at CURRENT_TIME_PLACEHOLDER WIB
          Special: SPECIAL_CONTEXT_PLACEHOLDER
          Weather: WEATHER_INFO_PLACEHOLDER
          
          Requirements:
          - Write like a 100% real human friend texting gaming buddies
          - Mix Indonesian and English naturally (40% Indo, 60% English)
          - Use NATURAL language mixing - complete thoughts per language, not word-by-word mixing
          - Structure: English greeting/question + Indonesian follow-up/invitation
          - Use trendy extended words: "yooooo", "wassuppp", "heyyyy", "chillinnnnn"
          - Gaming references: valorant, roblox, mobile legends/emel/ml, voice chat/vc
          - Indonesian slang: gabut, malazz, cpekk, seneng, yokk, anjayy, gokill, kocakkk, cokk, coyh
          - Personal touches: actual activities, mood, plans
          - 2 sentences: first English (greeting/question), second Indonesian (invitation/activity)
          
          Examples:
          yooooo what's gooddddd everyone, how's everyone doing? gabut nih mau mabar valorant atau vc aja skuy!
          wassuppppp guys hope y'all are chilling! udah sarapan belum? yuk main roblox sambil ngobrol
          heyyyy squad what's the vibeeeee tonight? males tidur nih, siapa mau 1v1 valorant atau vc?
          ayooo how was your day everyone? weekend vibes nih perfect buat mabar emel push rank!
          
          Write ONLY the greeting message - no titles, no formatting, just the casual text!
          EOF
          
          # Replace placeholders
          sed -i "s/TYPE_PLACEHOLDER/${{ steps.context.outputs.TYPE }}/g" /tmp/prompt.txt
          sed -i "s/CONTEXT_PLACEHOLDER/${{ steps.context.outputs.CONTEXT }}/g" /tmp/prompt.txt
          sed -i "s/CURRENT_DAY_PLACEHOLDER/${{ steps.context.outputs.CURRENT_DAY }}/g" /tmp/prompt.txt
          sed -i "s/CURRENT_DATE_PLACEHOLDER/${{ steps.context.outputs.CURRENT_DATE }}/g" /tmp/prompt.txt
          sed -i "s/CURRENT_TIME_PLACEHOLDER/${{ steps.context.outputs.CURRENT_TIME }}/g" /tmp/prompt.txt
          sed -i "s/SPECIAL_CONTEXT_PLACEHOLDER/${{ steps.context.outputs.SPECIAL_CONTEXT }}/g" /tmp/prompt.txt
          sed -i "s/WEATHER_INFO_PLACEHOLDER/${{ steps.weather.outputs.WEATHER_INFO }}/g" /tmp/prompt.txt
          
          # Try AI generation with simplified approach
          AI_SUCCESS=false
          
          python3 << 'PYTHON_EOF'
          import json
          import requests
          import os
          import sys
          import re
          
          try:
              with open('/tmp/prompt.txt', 'r') as f:
                  prompt = f.read().strip()
              
              api_key = os.environ.get('GEMINI_API_KEY')
              if not api_key:
                  sys.exit(1)
              
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite:generateContent?key={api_key}"
              
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.9,
                      "maxOutputTokens": 300,
                      "topP": 0.95
                  }
              }
              
              response = requests.post(url, json=payload, timeout=20)
              
              if response.status_code == 200:
                  data = response.json()
                  if 'candidates' in data and len(data['candidates']) > 0:
                      ai_text = data['candidates'][0]['content']['parts'][0]['text']
                      
                      # SIMPLIFIED PARSING - just clean the text
                      clean_text = ai_text.strip()
                      
                      # Remove any markdown formatting
                      clean_text = re.sub(r'\*\*([^*]+)\*\*', r'\1', clean_text)
                      clean_text = re.sub(r'\*([^*]+)\*', r'\1', clean_text)
                      clean_text = re.sub(r'`([^`]+)`', r'\1', clean_text)
                      
                      # Remove any structured format attempts
                      lines = clean_text.split('\n')
                      for line in lines:
                          line = line.strip()
                          # Skip format labels and empty lines
                          if (line and not line.startswith(('TITLE:', 'DESC:', 'FOOTER:', 'Message:', '##', '#', '-', '*')) 
                              and not line.lower().startswith(('greeting:', 'response:', 'output:'))
                              and len(line) > 20):
                              # Found our greeting
                              with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                                  f.write(line)
                              print("✅ AI success")
                              sys.exit(0)
                      
                      # If no good line found, use first substantial line
                      substantial_lines = [l.strip() for l in lines if len(l.strip()) > 20]
                      if substantial_lines:
                          with open('/tmp/ai_response.txt', 'w', encoding='utf-8') as f:
                              f.write(substantial_lines[0])
                          print("✅ AI success (fallback)")
                          sys.exit(0)
              
              sys.exit(1)
              
          except Exception as e:
              print(f"❌ AI error: {e}")
              sys.exit(1)
          PYTHON_EOF
          
          # Check AI result
          if [[ $? -eq 0 && -s /tmp/ai_response.txt ]]; then
            AI_TEXT=$(cat /tmp/ai_response.txt)
            echo "🎯 AI generated: $AI_TEXT"
            
            # Validate AI text
            if [[ ${#AI_TEXT} -gt 25 && ${#AI_TEXT} -lt 400 ]]; then
              DESC_RAW="$AI_TEXT"
              USE_AI=true
              echo "✅ AI text validated and accepted"
            else
              echo "⚠️ AI text length invalid: ${#AI_TEXT} chars"
              USE_AI=false
            fi
          else
            echo "❌ AI generation failed"
            USE_AI=false
          fi
          
          # Enhanced fallback system
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using enhanced fallback..."
            
            # Weather integration for fallback
            WEATHER_MENTION="${{ steps.weather.outputs.WEATHER_INFO }}"
            
            case "${{ steps.context.outputs.TYPE }}" in
              "morning")
                if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "monday_motivation" ]]; then
                  DESC_RAW="wassuppppp everyone, how's monday treating y'all? fresh start nih yuk mabar valorant atau ngobrol di vc skuy${WEATHER_MENTION}!"
                else
                  DESC_RAW="yooooo good morning squad, hope y'all slept well! udah minum kopi belum? yuk main roblox sambil vc${WEATHER_MENTION}"
                fi
                ;;
              "afternoon")
                if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "hump_day" ]]; then
                  DESC_RAW="heyyyy how's your wednesday going? udah setengah jalan weekend nih yuk mabar emel push rank${WEATHER_MENTION}!"
                else
                  DESC_RAW="ayooo what's the vibeeeee this afternoon? agak gabut nih siapa mau valorant atau ngobrol di vc${WEATHER_MENTION}?"
                fi
                ;;
              "evening")
                if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "weekend_countdown" ]]; then
                  DESC_RAW="yooooo friday evening finally! besok libur dah perfect buat gaming marathon valorant atau roblox skuy${WEATHER_MENTION}!"
                else
                  DESC_RAW="wassup how was your day everyone? golden hour vibes nih yuk santai main game sambil vc${WEATHER_MENTION}"
                fi
                ;;
              "night")
                if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "sunday_prep" ]]; then
                  DESC_RAW="heyyyy night owls how's sunday evening? weekend ending tapi masih sempat last gaming session di vc${WEATHER_MENTION}!"
                else
                  DESC_RAW="ayooo who's still awake? perfect late night vibes buat cozy valorant atau ngobrol random di vc${WEATHER_MENTION}"
                fi
                ;;
            esac
          fi
          
          # Generate creative title based on type and context
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") 
              if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "monday_motivation" ]]; then
                TITLE="☕ Monday Fresh Start"
              elif [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                TITLE="🌅 Weekend Morning Chill"
              else
                TITLE="☀️ Good Morning Gamers"
              fi
              ;;
            "afternoon") 
              if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "hump_day" ]]; then
                TITLE="🐪 Hump Day Check-in"
              elif [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                TITLE="🌤️ Weekend Afternoon Vibes"
              else
                TITLE="🍃 Midday Squad Update"
              fi
              ;;
            "evening") 
              if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "weekend_countdown" ]]; then
                TITLE="� Friday Night Energy"
              elif [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                TITLE="�🌆 Weekend Golden Hour"
              else
                TITLE="🌇 Evening Chill Mode"
              fi
              ;;
            "night") 
              if [[ "${{ steps.context.outputs.SPECIAL_CONTEXT }}" == "sunday_prep" ]]; then
                TITLE="🌙 Sunday Night Feels"
              elif [[ "${{ steps.context.outputs.CONTEXT }}" == "weekend" ]]; then
                TITLE="✨ Weekend Night Owls"
              else
                TITLE="🦉 Late Night Squad"
              fi
              ;;
          esac
          
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message..."
          
          # Color scheme
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;  # Gold
            "afternoon") COLOR=16763904 ;; # Orange
            "evening") COLOR=16744448 ;;  # Red-orange
            "night") COLOR=8947848 ;;     # Dark blue
          esac
          
          # Get content
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          # Create JSON with Python for proper escaping
          python3 << 'PYTHON_EOF'
          import json
          import os
          
          title = os.environ.get('TITLE', 'Gaming Squad')
          desc_raw = os.environ.get('DESC', 'What\'s good everyone!')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          
          # Add attribution
          desc = f"{desc_raw}\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {
                  "url": "https://twemoji.maxcdn.com/v/latest/72x72/1f305.png"
              },
              "footer": {
                  "text": "chill gaming vibes",
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Payload created")
          PYTHON_EOF
          
          # Send to Discord
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          
        env:
          TITLE: ${{ steps.ai_generation.outputs.TITLE }}
          DESC: ${{ steps.ai_generation.outputs.DESC_RAW }}
          COLOR: ${{ env.COLOR }}
          TIMESTAMP: ${{ env.TIMESTAMP }}

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          # Check if OpenWrt mode (no delay needed)
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          # Context-aware stickers
          case "${{ steps.context.outputs.TYPE }}" in
            "morning")
              STICKERS=(
                "https://media.discordapp.net/stickers/1404543938815197306.png"
                "https://media.discordapp.net/stickers/1405277985237368943.png"
                "https://media.discordapp.net/stickers/1405477154095104082.png"
              )
              ;;
            "afternoon")
              STICKERS=(
                "https://media.discordapp.net/stickers/1405487683526201404.png"
                "https://media.discordapp.net/stickers/1405546781927936051.png"
                "https://media.discordapp.net/stickers/1405855503858274397.png"
              )
              ;;
            "evening")
              STICKERS=(
                "https://media.discordapp.net/stickers/1405914196922597549.png"
                "https://media.discordapp.net/stickers/1406065324758929509.png"
                "https://media.discordapp.net/stickers/1406629592839491716.png"
              )
              ;;
            "night")
              STICKERS=(
                "https://media.discordapp.net/stickers/1406668584335184003.png"
                "https://media.discordapp.net/stickers/1407858067013369856.png"
                "https://media.discordapp.net/stickers/1407858350334677204.png"
                "https://media.discordapp.net/stickers/1407858765616779396.png"
                "https://media.discordapp.net/stickers/1407859373396590735.png"
              )
              ;;
          esac
          
          RANDOM_INDEX=$((RANDOM % ${#STICKERS[@]}))
          SELECTED_STICKER=${STICKERS[$RANDOM_INDEX]}
          
          curl -f -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$SELECTED_STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "🌟 Special: ${{ steps.context.outputs.SPECIAL_CONTEXT }}"
          echo "🌤️ Weather: ${{ steps.weather.outputs.WEATHER_INFO }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          echo "================================"
          echo "✅ Fixed greeting workflow complete!"

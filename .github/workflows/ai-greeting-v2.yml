name: Skye Community AI Greeting

on:
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Source (openwrt/manual/test)'
        required: false
        default: 'manual'
        type: string
      greeting_type:
        description: 'Greeting type'
        required: false
        default: 'auto'
        type: choice
        options: [auto, morning, afternoon, evening, night]
      force_weather:
        description: 'Force weather check'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode'
        required: false
        default: false
        type: boolean
      use_test_webhook:
        description: 'Send to test webhook'
        required: false
        default: false
        type: boolean

jobs:
  send-greeting:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    
    steps:
      - name: Setup Context
        id: context
        run: |
          export TZ='Asia/Jakarta'
          
          OPENWRT_MODE=false
          if command -v opkg >/dev/null 2>&1 || [[ -f /etc/openwrt_release ]] || [[ "${{ github.event.inputs.trigger_source }}" == "openwrt" ]]; then
            OPENWRT_MODE=true
            echo "🏠 OpenWrt detected - optimized timing mode"
          fi
          
          CURRENT_DAY=$(date +%A)
          CURRENT_DATE=$(date +"%B %d, %Y")
          CURRENT_TIME=$(date +"%H:%M")
          HOUR=$(date +%H | sed 's/^0*//')
          DAY_NUM=$(date +%u)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            MANUAL_TYPE="${{ github.event.inputs.greeting_type }}"
            if [[ "$MANUAL_TYPE" == "auto" ]]; then
              if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
                TYPE="morning"
              elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
                TYPE="afternoon" 
              elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
                TYPE="evening"
              else
                TYPE="night"
              fi
            else
              TYPE="$MANUAL_TYPE"
            fi
          else
            if [[ $HOUR -ge 5 && $HOUR -lt 12 ]]; then
              TYPE="morning"
            elif [[ $HOUR -ge 12 && $HOUR -lt 17 ]]; then
              TYPE="afternoon" 
            elif [[ $HOUR -ge 17 && $HOUR -lt 21 ]]; then
              TYPE="evening"
            else
              TYPE="night"
            fi
          fi
          
          if [[ $DAY_NUM -eq 6 || $DAY_NUM -eq 7 ]]; then
            CONTEXT="weekend"
          else
            CONTEXT="weekday"
          fi
          
          SPECIAL_CONTEXT=""
          case "$CURRENT_DAY" in
            "Monday") SPECIAL_CONTEXT="monday_motivation" ;;
            "Wednesday") SPECIAL_CONTEXT="hump_day" ;;
            "Friday") SPECIAL_CONTEXT="weekend_countdown" ;;
            "Sunday") SPECIAL_CONTEXT="sunday_prep" ;;
          esac
          
          echo "TYPE=$TYPE" >> $GITHUB_OUTPUT
          echo "CONTEXT=$CONTEXT" >> $GITHUB_OUTPUT
          echo "CURRENT_DAY=$CURRENT_DAY" >> $GITHUB_OUTPUT
          echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_OUTPUT
          echo "SPECIAL_CONTEXT=$SPECIAL_CONTEXT" >> $GITHUB_OUTPUT
          echo "DAY_NUM=$DAY_NUM" >> $GITHUB_OUTPUT
          echo "OPENWRT_MODE=$OPENWRT_MODE" >> $GITHUB_OUTPUT
          
          echo "🎯 Context: $TYPE on $CURRENT_DAY ($SPECIAL_CONTEXT)"

      - name: Setup Creative Context
        id: creative_context
        run: |
          echo "� Setting up creative context for AI generation..."
          
          # Generate random context elements for creativity
          MOOD_WORDS=("chill" "energetic" "focused" "relaxed" "hyped" "zen" "wild" "smooth")
          RANDOM_MOOD=${MOOD_WORDS[$((RANDOM % ${#MOOD_WORDS[@]}))]}
          
          VIBES=("gaming vibes" "squad energy" "team spirit" "community feels" "discord energy" "crew vibes" "collective mood")
          RANDOM_VIBE=${VIBES[$((RANDOM % ${#VIBES[@]}))]}
          
          echo "MOOD_CONTEXT=$RANDOM_MOOD" >> $GITHUB_OUTPUT
          echo "VIBE_CONTEXT=$RANDOM_VIBE" >> $GITHUB_OUTPUT
          echo "✅ Creative context ready: $RANDOM_MOOD $RANDOM_VIBE"

      - name: Generate AI Content (Message + Title + Footer)
        id: ai_generation
        env:
          CURRENT_DAY: ${{ steps.context.outputs.CURRENT_DAY }}
          TIME_OF_DAY: ${{ steps.context.outputs.TYPE }}
          CONTEXT: ${{ steps.context.outputs.CONTEXT }}
          MOOD_CONTEXT: ${{ steps.creative_context.outputs.MOOD_CONTEXT }}
          VIBE_CONTEXT: ${{ steps.creative_context.outputs.VIBE_CONTEXT }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🤖 Generating complete AI content (message + title + footer)..."

          # Weekend flag
          if [ "$CONTEXT" = "weekend" ]; then
            export IS_WEEKEND=true
          else
            export IS_WEEKEND=false
          fi
          
          # Advanced AI generator dengan title dan footer + slang integration
          cat > /tmp/advanced_ai_generator.py << 'EOL'
          import os, re, random, requests, sys, json

          # Integrated slang dictionary untuk context-aware usage
          SLANG_GUIDE = {
              "indo_casual": {
                  "yuk": "ajakan halus untuk mulai - use for gentle invitations",
                  "yuuuk": "ajakan halus lebih excited - use when more enthusiastic", 
                  "gas": "ajakan tegas langsung jalan - use for immediate action",
                  "gaskeun": "ajakan push terus tanpa ragu - use for confident moves",
                  "mabar": "main bareng - use for group gaming invitations",
                  "tipis-tipis": "sedikit/ringan - use for light/casual activities",
                  "bentar": "sebentar - use for short duration activities",
                  "santai": "rileks/non-kompetitif - use for chill sessions",
                  "rapihin": "merapikan/beresin - use for organizing tasks",
                  "anjirrr": "ekspresif kaget/excited - use for surprised reactions",
                  "anjayyy": "ekspresif senang/hype - use for happy/excited moments",
                  "woyyyy": "panggilan excited - use for energetic calls",
                  "bjirrrr": "ekspresif shock - use for surprising moments"
              },
              "gaming_terms": {
                  "classic": "mode santai (ML/Valo) - use for non-ranked games",
                  "unrated": "match non-rank (Valo) - use for casual Valorant",
                  "push rank": "naik peringkat - use for competitive grinding",
                  "aim training": "latihan aim - use for skill improvement",
                  "comms on": "voice aktif koordinasi - use for team coordination"
              },
              "english_casual": {
                  "crew": "sapaan ke grup - use for group address", 
                  "squad": "sapaan ke grup - use for team address",
                  "vibes": "suasana/feel - use for mood description",
                  "grind": "kerja keras - use for intensive work/gaming",
                  "queue up": "antri match - use for getting ready to play",
                  "dialed in": "fokus siap - use when ready and focused",
                  "heads on": "pikiran siap - use for mental readiness",
                  "keep it steady": "ritme stabil - use for maintaining pace",
                  "we move": "lanjut jalan - use for continuing forward",
                  "feeling sharp": "ngerasa fit - use when feeling good",
                  "wind down": "turun tempo/tutup hari - use for ending sessions",
                  "locked in": "fokus banget - use for high concentration",
                  "chill session": "sesi santai - use for relaxed gaming"
              }
          }

          def generate_content():
              day = os.environ.get("CURRENT_DAY", "today").lower()
              time = os.environ.get("TIME_OF_DAY", "day")
              context = os.environ.get("CONTEXT", "weekday")
              mood = os.environ.get("MOOD_CONTEXT", "chill")
              vibe = os.environ.get("VIBE_CONTEXT", "gaming vibes")
              is_weekend = context == "weekend"
              api_key = os.environ.get("GEMINI_API_KEY")
              
              if not api_key:
                  raise Exception("No API key")
              
              # Enhanced contextual prompt dengan slang integration
              slang_context = ""
              for category, terms in SLANG_GUIDE.items():
                  slang_context += f"\n{category.upper()}:\n"
                  for term, meaning in terms.items():
                      slang_context += f"- {term}: {meaning}\n"
              
              # Title emoji selection
              title_emojis = ["😜", "🥵", "🥶", "🤭", "🫣", "🤔", "🫡", "😵", "😮‍💨", "😪", "🤤", "🥱", "🤧", "🤪", "😫", "😖", "😭", "😡", "🤫"]
              random_emoji = random.choice(title_emojis)
              
              # Time-appropriate Skytizens greetings
              skytizens_greetings = {
                  "morning": ["morning skytizens", "rise up skytizens", "wakey wakey skytizens", "good morning skytizens"],
                  "afternoon": ["afternoon skytizens", "midday skytizens", "hey skytizens", "sup skytizens"],
                  "evening": ["evening skytizens", "golden hour skytizens", "sunset skytizens", "good evening skytizens"],
                  "night": ["night skytizens", "late night skytizens", "midnight skytizens", "nocturnal skytizens"]
              }
              skytizens_greeting = random.choice(skytizens_greetings.get(time, ["hey skytizens"]))
              
              # Weekday morning special handling
              weekday_morning_note = ""
              if time == "morning" and not is_weekend:
                  weekday_morning_note = """
              **SPECIAL WEEKDAY MORNING RULES:**
              - Prioritize productivity/work/school first
              - Gaming suggestions should be for later (sore/malem)
              - Use motivational tone for starting the day
              - Examples: "rapihin to-do dulu", "fokus tugas dulu", "gaming nanti sore"
              """
              
              prompt = f"""Create Discord greeting for Indonesian gaming community.

              Context: {day} {time} ({context})
              Mood: {mood}
              Games: Roblox, Mobile Legends, Valorant
              Emoji: {random_emoji}

              GENERATE JSON ONLY:
              {{
                "message": "2-sentence greeting",
                "title": "greeting with emoji", 
                "footer": "short footer"
              }}

              Requirements:
              - Sentence 1: English opener + question with {day} mention
              - Sentence 2: Indonesian slang response + {'<@&1374047008829997157>' if is_weekend else 'gaming focus'}
              - Use slang: yuk, gas, mabar, anjirrr, anjayyy naturally
              - Include day: "monday grind", "friday vibes", "{day} energy"
              - All lowercase style
              - Title: "{random_emoji} {skytizens_greeting}" (greet Skytizens with time-appropriate greeting)
              - Footer: "[2-3 words matching time/day]"

              {weekday_morning_note if time == "morning" and not is_weekend else ""}

              Examples:
              Monday morning: {{"message": "morning warriors, monday grind energy looking good? yuk fokus tugas dulu, mabar valorant nanti sore", "title": "{random_emoji} morning skytizens", "footer": "grind time active"}}

              Weekend: {{"message": "evening legends, saturday vibes epic today? gaskeun <@&1374047008829997157> dinner sambil push rank", "title": "{random_emoji} evening skytizens", "footer": "saturday energy"}}

              Return JSON only:"""
              
              url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={api_key}"
              payload = {
                  "contents": [{"parts": [{"text": prompt}]}],
                  "generationConfig": {
                      "temperature": 0.7,
                      "maxOutputTokens": 400,
                      "topP": 0.8,
                      "candidateCount": 1
                  },
                  "safetySettings": [
                      {
                          "category": "HARM_CATEGORY_HARASSMENT",
                          "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                      },
                      {
                          "category": "HARM_CATEGORY_HATE_SPEECH", 
                          "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                      },
                      {
                          "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                          "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                      },
                      {
                          "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                          "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                      }
                  ]
              }
              
              response = requests.post(url, json=payload, timeout=25)
              
              if response.status_code == 200:
                  data = response.json()
                  print(f"🔍 AI Response structure: {list(data.keys())}")
                  
                  if 'candidates' in data and len(data['candidates']) > 0:
                      candidate = data['candidates'][0]
                      print(f"🔍 Candidate structure: {list(candidate.keys())}")
                      
                      # Check finish reason
                      if 'finishReason' in candidate:
                          finish_reason = candidate['finishReason']
                          print(f"🔍 Finish reason: {finish_reason}")
                          if finish_reason != 'STOP':
                              print(f"⚠️ Non-STOP finish reason: {finish_reason}")
                      
                      # Handle different response structures
                      ai_text = ""
                      if 'content' in candidate and 'parts' in candidate['content']:
                          if len(candidate['content']['parts']) > 0 and 'text' in candidate['content']['parts'][0]:
                              ai_text = candidate['content']['parts'][0]['text'].strip()
                      elif 'text' in candidate:
                          ai_text = candidate['text'].strip()
                      elif 'content' in candidate and isinstance(candidate['content'], str):
                          ai_text = candidate['content'].strip()
                      
                      print(f"🔍 Extracted text length: {len(ai_text)}")
                      print(f"🔍 Text preview: {ai_text[:100]}...")
                      
                      # If no text but STOP reason, try simpler prompt
                      if not ai_text and candidate.get('finishReason') == 'STOP':
                          print("🔄 Trying simplified prompt...")
                          simple_prompt = f"""Generate a Discord greeting for Indonesian gamers in JSON format:
                          
                          Context: {day} {time} ({context})
                          Emoji: {random_emoji}
                          
                          Return JSON with message, title, footer fields only.
                          
                          Example:
                          {{"message": "morning legends, ready for the grind? yuk gaming session", "title": "{random_emoji} morning skytizens", "footer": "gaming mode on"}}
                          """
                          
                          simple_payload = {
                              "contents": [{"parts": [{"text": simple_prompt}]}],
                              "generationConfig": {
                                  "temperature": 0.5,
                                  "maxOutputTokens": 200
                              }
                          }
                          
                          simple_response = requests.post(url, json=simple_payload, timeout=15)
                          if simple_response.status_code == 200:
                              simple_data = simple_response.json()
                              if 'candidates' in simple_data and len(simple_data['candidates']) > 0:
                                  simple_candidate = simple_data['candidates'][0]
                                  if 'content' in simple_candidate and 'parts' in simple_candidate['content']:
                                      if len(simple_candidate['content']['parts']) > 0 and 'text' in simple_candidate['content']['parts'][0]:
                                          ai_text = simple_candidate['content']['parts'][0]['text'].strip()
                                          print(f"🔄 Simple prompt result: {ai_text[:50]}...")
                      
                      if ai_text:
                          # Enhanced JSON extraction
                          json_patterns = [
                              r'\{[^}]*"message"[^}]*"title"[^}]*"footer"[^}]*\}',
                              r'\{[^}]*"title"[^}]*"message"[^}]*"footer"[^}]*\}',
                              r'\{[^}]*"footer"[^}]*"message"[^}]*"title"[^}]*\}',
                              r'\{.*?"message".*?"title".*?"footer".*?\}',
                              r'\{.*?"title".*?"footer".*?"message".*?\}',
                              r'\{.*?"footer".*?"title".*?"message".*?\}'
                          ]
                          
                          for pattern in json_patterns:
                              json_match = re.search(pattern, ai_text, re.DOTALL)
                              if json_match:
                                  try:
                                      content = json.loads(json_match.group())
                                      if all(key in content for key in ['message', 'title', 'footer']):
                                          # Validate dan clean content
                                          message = content['message'].lower().strip()
                                          title = content['title'].lower().strip()
                                          footer = content['footer'].lower().strip()
                                          
                                          # Ensure proper role tag for weekend
                                          if is_weekend and '<@&1374047008829997157>' not in message:
                                              # Add tag after first sentence
                                              if '?' in message:
                                                  message = message.replace('?', '? <@&1374047008829997157>', 1)
                                              else:
                                                  message += ' <@&1374047008829997157>'
                                          elif not is_weekend:
                                              message = re.sub(r'<@&[0-9]+>', '', message).strip()
                                          
                                          # Length validation
                                          if 60 <= len(message) <= 220:
                                              return {
                                                  'message': message,
                                                  'title': title,
                                                  'footer': footer,
                                                  'source': 'ai'
                                              }
                                  except json.JSONDecodeError:
                                      continue
                  else:
                      print(f"❌ No valid candidates in response or missing content structure")
              else:
                  print(f"❌ API request failed with status: {response.status_code}")
                  print(f"❌ Response: {response.text[:200]}...")
              
              raise Exception("AI generation failed")

          def generate_enhanced_fallback():
              day = os.environ.get("CURRENT_DAY", "today").lower()
              time = os.environ.get("TIME_OF_DAY", "day")
              context = os.environ.get("CONTEXT", "weekday")
              is_weekend = context == "weekend"
              
              # Random emoji untuk title
              title_emojis = ["😜", "🥵", "🥶", "🤭", "🫣", "🤔", "🫡", "😵", "😮‍💨", "😪", "🤤", "🥱", "🤧", "🤪", "😫", "😖", "😭", "😡", "🤫"]
              random_emoji = random.choice(title_emojis)
              
              # Time-appropriate Skytizens greetings
              skytizens_greetings = {
                  "morning": ["morning skytizens", "rise up skytizens", "wakey wakey skytizens", "good morning skytizens"],
                  "afternoon": ["afternoon skytizens", "midday skytizens", "hey skytizens", "sup skytizens"],
                  "evening": ["evening skytizens", "golden hour skytizens", "sunset skytizens", "good evening skytizens"],
                  "night": ["night skytizens", "late night skytizens", "midnight skytizens", "nocturnal skytizens"]
              }
              skytizens_greeting = random.choice(skytizens_greetings.get(time, ["hey skytizens"]))
              
              # Enhanced fallback dengan slang yang tepat dan badword ringan
              varied_openers = {
                  "morning": [f"morning legends", f"{day} warriors", f"early squad", f"{day} heroes"],
                  "afternoon": [f"afternoon champions", f"{day} squad", f"midday legends", f"{day} warriors"],
                  "evening": [f"evening heroes", f"{day} crew", f"golden hour squad", f"{day} legends"],
                  "night": [f"night champions", f"{day} nocturnal squad", f"late shift heroes", f"midnight warriors"]
              }
              
              # Day-specific context untuk natural mentions
              day_contexts = {
                  "monday": ["monday grind", "monday motivation", "week startup", "monday energy"],
                  "tuesday": ["tuesday flow", "tuesday momentum", "midweek groove", "tuesday vibes"],
                  "wednesday": ["hump day", "wednesday power", "midweek peak", "wednesday energy"],
                  "thursday": ["thursday push", "almost weekend", "thursday grind", "weekend prep"],
                  "friday": ["friday vibes", "weekend countdown", "friday energy", "week finale"],
                  "saturday": ["saturday freedom", "weekend mode", "saturday vibes", "weekend energy"],
                  "sunday": ["sunday chill", "weekend wind down", "sunday vibes", "week prep"]
              }
              
              day_context = random.choice(day_contexts.get(day, [f"{day} vibes"]))
              
              contextual_questions = {
                  "morning": [
                      f"anjirrr {day_context} energy levels looking crisp?", 
                      f"{day_context} dialed in for productivity?", 
                      f"feeling sharp for {day_context}?",
                      f"anjayyy ready to tackle {day_context}?"
                  ],
                  "afternoon": [
                      f"{day_context} momentum still going strong?", 
                      f"anjirrr {day_context} post-lunch vibes hitting right?", 
                      f"keeping the {day_context} steady?",
                      f"{day_context} afternoon flow dialed in?"
                  ],
                  "evening": [
                      f"anjayyy {day_context} was epic or total chaos?", 
                      f"{day_context} evening chill mode activated?", 
                      f"ready to wind down from {day_context}?",
                      f"{day_context} golden hour vibes hitting?"
                  ],
                  "night": [
                      f"{day_context} night owl mode engaged?", 
                      f"anjirrr {day_context} peaceful late hours or chaos?", 
                      f"locked in for {day_context} late shift?",
                      f"{day_context} midnight energy still flowing?"
                  ]
              }
              
              # Contextual activities dengan slang yang sesuai dan day awareness
              if time == "morning" and not is_weekend:
                  activities = [
                      "yuk rapihin to-do dulu, mabar valorant nanti malem",
                      "gas fokus tugas dulu, push rank mobile legends nanti sore", 
                      "yuuuk prioritas kerjaan dulu, gaming session abis magrib",
                      "gaskeun selesaiin tanggung jawab dulu, roblox santai nanti malem"
                  ]
                  titles = [f"{random_emoji} {skytizens_greeting}", f"{random_emoji} {day_context} skytizens", f"{random_emoji} morning productivity squad", f"{random_emoji} {day} warrior skytizens"]
                  footers = [f"{day_context} active", f"{day} grind mode", f"{day_context} energy", f"{day} productivity mode"]
              elif is_weekend:
                  tag = " <@&1374047008829997157>"
                  activities = [
                      f"gaskeun{tag} mabar valorant santai aja",
                      f"yuuuk{tag} push rank mobile legends tipis-tipis",
                      f"gas{tag} roblox adventure bareng-bareng",
                      f"gaskeun{tag} comms on, unrated valorant dulu"
                  ]
                  titles = [f"{random_emoji} {skytizens_greeting}", f"{random_emoji} {day} weekend skytizens", f"{random_emoji} weekend gaming squad", f"{random_emoji} {day} squad skytizens"]
                  footers = [f"{day_context} vibes", f"{day} gaming energy", f"weekend {time} active", f"{day} squad online"]
              else:
                  activities = [
                      "yuuuk quick match valorant bentar",
                      "gaskeun classic mobile legends santai", 
                      "gas aim training tipis-tipis dulu",
                      "yuuuk roblox chill session bareng"
                  ]
                  titles = [f"{random_emoji} {skytizens_greeting}", f"{random_emoji} {day} {time} skytizens", f"{random_emoji} {day_context} break squad", f"{random_emoji} gaming pause skytizens"]
                  footers = [f"{day_context} energy", f"{day} {time} vibes", f"{day_context} mode", f"{day} gaming active"]
              
              opener = random.choice(varied_openers.get(time, [f"{day} squad"]))
              question = random.choice(contextual_questions.get(time, ["how's the vibe?"]))
              activity = random.choice(activities)
              title = random.choice(titles)
              footer = random.choice(footers)
              
              message = f"{opener}, {question} {activity}"
              
              return {
                  'message': message,
                  'title': title,
                  'footer': footer,
                  'source': 'enhanced_fallback'
              }

          try:
              result = generate_content()
              print(f"✅ AI generation successful with slang integration")
          except Exception as e:
              print(f"⚠️ AI failed: {e}, using enhanced fallback")
              result = generate_enhanced_fallback()
          
          # Write results
          with open('/tmp/ai_message.txt', 'w', encoding='utf-8') as f:
              f.write(result['message'])
          with open('/tmp/ai_title.txt', 'w', encoding='utf-8') as f:
              f.write(result['title'])
          with open('/tmp/ai_footer.txt', 'w', encoding='utf-8') as f:
              f.write(result['footer'])
          with open('/tmp/ai_source.txt', 'w', encoding='utf-8') as f:
              f.write(result['source'])
          
          print(f"🎯 Generated content with slang:")
          print(f"   Message: {result['message'][:70]}...")
          print(f"   Title: {result['title']}")
          print(f"   Footer: {result['footer']}")
          print(f"   Source: {result['source']}")
          EOL

          # Execute the advanced generator
          echo "🧪 Executing advanced AI generator..."
          python3 /tmp/advanced_ai_generator.py
          
          # Process results
          if [[ -s /tmp/ai_message.txt && -s /tmp/ai_title.txt && -s /tmp/ai_footer.txt ]]; then
            AI_MESSAGE=$(cat /tmp/ai_message.txt)
            AI_TITLE=$(cat /tmp/ai_title.txt)
            AI_FOOTER=$(cat /tmp/ai_footer.txt)
            AI_SOURCE=$(cat /tmp/ai_source.txt)
            
            echo "🎯 Generated content:"
            echo "   Message: $AI_MESSAGE"
            echo "   Title: $AI_TITLE"
            echo "   Footer: $AI_FOOTER"
            echo "   Source: $AI_SOURCE"
            
            # Validation
            if [[ ${#AI_MESSAGE} -gt 40 && ${#AI_MESSAGE} -lt 250 ]]; then
              DESC_RAW="$AI_MESSAGE"
              TITLE="$AI_TITLE"
              FOOTER_TEXT="$AI_FOOTER"
              USE_AI=true
              echo "✅ Content validated and accepted"
            else
              echo "❌ Content validation failed, using backup"
              USE_AI=false
            fi
          else
            echo "❌ Generation failed, using backup"
            USE_AI=false
          fi
          
          # Backup system jika AI gagal - dengan konteks yang tepat
          if [[ "$USE_AI" != "true" ]]; then
            echo "🎲 Using enhanced contextual backup system..."
            
            DAY=$(echo "$CURRENT_DAY" | tr '[:upper:]' '[:lower:]')
            
            # Weekday morning special: prioritas produktivitas dulu
            if [[ "$TIME_OF_DAY" == "morning" && "$CONTEXT" == "weekday" ]]; then
              case "$DAY" in
                "monday")
                  DESC_RAW=$(shuf -e \
                    "morning warriors monday, ready to tackle the grind? yuk rapihin to-do dulu, mabar valorant nanti malem" \
                    "monday legends, energy levels looking good? gaskeun fokus kerjaan dulu, push rank mobile legends abis magrib" \
                    "morning heroes monday, dialed in for productivity? yuuuk prioritas tugas dulu, roblox santai nanti malem" \
                    -n1)
                  TITLE=$(shuf -e "morning skytizens" "rise up skytizens" "monday morning squad" "wakey wakey skytizens" -n1)
                  ;;
                *)
                  DESC_RAW=$(shuf -e \
                    "morning legends $DAY, ready for the hustle? yuk selesaiin tanggung jawab dulu, gaming session nanti sore" \
                    "$DAY warriors, feeling sharp for productivity? gaskeun fokus tugas dulu, mabar valorant abis kerja" \
                    "morning squad $DAY, dialed in for the grind? yuuuk rapihin kerjaan dulu, push rank mobile legends nanti malem" \
                    -n1)
                  TITLE=$(shuf -e "morning skytizens" "rise up skytizens" "good morning squad" "wakey wakey skytizens" -n1)
                  ;;
              esac
              FOOTER_TEXT=$(shuf -e "productivity first" "weekday warrior energy" "work-gaming balance" "grind mode active" -n1)
              
            # Weekend atau non-morning: gaming focus
            elif [[ "$CONTEXT" == "weekend" ]]; then
              case "$TIME_OF_DAY" in
                "morning")
                  DESC_RAW=$(shuf -e \
                    "morning legends $DAY, weekend vibes hitting different? gaskeun <@&1374047008829997157> mabar valorant santai aja" \
                    "$DAY warriors, feeling fresh for gaming? yuuuk <@&1374047008829997157> push rank mobile legends tipis-tipis" \
                    "weekend morning squad, energy levels good? gas <@&1374047008829997157> roblox adventure bareng-bareng" \
                    -n1)
                  TITLE=$(shuf -e "morning skytizens" "rise up skytizens" "weekend morning squad" "good morning skytizens" -n1)
                  FOOTER_TEXT=$(shuf -e "weekend morning vibes" "$DAY gaming energy" "weekend mode active" "$DAY squad online" -n1)
                  ;;
                "afternoon")
                  DESC_RAW=$(shuf -e \
                    "afternoon champions $DAY, midday momentum still going? gaskeun <@&1374047008829997157> comms on, unrated valorant" \
                    "$DAY squad, post-lunch vibes hitting right? yuuuk <@&1374047008829997157> classic mobile legends santai" \
                    "weekend afternoon legends, keeping energy steady? gas <@&1374047008829997157> roblox chill session" \
                    -n1)
                  TITLE=$(shuf -e "afternoon skytizens" "midday skytizens" "hey skytizens" "$DAY afternoon squad" -n1)
                  FOOTER_TEXT=$(shuf -e "weekend afternoon vibes" "$DAY gaming flow" "midday gaming energy" "$DAY squad active" -n1)
                  ;;
                "evening")
                  DESC_RAW=$(shuf -e \
                    "evening heroes $DAY, day was epic or chaos? gaskeun <@&1374047008829997157> dinner sambil push rank valorant" \
                    "$DAY crew, golden hour vibes hitting? yuuuk <@&1374047008829997157> mabar mobile legends tipis-tipis" \
                    "weekend evening squad, ready to wind down? gas <@&1374047008829997157> aim training bentar terus santai" \
                    -n1)
                  TITLE=$(shuf -e "evening skytizens" "golden hour skytizens" "sunset skytizens" "$DAY evening squad" -n1)
                  FOOTER_TEXT=$(shuf -e "weekend evening vibes" "$DAY chill mode" "golden hour energy" "$DAY wind down active" -n1)
                  ;;
                "night")
                  DESC_RAW=$(shuf -e \
                    "night champions $DAY, locked in for late shift? gaskeun <@&1374047008829997157> marathon gaming valorant" \
                    "$DAY nocturnal squad, midnight energy flowing? yuuuk <@&1374047008829997157> push rank mobile legends sampai pagi" \
                    "weekend night warriors, peaceful hours or chaos? gas <@&1374047008829997157> roblox adventure midnight session" \
                    -n1)
                  TITLE=$(shuf -e "night skytizens" "late night skytizens" "midnight skytizens" "$DAY night squad" -n1)
                  FOOTER_TEXT=$(shuf -e "weekend night vibes" "$DAY nocturnal energy" "midnight gaming mode" "$DAY night squad online" -n1)
                  ;;
              esac
              
            # Weekday non-morning: gaming ok tapi tetap aware tanggung jawab
            else
              case "$TIME_OF_DAY" in
                "afternoon")
                  DESC_RAW=$(shuf -e \
                    "afternoon champions $DAY, keeping the momentum? yuuuk quick match valorant bentar, break sejenak" \
                    "$DAY squad, post-lunch flow dialed in? gaskeun classic mobile legends tipis-tipis" \
                    "midday legends $DAY, energy steady? yuuuk aim training bentar terus balik produktif" \
                    -n1)
                  TITLE=$(shuf -e "afternoon skytizens" "midday skytizens" "hey skytizens" "$DAY afternoon break" -n1)
                  FOOTER_TEXT=$(shuf -e "afternoon gaming energy" "$DAY midday vibes" "weekday break mode" "$DAY gaming flow" -n1)
                  ;;
                "evening")
                  DESC_RAW=$(shuf -e \
                    "evening heroes $DAY, day accomplished or still grinding? yuuuk dinner sambil mabar valorant" \
                    "$DAY crew, evening transition smooth? gaskeun push rank mobile legends santai" \
                    "golden hour squad $DAY, ready to wind down? yuuuk roblox chill session bareng" \
                    -n1)
                  TITLE=$(shuf -e "evening skytizens" "golden hour skytizens" "sunset skytizens" "$DAY evening squad" -n1)
                  FOOTER_TEXT=$(shuf -e "evening gaming vibes" "$DAY wind down energy" "weekday evening mode" "$DAY gaming time" -n1)
                  ;;
                "night")
                  DESC_RAW=$(shuf -e \
                    "night champions $DAY, still locked in or winding down? yuuuk unrated valorant bentar terus rest" \
                    "$DAY nocturnal legends, peaceful late hours? gaskeun classic mobile legends santai" \
                    "late shift squad $DAY, midnight energy flowing? yuuuk roblox chill session wind down" \
                    -n1)
                  TITLE=$(shuf -e "night skytizens" "late night skytizens" "midnight skytizens" "$DAY night squad" -n1)
                  FOOTER_TEXT=$(shuf -e "weekday night vibes" "$DAY late shift energy" "midnight gaming mode" "$DAY nocturnal gaming" -n1)
                  ;;
              esac
            fi
            
            echo "🎯 Selected contextual backup: ${DESC_RAW:0:80}..."
          fi
          
          # Dynamic thumbnail based on time
          case "$TIME_OF_DAY" in
            "morning") THUMB="2600" ;;
            "afternoon") THUMB="1f343" ;;
            "evening") THUMB="1f307" ;;
            "night") THUMB="1f989" ;;
          esac
          
          # Output untuk step berikutnya
          echo "TITLE=$TITLE" >> $GITHUB_OUTPUT
          echo "DESC_RAW=$DESC_RAW" >> $GITHUB_OUTPUT
          echo "FOOTER_TEXT=$FOOTER_TEXT" >> $GITHUB_OUTPUT
          echo "USE_AI=$USE_AI" >> $GITHUB_OUTPUT
          echo "THUMB=$THUMB" >> $GITHUB_OUTPUT

      - name: Send Discord Message
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "📤 Sending Discord message with dynamic content..."
          
          case "${{ steps.context.outputs.TYPE }}" in
            "morning") COLOR=16766720 ;;
            "afternoon") COLOR=16763904 ;;
            "evening") COLOR=16744448 ;;
            "night") COLOR=8947848 ;;
          esac
          
          TITLE="${{ steps.ai_generation.outputs.TITLE }}"
          DESC="${{ steps.ai_generation.outputs.DESC_RAW }}"
          FOOTER_TEXT="${{ steps.ai_generation.outputs.FOOTER_TEXT }}"
          THUMB="${{ steps.ai_generation.outputs.THUMB }}"
          TIMESTAMP=$(TZ='Asia/Jakarta' date -u +%Y-%m-%dT%H:%M:%S.000Z)
          
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
            echo "Using TEST webhook"
          else
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "Using PRODUCTION webhook"
          fi
          
          # Create advanced Discord payload dengan AI-generated footer
          cat > /tmp/advanced_discord_script.py << 'EOL'
          import json, os
          
          title = os.environ.get('TITLE', 'skye squad')
          desc_raw = os.environ.get('DESC', "what's good everyone!")
          footer_text = os.environ.get('FOOTER_TEXT', 'gaming vibes')
          color = int(os.environ.get('COLOR', '16766720'))
          timestamp = os.environ.get('TIMESTAMP', '')
          thumb = os.environ.get('THUMB', '1f305')
          
          # Convert description to lowercase dan add signature
          desc = (desc_raw or '').lower()
          desc += "\n> by server dev guanteng - <@399393175904714752>"
          
          embed = {
              "title": title,
              "description": desc,
              "color": color,
              "thumbnail": {"url": f"https://twemoji.maxcdn.com/v/latest/72x72/{thumb}.png"},
              "footer": {
                  "text": footer_text,
                  "icon_url": "https://files.catbox.moe/npfh4e.jpg"
              },
              "timestamp": timestamp
          }
          
          payload = {"embeds": [embed]}
          
          with open('/tmp/discord_payload.json', 'w', encoding='utf-8') as f:
              json.dump(payload, f, ensure_ascii=False)
          
          print("✅ Advanced payload created with dynamic footer")
          EOL
          
          TITLE="$TITLE" DESC="$DESC" FOOTER_TEXT="$FOOTER_TEXT" COLOR="$COLOR" TIMESTAMP="$TIMESTAMP" THUMB="$THUMB" python3 /tmp/advanced_discord_script.py
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data-binary @/tmp/discord_payload.json
          
          echo "✅ Message sent with dynamic content!"
          echo "🤖 AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "🎨 Title: $TITLE"
          echo "💬 Footer: $FOOTER_TEXT"

      - name: Test Mode Output
        if: ${{ github.event.inputs.test_mode == 'true' }}
        run: |
          echo "🧪 TEST MODE - Message preview:"
          echo "================================"
          echo "Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "Description: ${{ steps.ai_generation.outputs.DESC_RAW }}"
          echo "Footer: ${{ steps.ai_generation.outputs.FOOTER_TEXT }}"
          echo "AI Used: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "Context: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.SPECIAL_CONTEXT }})"
          echo "Creative Context: ${{ steps.creative_context.outputs.MOOD_CONTEXT }} ${{ steps.creative_context.outputs.VIBE_CONTEXT }}"
          echo "OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "Webhook: TEST"
          else
            echo "Webhook: PRODUCTION"
          fi
          echo "================================"
          echo "🧪 Test complete - no message sent"

      - name: Send Random Sticker
        if: ${{ github.event.inputs.test_mode != 'true' }}
        run: |
          echo "🎲 Sending random sticker..."
          
          if [[ "${{ steps.context.outputs.OPENWRT_MODE }}" == "true" ]]; then
            echo "🏠 OpenWrt mode - sending sticker immediately"
            sleep 1
          else
            echo "⏰ Standard delay for sticker..."
            sleep 3
          fi
          
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_TEST }}"
          else
            WEBHOOK_URL="${{ secrets.Discord_WEBHOOK_URL }}"
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          fi
          
          if [[ "${{ steps.context.outputs.TYPE }}" == "morning" ]]; then
            STICKER="https://media.discordapp.net/stickers/1404543938815197306.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "afternoon" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405487683526201404.png"
          elif [[ "${{ steps.context.outputs.TYPE }}" == "evening" ]]; then
            STICKER="https://media.discordapp.net/stickers/1405914196922597549.png"
          else
            STICKER="https://media.discordapp.net/stickers/1406668584335184003.png"
          fi
          
          curl -f -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$STICKER\"}"
          
          echo "🎉 Sticker sent!"

      - name: Execution Summary
        run: |
          echo "📊 EXECUTION SUMMARY"
          echo "================================"
          echo "🕐 Time: ${{ steps.context.outputs.CURRENT_TIME }} WIB (${{ steps.context.outputs.CURRENT_DAY }})"
          echo "🎯 Type: ${{ steps.context.outputs.TYPE }} (${{ steps.context.outputs.CONTEXT }})"
          echo "� Creative Context: ${{ steps.creative_context.outputs.MOOD_CONTEXT }} ${{ steps.creative_context.outputs.VIBE_CONTEXT }}"
          echo "🤖 AI Success: ${{ steps.ai_generation.outputs.USE_AI }}"
          echo "📝 Title: ${{ steps.ai_generation.outputs.TITLE }}"
          echo "💬 Footer: ${{ steps.ai_generation.outputs.FOOTER_TEXT }}"
          echo "🏠 OpenWrt Mode: ${{ steps.context.outputs.OPENWRT_MODE }}"
          echo "🧪 Test Mode: ${{ github.event.inputs.test_mode }}"
          if [[ "${{ github.event.inputs.use_test_webhook }}" == "true" ]]; then
            echo "🔄 Using TEST webhook"
          else
            echo "🔄 Using PRODUCTION webhook"
          fi
          echo "================================"
          echo "✅ Skye community greeting complete with dynamic AI content!"
